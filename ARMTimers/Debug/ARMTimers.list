
ARMTimers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000270  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800037c  0800037c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800037c  0800037c  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800037c  0800037c  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800037c  0800037c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800037c  0800037c  0000137c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000380  08000380  00001380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000384  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000388  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000388  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c4b  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004c1  00000000  00000000  00002c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  00003140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000013f  00000000  00000000  00003308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000152bb  00000000  00000000  00003447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001dab  00000000  00000000  00018702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b2b0  00000000  00000000  0001a4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009575d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000550  00000000  00000000  000957a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00095cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000364 	.word	0x08000364

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000364 	.word	0x08000364

0800014c <main>:
void configureIO();
void delay(int t);



int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	enableClk();
 8000150:	f000 f83c 	bl	80001cc <enableClk>
	configureIO();
 8000154:	f000 f84e 	bl	80001f4 <configureIO>

  while (1) {

	  if (GPIOB ->IDR & (1<<10)){ //Active High
 8000158:	4b1a      	ldr	r3, [pc, #104]	@ (80001c4 <main+0x78>)
 800015a:	689b      	ldr	r3, [r3, #8]
 800015c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <main+0x40>

		  delay(60);
 8000164:	203c      	movs	r0, #60	@ 0x3c
 8000166:	f000 f865 	bl	8000234 <delay>

		  if (GPIOB ->IDR & (1<<10)){
 800016a:	4b16      	ldr	r3, [pc, #88]	@ (80001c4 <main+0x78>)
 800016c:	689b      	ldr	r3, [r3, #8]
 800016e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000172:	2b00      	cmp	r3, #0
 8000174:	d0f0      	beq.n	8000158 <main+0xc>

			  while (-1){
			  			  GPIOA -> ODR ^= (1 << 1);
 8000176:	4b14      	ldr	r3, [pc, #80]	@ (80001c8 <main+0x7c>)
 8000178:	68db      	ldr	r3, [r3, #12]
 800017a:	4a13      	ldr	r2, [pc, #76]	@ (80001c8 <main+0x7c>)
 800017c:	f083 0302 	eor.w	r3, r3, #2
 8000180:	60d3      	str	r3, [r2, #12]
			  			  delay(100);
 8000182:	2064      	movs	r0, #100	@ 0x64
 8000184:	f000 f856 	bl	8000234 <delay>
			  			  GPIOA -> ODR ^= (1 << 1);
 8000188:	bf00      	nop
 800018a:	e7f4      	b.n	8000176 <main+0x2a>

		  }


	  }
	  else if (!(GPIOB ->IDR & (1<<11))){ //Active low
 800018c:	4b0d      	ldr	r3, [pc, #52]	@ (80001c4 <main+0x78>)
 800018e:	689b      	ldr	r3, [r3, #8]
 8000190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000194:	2b00      	cmp	r3, #0
 8000196:	d1df      	bne.n	8000158 <main+0xc>

		  delay(60);
 8000198:	203c      	movs	r0, #60	@ 0x3c
 800019a:	f000 f84b 	bl	8000234 <delay>

		  if (!(GPIOB ->IDR & (1<<11))){
 800019e:	4b09      	ldr	r3, [pc, #36]	@ (80001c4 <main+0x78>)
 80001a0:	689b      	ldr	r3, [r3, #8]
 80001a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d1d6      	bne.n	8000158 <main+0xc>

			  while (-1){
		  			  GPIOA -> ODR ^= (1 << 1);
 80001aa:	4b07      	ldr	r3, [pc, #28]	@ (80001c8 <main+0x7c>)
 80001ac:	68db      	ldr	r3, [r3, #12]
 80001ae:	4a06      	ldr	r2, [pc, #24]	@ (80001c8 <main+0x7c>)
 80001b0:	f083 0302 	eor.w	r3, r3, #2
 80001b4:	60d3      	str	r3, [r2, #12]
		  			  delay(500);
 80001b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001ba:	f000 f83b 	bl	8000234 <delay>
		  			  GPIOA -> ODR ^= (1 << 1);
 80001be:	bf00      	nop
 80001c0:	e7f3      	b.n	80001aa <main+0x5e>
 80001c2:	bf00      	nop
 80001c4:	40010c00 	.word	0x40010c00
 80001c8:	40010800 	.word	0x40010800

080001cc <enableClk>:

  }

}

void enableClk(){
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0

	RCC -> APB2ENR |= RCC_APB2ENR_IOPAEN;
 80001d0:	4b07      	ldr	r3, [pc, #28]	@ (80001f0 <enableClk+0x24>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	4a06      	ldr	r2, [pc, #24]	@ (80001f0 <enableClk+0x24>)
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	6193      	str	r3, [r2, #24]
	RCC -> APB2ENR |= RCC_APB2ENR_IOPBEN;
 80001dc:	4b04      	ldr	r3, [pc, #16]	@ (80001f0 <enableClk+0x24>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a03      	ldr	r2, [pc, #12]	@ (80001f0 <enableClk+0x24>)
 80001e2:	f043 0308 	orr.w	r3, r3, #8
 80001e6:	6193      	str	r3, [r2, #24]

}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	40021000 	.word	0x40021000

080001f4 <configureIO>:
void configureIO(){
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0

	GPIOB -> CRH |= 0x44448844; //B10 & B10 input
 80001f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000224 <configureIO+0x30>)
 80001fa:	685a      	ldr	r2, [r3, #4]
 80001fc:	4909      	ldr	r1, [pc, #36]	@ (8000224 <configureIO+0x30>)
 80001fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000228 <configureIO+0x34>)
 8000200:	4313      	orrs	r3, r2
 8000202:	604b      	str	r3, [r1, #4]
	GPIOA -> CRL |= 0x44444424; //A1 output 2MHz
 8000204:	4b09      	ldr	r3, [pc, #36]	@ (800022c <configureIO+0x38>)
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	4908      	ldr	r1, [pc, #32]	@ (800022c <configureIO+0x38>)
 800020a:	4b09      	ldr	r3, [pc, #36]	@ (8000230 <configureIO+0x3c>)
 800020c:	4313      	orrs	r3, r2
 800020e:	600b      	str	r3, [r1, #0]
	GPIOB -> ODR |= (1<<11); //B11 Pull Up // B10 Pull down by default
 8000210:	4b04      	ldr	r3, [pc, #16]	@ (8000224 <configureIO+0x30>)
 8000212:	68db      	ldr	r3, [r3, #12]
 8000214:	4a03      	ldr	r2, [pc, #12]	@ (8000224 <configureIO+0x30>)
 8000216:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800021a:	60d3      	str	r3, [r2, #12]

}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	40010c00 	.word	0x40010c00
 8000228:	44448844 	.word	0x44448844
 800022c:	40010800 	.word	0x40010800
 8000230:	44444424 	.word	0x44444424

08000234 <delay>:
void delay(int t){
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]

}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000246:	b480      	push	{r7}
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800024a:	bf00      	nop
 800024c:	e7fd      	b.n	800024a <NMI_Handler+0x4>

0800024e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800024e:	b480      	push	{r7}
 8000250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000252:	bf00      	nop
 8000254:	e7fd      	b.n	8000252 <HardFault_Handler+0x4>

08000256 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000256:	b480      	push	{r7}
 8000258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800025a:	bf00      	nop
 800025c:	e7fd      	b.n	800025a <MemManage_Handler+0x4>

0800025e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800025e:	b480      	push	{r7}
 8000260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000262:	bf00      	nop
 8000264:	e7fd      	b.n	8000262 <BusFault_Handler+0x4>

08000266 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000266:	b480      	push	{r7}
 8000268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800026a:	bf00      	nop
 800026c:	e7fd      	b.n	800026a <UsageFault_Handler+0x4>

0800026e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800026e:	b480      	push	{r7}
 8000270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr

0800027a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800027a:	b480      	push	{r7}
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr

08000286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000286:	b480      	push	{r7}
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800028a:	bf00      	nop
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr

08000292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000296:	f000 f82f 	bl	80002f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}

0800029e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002a2:	bf00      	nop
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr
	...

080002ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002ac:	f7ff fff7 	bl	800029e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480b      	ldr	r0, [pc, #44]	@ (80002e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80002b2:	490c      	ldr	r1, [pc, #48]	@ (80002e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80002b4:	4a0c      	ldr	r2, [pc, #48]	@ (80002e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a09      	ldr	r2, [pc, #36]	@ (80002ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80002c8:	4c09      	ldr	r4, [pc, #36]	@ (80002f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002d6:	f000 f821 	bl	800031c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ff37 	bl	800014c <main>
  bx lr
 80002de:	4770      	bx	lr
  ldr r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002e8:	08000384 	.word	0x08000384
  ldr r2, =_sbss
 80002ec:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002f0:	20000024 	.word	0x20000024

080002f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC1_2_IRQHandler>
	...

080002f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002fc:	4b05      	ldr	r3, [pc, #20]	@ (8000314 <HAL_IncTick+0x1c>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	461a      	mov	r2, r3
 8000302:	4b05      	ldr	r3, [pc, #20]	@ (8000318 <HAL_IncTick+0x20>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4413      	add	r3, r2
 8000308:	4a03      	ldr	r2, [pc, #12]	@ (8000318 <HAL_IncTick+0x20>)
 800030a:	6013      	str	r3, [r2, #0]
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	20000000 	.word	0x20000000
 8000318:	20000020 	.word	0x20000020

0800031c <__libc_init_array>:
 800031c:	b570      	push	{r4, r5, r6, lr}
 800031e:	2600      	movs	r6, #0
 8000320:	4d0c      	ldr	r5, [pc, #48]	@ (8000354 <__libc_init_array+0x38>)
 8000322:	4c0d      	ldr	r4, [pc, #52]	@ (8000358 <__libc_init_array+0x3c>)
 8000324:	1b64      	subs	r4, r4, r5
 8000326:	10a4      	asrs	r4, r4, #2
 8000328:	42a6      	cmp	r6, r4
 800032a:	d109      	bne.n	8000340 <__libc_init_array+0x24>
 800032c:	f000 f81a 	bl	8000364 <_init>
 8000330:	2600      	movs	r6, #0
 8000332:	4d0a      	ldr	r5, [pc, #40]	@ (800035c <__libc_init_array+0x40>)
 8000334:	4c0a      	ldr	r4, [pc, #40]	@ (8000360 <__libc_init_array+0x44>)
 8000336:	1b64      	subs	r4, r4, r5
 8000338:	10a4      	asrs	r4, r4, #2
 800033a:	42a6      	cmp	r6, r4
 800033c:	d105      	bne.n	800034a <__libc_init_array+0x2e>
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f855 3b04 	ldr.w	r3, [r5], #4
 8000344:	4798      	blx	r3
 8000346:	3601      	adds	r6, #1
 8000348:	e7ee      	b.n	8000328 <__libc_init_array+0xc>
 800034a:	f855 3b04 	ldr.w	r3, [r5], #4
 800034e:	4798      	blx	r3
 8000350:	3601      	adds	r6, #1
 8000352:	e7f2      	b.n	800033a <__libc_init_array+0x1e>
 8000354:	0800037c 	.word	0x0800037c
 8000358:	0800037c 	.word	0x0800037c
 800035c:	0800037c 	.word	0x0800037c
 8000360:	08000380 	.word	0x08000380

08000364 <_init>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr

08000370 <_fini>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr
