
ARMTimers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000554  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000660  08000660  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000660  08000660  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000660  08000660  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000660  08000660  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000660  08000660  00001660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000664  08000664  00001664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000668  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000674  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000674  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019a1  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008af  00000000  00000000  000039d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002e8  00000000  00000000  00004288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000020c  00000000  00000000  00004570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015faa  00000000  00000000  0000477c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ff9  00000000  00000000  0001a726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007eef9  00000000  00000000  0001d71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c618  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009b0  00000000  00000000  0009c65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0009d00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000648 	.word	0x08000648

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000648 	.word	0x08000648

0800014c <main>:
void delay(int t);




int main(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000150:	f000 f91a 	bl	8000388 <HAL_Init>
	enableClk();
 8000154:	f000 f858 	bl	8000208 <enableClk>
	configureIO();
 8000158:	f000 f836 	bl	80001c8 <configureIO>


	while (1) {


		if (GPIOB -> IDR & (1 << 10)){ //Active High
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <main+0x74>)
 800015e:	689b      	ldr	r3, [r3, #8]
 8000160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000164:	2b00      	cmp	r3, #0
 8000166:	d00f      	beq.n	8000188 <main+0x3c>

			while (-1){
				GPIOA -> ODR ^= 1 << 1;
 8000168:	4b16      	ldr	r3, [pc, #88]	@ (80001c4 <main+0x78>)
 800016a:	68db      	ldr	r3, [r3, #12]
 800016c:	4a15      	ldr	r2, [pc, #84]	@ (80001c4 <main+0x78>)
 800016e:	f083 0302 	eor.w	r3, r3, #2
 8000172:	60d3      	str	r3, [r2, #12]
				delay(100);
 8000174:	2064      	movs	r0, #100	@ 0x64
 8000176:	f000 f861 	bl	800023c <delay>
				if (!(GPIOB ->IDR & (1<<11))){
 800017a:	4b11      	ldr	r3, [pc, #68]	@ (80001c0 <main+0x74>)
 800017c:	689b      	ldr	r3, [r3, #8]
 800017e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000182:	2b00      	cmp	r3, #0
 8000184:	d017      	beq.n	80001b6 <main+0x6a>
				GPIOA -> ODR ^= 1 << 1;
 8000186:	e7ef      	b.n	8000168 <main+0x1c>
				}
			}

		}

		else if (!(GPIOB ->IDR & (1<<11))){ //Active low
 8000188:	4b0d      	ldr	r3, [pc, #52]	@ (80001c0 <main+0x74>)
 800018a:	689b      	ldr	r3, [r3, #8]
 800018c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000190:	2b00      	cmp	r3, #0
 8000192:	d1e3      	bne.n	800015c <main+0x10>

			while (-1){
				GPIOA -> ODR ^= 1 << 1;
 8000194:	4b0b      	ldr	r3, [pc, #44]	@ (80001c4 <main+0x78>)
 8000196:	68db      	ldr	r3, [r3, #12]
 8000198:	4a0a      	ldr	r2, [pc, #40]	@ (80001c4 <main+0x78>)
 800019a:	f083 0302 	eor.w	r3, r3, #2
 800019e:	60d3      	str	r3, [r2, #12]
				delay(500);
 80001a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001a4:	f000 f84a 	bl	800023c <delay>
				if (GPIOB -> IDR & (1 << 10)){
 80001a8:	4b05      	ldr	r3, [pc, #20]	@ (80001c0 <main+0x74>)
 80001aa:	689b      	ldr	r3, [r3, #8]
 80001ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d102      	bne.n	80001ba <main+0x6e>
				GPIOA -> ODR ^= 1 << 1;
 80001b4:	e7ee      	b.n	8000194 <main+0x48>
					break;
 80001b6:	bf00      	nop
 80001b8:	e7d0      	b.n	800015c <main+0x10>
					break;
 80001ba:	bf00      	nop
		if (GPIOB -> IDR & (1 << 10)){ //Active High
 80001bc:	e7ce      	b.n	800015c <main+0x10>
 80001be:	bf00      	nop
 80001c0:	40010c00 	.word	0x40010c00
 80001c4:	40010800 	.word	0x40010800

080001c8 <configureIO>:
}
}



void configureIO(){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

	GPIOA -> CRL = 0x44444424; //output 2 MHz A1
 80001cc:	4b0a      	ldr	r3, [pc, #40]	@ (80001f8 <configureIO+0x30>)
 80001ce:	4a0b      	ldr	r2, [pc, #44]	@ (80001fc <configureIO+0x34>)
 80001d0:	601a      	str	r2, [r3, #0]
	//GPIOA -> CRL |= 0x444444A4; //A1 Alternating Function output 2MHz
	GPIOB -> CRH = 0x44448844; //input pull-down/up. B10, B11
 80001d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000200 <configureIO+0x38>)
 80001d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000204 <configureIO+0x3c>)
 80001d6:	605a      	str	r2, [r3, #4]
	GPIOB->ODR |= (1 << 11); // B11 Pull UP
 80001d8:	4b09      	ldr	r3, [pc, #36]	@ (8000200 <configureIO+0x38>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	4a08      	ldr	r2, [pc, #32]	@ (8000200 <configureIO+0x38>)
 80001de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80001e2:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR &= ~(1 << 10); // B10 pull down
 80001e4:	4b06      	ldr	r3, [pc, #24]	@ (8000200 <configureIO+0x38>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	4a05      	ldr	r2, [pc, #20]	@ (8000200 <configureIO+0x38>)
 80001ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80001ee:	60d3      	str	r3, [r2, #12]
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	40010800 	.word	0x40010800
 80001fc:	44444424 	.word	0x44444424
 8000200:	40010c00 	.word	0x40010c00
 8000204:	44448844 	.word	0x44448844

08000208 <enableClk>:

void enableClk(){
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= RCC_APB2ENR_IOPAEN;
 800020c:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <enableClk+0x30>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a09      	ldr	r2, [pc, #36]	@ (8000238 <enableClk+0x30>)
 8000212:	f043 0304 	orr.w	r3, r3, #4
 8000216:	6193      	str	r3, [r2, #24]
	RCC -> APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000218:	4b07      	ldr	r3, [pc, #28]	@ (8000238 <enableClk+0x30>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a06      	ldr	r2, [pc, #24]	@ (8000238 <enableClk+0x30>)
 800021e:	f043 0308 	orr.w	r3, r3, #8
 8000222:	6193      	str	r3, [r2, #24]
	RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000224:	4b04      	ldr	r3, [pc, #16]	@ (8000238 <enableClk+0x30>)
 8000226:	69db      	ldr	r3, [r3, #28]
 8000228:	4a03      	ldr	r2, [pc, #12]	@ (8000238 <enableClk+0x30>)
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	61d3      	str	r3, [r2, #28]
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	40021000 	.word	0x40021000

0800023c <delay>:

void delay(int t){
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	TIM2 ->PSC = 8000-1;
 8000244:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000248:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800024c:	629a      	str	r2, [r3, #40]	@ 0x28
	//int ARRValP1 = ((t) * 8 * pow(10,3)) / 8000 ;
	TIM2 ->ARR = t-1;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	1e5a      	subs	r2, r3, #1
 8000252:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000256:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2 ->CR1 |= TIM_CR1_CEN; //Enable the counter
 8000258:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6013      	str	r3, [r2, #0]
	while(!(TIM2->SR & TIM_SR_UIF)); //Waiting until finishing counting
 8000268:	bf00      	nop
 800026a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800026e:	691b      	ldr	r3, [r3, #16]
 8000270:	f003 0301 	and.w	r3, r3, #1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d0f8      	beq.n	800026a <delay+0x2e>
	TIM2->SR &= ~TIM_SR_UIF; //reset the flag
 8000278:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800027c:	691b      	ldr	r3, [r3, #16]
 800027e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000282:	f023 0301 	bic.w	r3, r3, #1
 8000286:	6113      	str	r3, [r2, #16]

}
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
	...

08000294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800029a:	4b0e      	ldr	r3, [pc, #56]	@ (80002d4 <HAL_MspInit+0x40>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a0d      	ldr	r2, [pc, #52]	@ (80002d4 <HAL_MspInit+0x40>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6193      	str	r3, [r2, #24]
 80002a6:	4b0b      	ldr	r3, [pc, #44]	@ (80002d4 <HAL_MspInit+0x40>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002b2:	4b08      	ldr	r3, [pc, #32]	@ (80002d4 <HAL_MspInit+0x40>)
 80002b4:	69db      	ldr	r3, [r3, #28]
 80002b6:	4a07      	ldr	r2, [pc, #28]	@ (80002d4 <HAL_MspInit+0x40>)
 80002b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002bc:	61d3      	str	r3, [r2, #28]
 80002be:	4b05      	ldr	r3, [pc, #20]	@ (80002d4 <HAL_MspInit+0x40>)
 80002c0:	69db      	ldr	r3, [r3, #28]
 80002c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40021000 	.word	0x40021000

080002d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002dc:	bf00      	nop
 80002de:	e7fd      	b.n	80002dc <NMI_Handler+0x4>

080002e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002e4:	bf00      	nop
 80002e6:	e7fd      	b.n	80002e4 <HardFault_Handler+0x4>

080002e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002ec:	bf00      	nop
 80002ee:	e7fd      	b.n	80002ec <MemManage_Handler+0x4>

080002f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002f4:	bf00      	nop
 80002f6:	e7fd      	b.n	80002f4 <BusFault_Handler+0x4>

080002f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002fc:	bf00      	nop
 80002fe:	e7fd      	b.n	80002fc <UsageFault_Handler+0x4>

08000300 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr

0800030c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr

08000318 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr

08000324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000328:	f000 f874 	bl	8000414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}

08000330 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr

0800033c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800033c:	f7ff fff8 	bl	8000330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480b      	ldr	r0, [pc, #44]	@ (8000370 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000342:	490c      	ldr	r1, [pc, #48]	@ (8000374 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000344:	4a0c      	ldr	r2, [pc, #48]	@ (8000378 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a09      	ldr	r2, [pc, #36]	@ (800037c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000358:	4c09      	ldr	r4, [pc, #36]	@ (8000380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000366:	f000 f94b 	bl	8000600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff feef 	bl	800014c <main>
  bx lr
 800036e:	4770      	bx	lr
  ldr r0, =_sdata
 8000370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000374:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000378:	08000668 	.word	0x08000668
  ldr r2, =_sbss
 800037c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000380:	2000002c 	.word	0x2000002c

08000384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000384:	e7fe      	b.n	8000384 <ADC1_2_IRQHandler>
	...

08000388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800038c:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <HAL_Init+0x28>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a07      	ldr	r2, [pc, #28]	@ (80003b0 <HAL_Init+0x28>)
 8000392:	f043 0310 	orr.w	r3, r3, #16
 8000396:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000398:	2003      	movs	r0, #3
 800039a:	f000 f8fd 	bl	8000598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800039e:	200f      	movs	r0, #15
 80003a0:	f000 f808 	bl	80003b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003a4:	f7ff ff76 	bl	8000294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003a8:	2300      	movs	r3, #0
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40022000 	.word	0x40022000

080003b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003bc:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <HAL_InitTick+0x54>)
 80003be:	681a      	ldr	r2, [r3, #0]
 80003c0:	4b12      	ldr	r3, [pc, #72]	@ (800040c <HAL_InitTick+0x58>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	4619      	mov	r1, r3
 80003c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80003ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 f907 	bl	80005e6 <HAL_SYSTICK_Config>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003de:	2301      	movs	r3, #1
 80003e0:	e00e      	b.n	8000400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2b0f      	cmp	r3, #15
 80003e6:	d80a      	bhi.n	80003fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003e8:	2200      	movs	r2, #0
 80003ea:	6879      	ldr	r1, [r7, #4]
 80003ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80003f0:	f000 f8dd 	bl	80005ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003f4:	4a06      	ldr	r2, [pc, #24]	@ (8000410 <HAL_InitTick+0x5c>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80003fa:	2300      	movs	r3, #0
 80003fc:	e000      	b.n	8000400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80003fe:	2301      	movs	r3, #1
}
 8000400:	4618      	mov	r0, r3
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000000 	.word	0x20000000
 800040c:	20000008 	.word	0x20000008
 8000410:	20000004 	.word	0x20000004

08000414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000418:	4b05      	ldr	r3, [pc, #20]	@ (8000430 <HAL_IncTick+0x1c>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	4b05      	ldr	r3, [pc, #20]	@ (8000434 <HAL_IncTick+0x20>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4413      	add	r3, r2
 8000424:	4a03      	ldr	r2, [pc, #12]	@ (8000434 <HAL_IncTick+0x20>)
 8000426:	6013      	str	r3, [r2, #0]
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	20000008 	.word	0x20000008
 8000434:	20000028 	.word	0x20000028

08000438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f003 0307 	and.w	r3, r3, #7
 8000446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000448:	4b0c      	ldr	r3, [pc, #48]	@ (800047c <__NVIC_SetPriorityGrouping+0x44>)
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800044e:	68ba      	ldr	r2, [r7, #8]
 8000450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000454:	4013      	ands	r3, r2
 8000456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000460:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800046a:	4a04      	ldr	r2, [pc, #16]	@ (800047c <__NVIC_SetPriorityGrouping+0x44>)
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	60d3      	str	r3, [r2, #12]
}
 8000470:	bf00      	nop
 8000472:	3714      	adds	r7, #20
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	e000ed00 	.word	0xe000ed00

08000480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000484:	4b04      	ldr	r3, [pc, #16]	@ (8000498 <__NVIC_GetPriorityGrouping+0x18>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	0a1b      	lsrs	r3, r3, #8
 800048a:	f003 0307 	and.w	r3, r3, #7
}
 800048e:	4618      	mov	r0, r3
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	e000ed00 	.word	0xe000ed00

0800049c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	6039      	str	r1, [r7, #0]
 80004a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	db0a      	blt.n	80004c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	b2da      	uxtb	r2, r3
 80004b4:	490c      	ldr	r1, [pc, #48]	@ (80004e8 <__NVIC_SetPriority+0x4c>)
 80004b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ba:	0112      	lsls	r2, r2, #4
 80004bc:	b2d2      	uxtb	r2, r2
 80004be:	440b      	add	r3, r1
 80004c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004c4:	e00a      	b.n	80004dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	b2da      	uxtb	r2, r3
 80004ca:	4908      	ldr	r1, [pc, #32]	@ (80004ec <__NVIC_SetPriority+0x50>)
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	f003 030f 	and.w	r3, r3, #15
 80004d2:	3b04      	subs	r3, #4
 80004d4:	0112      	lsls	r2, r2, #4
 80004d6:	b2d2      	uxtb	r2, r2
 80004d8:	440b      	add	r3, r1
 80004da:	761a      	strb	r2, [r3, #24]
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	e000e100 	.word	0xe000e100
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b089      	sub	sp, #36	@ 0x24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f003 0307 	and.w	r3, r3, #7
 8000502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000504:	69fb      	ldr	r3, [r7, #28]
 8000506:	f1c3 0307 	rsb	r3, r3, #7
 800050a:	2b04      	cmp	r3, #4
 800050c:	bf28      	it	cs
 800050e:	2304      	movcs	r3, #4
 8000510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000512:	69fb      	ldr	r3, [r7, #28]
 8000514:	3304      	adds	r3, #4
 8000516:	2b06      	cmp	r3, #6
 8000518:	d902      	bls.n	8000520 <NVIC_EncodePriority+0x30>
 800051a:	69fb      	ldr	r3, [r7, #28]
 800051c:	3b03      	subs	r3, #3
 800051e:	e000      	b.n	8000522 <NVIC_EncodePriority+0x32>
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000524:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000528:	69bb      	ldr	r3, [r7, #24]
 800052a:	fa02 f303 	lsl.w	r3, r2, r3
 800052e:	43da      	mvns	r2, r3
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	401a      	ands	r2, r3
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000538:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	fa01 f303 	lsl.w	r3, r1, r3
 8000542:	43d9      	mvns	r1, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000548:	4313      	orrs	r3, r2
         );
}
 800054a:	4618      	mov	r0, r3
 800054c:	3724      	adds	r7, #36	@ 0x24
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3b01      	subs	r3, #1
 8000560:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000564:	d301      	bcc.n	800056a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000566:	2301      	movs	r3, #1
 8000568:	e00f      	b.n	800058a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800056a:	4a0a      	ldr	r2, [pc, #40]	@ (8000594 <SysTick_Config+0x40>)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3b01      	subs	r3, #1
 8000570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000572:	210f      	movs	r1, #15
 8000574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000578:	f7ff ff90 	bl	800049c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800057c:	4b05      	ldr	r3, [pc, #20]	@ (8000594 <SysTick_Config+0x40>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000582:	4b04      	ldr	r3, [pc, #16]	@ (8000594 <SysTick_Config+0x40>)
 8000584:	2207      	movs	r2, #7
 8000586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	e000e010 	.word	0xe000e010

08000598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f7ff ff49 	bl	8000438 <__NVIC_SetPriorityGrouping>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b086      	sub	sp, #24
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	4603      	mov	r3, r0
 80005b6:	60b9      	str	r1, [r7, #8]
 80005b8:	607a      	str	r2, [r7, #4]
 80005ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005c0:	f7ff ff5e 	bl	8000480 <__NVIC_GetPriorityGrouping>
 80005c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	68b9      	ldr	r1, [r7, #8]
 80005ca:	6978      	ldr	r0, [r7, #20]
 80005cc:	f7ff ff90 	bl	80004f0 <NVIC_EncodePriority>
 80005d0:	4602      	mov	r2, r0
 80005d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005d6:	4611      	mov	r1, r2
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff5f 	bl	800049c <__NVIC_SetPriority>
}
 80005de:	bf00      	nop
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f7ff ffb0 	bl	8000554 <SysTick_Config>
 80005f4:	4603      	mov	r3, r0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <__libc_init_array>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	2600      	movs	r6, #0
 8000604:	4d0c      	ldr	r5, [pc, #48]	@ (8000638 <__libc_init_array+0x38>)
 8000606:	4c0d      	ldr	r4, [pc, #52]	@ (800063c <__libc_init_array+0x3c>)
 8000608:	1b64      	subs	r4, r4, r5
 800060a:	10a4      	asrs	r4, r4, #2
 800060c:	42a6      	cmp	r6, r4
 800060e:	d109      	bne.n	8000624 <__libc_init_array+0x24>
 8000610:	f000 f81a 	bl	8000648 <_init>
 8000614:	2600      	movs	r6, #0
 8000616:	4d0a      	ldr	r5, [pc, #40]	@ (8000640 <__libc_init_array+0x40>)
 8000618:	4c0a      	ldr	r4, [pc, #40]	@ (8000644 <__libc_init_array+0x44>)
 800061a:	1b64      	subs	r4, r4, r5
 800061c:	10a4      	asrs	r4, r4, #2
 800061e:	42a6      	cmp	r6, r4
 8000620:	d105      	bne.n	800062e <__libc_init_array+0x2e>
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f855 3b04 	ldr.w	r3, [r5], #4
 8000628:	4798      	blx	r3
 800062a:	3601      	adds	r6, #1
 800062c:	e7ee      	b.n	800060c <__libc_init_array+0xc>
 800062e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000632:	4798      	blx	r3
 8000634:	3601      	adds	r6, #1
 8000636:	e7f2      	b.n	800061e <__libc_init_array+0x1e>
 8000638:	08000660 	.word	0x08000660
 800063c:	08000660 	.word	0x08000660
 8000640:	08000660 	.word	0x08000660
 8000644:	08000664 	.word	0x08000664

08000648 <_init>:
 8000648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064a:	bf00      	nop
 800064c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064e:	bc08      	pop	{r3}
 8000650:	469e      	mov	lr, r3
 8000652:	4770      	bx	lr

08000654 <_fini>:
 8000654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000656:	bf00      	nop
 8000658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065a:	bc08      	pop	{r3}
 800065c:	469e      	mov	lr, r3
 800065e:	4770      	bx	lr
