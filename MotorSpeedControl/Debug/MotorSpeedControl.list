
MotorSpeedControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000032c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000438  08000438  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000438  08000438  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000438  08000438  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000438  08000438  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000438  08000438  00001438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800043c  0800043c  0000143c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000440  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000444  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000444  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000eee  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000052b  00000000  00000000  00002f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00003448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000151  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000152bb  00000000  00000000  00003779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ebd  00000000  00000000  00018a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b364  00000000  00000000  0001a8f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00095c55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005c8  00000000  00000000  00095c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00096260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000420 	.word	0x08000420

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000420 	.word	0x08000420

0800014c <main>:
void delay(uint16_t t);
void turnON(uint8_t i);
void turnOFF(uint8_t i);


int main(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	enableClk();
 8000150:	f000 f846 	bl	80001e0 <enableClk>
	configureIO();
 8000154:	f000 f830 	bl	80001b8 <configureIO>
	//uint8_t flag = 1;


	while (1) {

		if (GPIOB -> IDR & (1 << 13)){
 8000158:	4b16      	ldr	r3, [pc, #88]	@ (80001b4 <main+0x68>)
 800015a:	689b      	ldr	r3, [r3, #8]
 800015c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000160:	2b00      	cmp	r3, #0
 8000162:	d00f      	beq.n	8000184 <main+0x38>
			delay(50);
 8000164:	2032      	movs	r0, #50	@ 0x32
 8000166:	f000 f89f 	bl	80002a8 <delay>
			while (GPIOB -> IDR & (1 << 13)){
 800016a:	e002      	b.n	8000172 <main+0x26>
				turnON(0);
 800016c:	2000      	movs	r0, #0
 800016e:	f000 f857 	bl	8000220 <turnON>
			while (GPIOB -> IDR & (1 << 13)){
 8000172:	4b10      	ldr	r3, [pc, #64]	@ (80001b4 <main+0x68>)
 8000174:	689b      	ldr	r3, [r3, #8]
 8000176:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800017a:	2b00      	cmp	r3, #0
 800017c:	d1f6      	bne.n	800016c <main+0x20>

			}
			turnOFF(0);
 800017e:	2000      	movs	r0, #0
 8000180:	f000 f870 	bl	8000264 <turnOFF>
		}

		if (GPIOB -> IDR & (1 << 14)){
 8000184:	4b0b      	ldr	r3, [pc, #44]	@ (80001b4 <main+0x68>)
 8000186:	689b      	ldr	r3, [r3, #8]
 8000188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800018c:	2b00      	cmp	r3, #0
 800018e:	d0e3      	beq.n	8000158 <main+0xc>
			delay(50);
 8000190:	2032      	movs	r0, #50	@ 0x32
 8000192:	f000 f889 	bl	80002a8 <delay>
			while (GPIOB -> IDR & (1 << 14)){
 8000196:	e002      	b.n	800019e <main+0x52>
				turnON(1);
 8000198:	2001      	movs	r0, #1
 800019a:	f000 f841 	bl	8000220 <turnON>
			while (GPIOB -> IDR & (1 << 14)){
 800019e:	4b05      	ldr	r3, [pc, #20]	@ (80001b4 <main+0x68>)
 80001a0:	689b      	ldr	r3, [r3, #8]
 80001a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d1f6      	bne.n	8000198 <main+0x4c>

			}
			turnOFF(1);
 80001aa:	2001      	movs	r0, #1
 80001ac:	f000 f85a 	bl	8000264 <turnOFF>
		if (GPIOB -> IDR & (1 << 13)){
 80001b0:	e7d2      	b.n	8000158 <main+0xc>
 80001b2:	bf00      	nop
 80001b4:	40010c00 	.word	0x40010c00

080001b8 <configureIO>:

}



void configureIO(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	 * LEDS => B10 A7 output
	 * Buttons => B13 B14 Input pull down (Active high)
	 *
	 * */

	GPIOA -> CRL = 0x24444444;
 80001bc:	4b04      	ldr	r3, [pc, #16]	@ (80001d0 <configureIO+0x18>)
 80001be:	4a05      	ldr	r2, [pc, #20]	@ (80001d4 <configureIO+0x1c>)
 80001c0:	601a      	str	r2, [r3, #0]
	GPIOB -> CRH = 0x48844244;
 80001c2:	4b05      	ldr	r3, [pc, #20]	@ (80001d8 <configureIO+0x20>)
 80001c4:	4a05      	ldr	r2, [pc, #20]	@ (80001dc <configureIO+0x24>)
 80001c6:	605a      	str	r2, [r3, #4]

}
 80001c8:	bf00      	nop
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	40010800 	.word	0x40010800
 80001d4:	24444444 	.word	0x24444444
 80001d8:	40010c00 	.word	0x40010c00
 80001dc:	48844244 	.word	0x48844244

080001e0 <enableClk>:

void enableClk(){
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= RCC_APB2ENR_IOPAEN;
 80001e4:	4b0d      	ldr	r3, [pc, #52]	@ (800021c <enableClk+0x3c>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a0c      	ldr	r2, [pc, #48]	@ (800021c <enableClk+0x3c>)
 80001ea:	f043 0304 	orr.w	r3, r3, #4
 80001ee:	6193      	str	r3, [r2, #24]
	RCC -> APB2ENR |= RCC_APB2ENR_IOPBEN;
 80001f0:	4b0a      	ldr	r3, [pc, #40]	@ (800021c <enableClk+0x3c>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a09      	ldr	r2, [pc, #36]	@ (800021c <enableClk+0x3c>)
 80001f6:	f043 0308 	orr.w	r3, r3, #8
 80001fa:	6193      	str	r3, [r2, #24]
	RCC -> APB1ENR |= 0b11; //enable TIM2 & TIM3
 80001fc:	4b07      	ldr	r3, [pc, #28]	@ (800021c <enableClk+0x3c>)
 80001fe:	69db      	ldr	r3, [r3, #28]
 8000200:	4a06      	ldr	r2, [pc, #24]	@ (800021c <enableClk+0x3c>)
 8000202:	f043 0303 	orr.w	r3, r3, #3
 8000206:	61d3      	str	r3, [r2, #28]
	RCC -> APB2ENR |= (1 << 9); // enable clk for ADC1
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <enableClk+0x3c>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a03      	ldr	r2, [pc, #12]	@ (800021c <enableClk+0x3c>)
 800020e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000212:	6193      	str	r3, [r2, #24]
}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	40021000 	.word	0x40021000

08000220 <turnON>:

		ADC1->CR2 &= ~ADC_CR2_ALIGN;  // 0 = Right alignment (default)

}

void turnON(uint8_t i){
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	71fb      	strb	r3, [r7, #7]


	switch (i){
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d002      	beq.n	8000236 <turnON+0x16>
 8000230:	2b01      	cmp	r3, #1
 8000232:	d007      	beq.n	8000244 <turnON+0x24>

		case 0: GPIOA ->ODR |= (1 << 7); return;
		case 1: GPIOB ->ODR |= (1 << 10); return;

		default: break;
 8000234:	e00d      	b.n	8000252 <turnON+0x32>
		case 0: GPIOA ->ODR |= (1 << 7); return;
 8000236:	4b09      	ldr	r3, [pc, #36]	@ (800025c <turnON+0x3c>)
 8000238:	68db      	ldr	r3, [r3, #12]
 800023a:	4a08      	ldr	r2, [pc, #32]	@ (800025c <turnON+0x3c>)
 800023c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000240:	60d3      	str	r3, [r2, #12]
 8000242:	e006      	b.n	8000252 <turnON+0x32>
		case 1: GPIOB ->ODR |= (1 << 10); return;
 8000244:	4b06      	ldr	r3, [pc, #24]	@ (8000260 <turnON+0x40>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	4a05      	ldr	r2, [pc, #20]	@ (8000260 <turnON+0x40>)
 800024a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800024e:	60d3      	str	r3, [r2, #12]
 8000250:	bf00      	nop
	}
}
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40010800 	.word	0x40010800
 8000260:	40010c00 	.word	0x40010c00

08000264 <turnOFF>:

void turnOFF(uint8_t i){
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]


	switch (i){
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d002      	beq.n	800027a <turnOFF+0x16>
 8000274:	2b01      	cmp	r3, #1
 8000276:	d007      	beq.n	8000288 <turnOFF+0x24>

		case 0: GPIOA ->ODR &= ~(1 << 7); return;
		case 1: GPIOB ->ODR &= ~(1 << 10); return;

		default: break;
 8000278:	e00d      	b.n	8000296 <turnOFF+0x32>
		case 0: GPIOA ->ODR &= ~(1 << 7); return;
 800027a:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <turnOFF+0x3c>)
 800027c:	68db      	ldr	r3, [r3, #12]
 800027e:	4a08      	ldr	r2, [pc, #32]	@ (80002a0 <turnOFF+0x3c>)
 8000280:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000284:	60d3      	str	r3, [r2, #12]
 8000286:	e006      	b.n	8000296 <turnOFF+0x32>
		case 1: GPIOB ->ODR &= ~(1 << 10); return;
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <turnOFF+0x40>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	4a05      	ldr	r2, [pc, #20]	@ (80002a4 <turnOFF+0x40>)
 800028e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000292:	60d3      	str	r3, [r2, #12]
 8000294:	bf00      	nop
	}
}
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40010800 	.word	0x40010800
 80002a4:	40010c00 	.word	0x40010c00

080002a8 <delay>:



void delay(uint16_t t){
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	80fb      	strh	r3, [r7, #6]
	TIM3 ->PSC = 8000-1;
 80002b2:	4b13      	ldr	r3, [pc, #76]	@ (8000300 <delay+0x58>)
 80002b4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80002b8:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3 ->ARR = t-1;
 80002ba:	88fb      	ldrh	r3, [r7, #6]
 80002bc:	1e5a      	subs	r2, r3, #1
 80002be:	4b10      	ldr	r3, [pc, #64]	@ (8000300 <delay+0x58>)
 80002c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3 ->CR1 |= TIM_CR1_CEN;
 80002c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <delay+0x58>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000300 <delay+0x58>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6013      	str	r3, [r2, #0]
	while(!(TIM3->SR & TIM_SR_UIF));
 80002ce:	bf00      	nop
 80002d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000300 <delay+0x58>)
 80002d2:	691b      	ldr	r3, [r3, #16]
 80002d4:	f003 0301 	and.w	r3, r3, #1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0f9      	beq.n	80002d0 <delay+0x28>
	TIM3->SR &= ~TIM_SR_UIF;
 80002dc:	4b08      	ldr	r3, [pc, #32]	@ (8000300 <delay+0x58>)
 80002de:	691b      	ldr	r3, [r3, #16]
 80002e0:	4a07      	ldr	r2, [pc, #28]	@ (8000300 <delay+0x58>)
 80002e2:	f023 0301 	bic.w	r3, r3, #1
 80002e6:	6113      	str	r3, [r2, #16]
	TIM3 ->CR1 &= ~(TIM_CR1_CEN);
 80002e8:	4b05      	ldr	r3, [pc, #20]	@ (8000300 <delay+0x58>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a04      	ldr	r2, [pc, #16]	@ (8000300 <delay+0x58>)
 80002ee:	f023 0301 	bic.w	r3, r3, #1
 80002f2:	6013      	str	r3, [r2, #0]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40000400 	.word	0x40000400

08000304 <NMI_Handler>:
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
 8000308:	bf00      	nop
 800030a:	e7fd      	b.n	8000308 <NMI_Handler+0x4>

0800030c <HardFault_Handler>:
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
 8000310:	bf00      	nop
 8000312:	e7fd      	b.n	8000310 <HardFault_Handler+0x4>

08000314 <MemManage_Handler>:
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
 8000318:	bf00      	nop
 800031a:	e7fd      	b.n	8000318 <MemManage_Handler+0x4>

0800031c <BusFault_Handler>:
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
 8000320:	bf00      	nop
 8000322:	e7fd      	b.n	8000320 <BusFault_Handler+0x4>

08000324 <UsageFault_Handler>:
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
 8000328:	bf00      	nop
 800032a:	e7fd      	b.n	8000328 <UsageFault_Handler+0x4>

0800032c <SVC_Handler>:
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr

08000338 <DebugMon_Handler>:
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr

08000344 <PendSV_Handler>:
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <SysTick_Handler>:
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
 8000354:	f000 f82e 	bl	80003b4 <HAL_IncTick>
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}

0800035c <SystemInit>:
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <Reset_Handler>:
 8000368:	f7ff fff8 	bl	800035c <SystemInit>
 800036c:	480b      	ldr	r0, [pc, #44]	@ (800039c <LoopFillZerobss+0xe>)
 800036e:	490c      	ldr	r1, [pc, #48]	@ (80003a0 <LoopFillZerobss+0x12>)
 8000370:	4a0c      	ldr	r2, [pc, #48]	@ (80003a4 <LoopFillZerobss+0x16>)
 8000372:	2300      	movs	r3, #0
 8000374:	e002      	b.n	800037c <LoopCopyDataInit>

08000376 <CopyDataInit>:
 8000376:	58d4      	ldr	r4, [r2, r3]
 8000378:	50c4      	str	r4, [r0, r3]
 800037a:	3304      	adds	r3, #4

0800037c <LoopCopyDataInit>:
 800037c:	18c4      	adds	r4, r0, r3
 800037e:	428c      	cmp	r4, r1
 8000380:	d3f9      	bcc.n	8000376 <CopyDataInit>
 8000382:	4a09      	ldr	r2, [pc, #36]	@ (80003a8 <LoopFillZerobss+0x1a>)
 8000384:	4c09      	ldr	r4, [pc, #36]	@ (80003ac <LoopFillZerobss+0x1e>)
 8000386:	2300      	movs	r3, #0
 8000388:	e001      	b.n	800038e <LoopFillZerobss>

0800038a <FillZerobss>:
 800038a:	6013      	str	r3, [r2, #0]
 800038c:	3204      	adds	r2, #4

0800038e <LoopFillZerobss>:
 800038e:	42a2      	cmp	r2, r4
 8000390:	d3fb      	bcc.n	800038a <FillZerobss>
 8000392:	f000 f821 	bl	80003d8 <__libc_init_array>
 8000396:	f7ff fed9 	bl	800014c <main>
 800039a:	4770      	bx	lr
 800039c:	20000000 	.word	0x20000000
 80003a0:	20000004 	.word	0x20000004
 80003a4:	08000440 	.word	0x08000440
 80003a8:	20000004 	.word	0x20000004
 80003ac:	20000024 	.word	0x20000024

080003b0 <ADC1_2_IRQHandler>:
 80003b0:	e7fe      	b.n	80003b0 <ADC1_2_IRQHandler>
	...

080003b4 <HAL_IncTick>:
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	4b05      	ldr	r3, [pc, #20]	@ (80003d0 <HAL_IncTick+0x1c>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	461a      	mov	r2, r3
 80003be:	4b05      	ldr	r3, [pc, #20]	@ (80003d4 <HAL_IncTick+0x20>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4413      	add	r3, r2
 80003c4:	4a03      	ldr	r2, [pc, #12]	@ (80003d4 <HAL_IncTick+0x20>)
 80003c6:	6013      	str	r3, [r2, #0]
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	20000000 	.word	0x20000000
 80003d4:	20000020 	.word	0x20000020

080003d8 <__libc_init_array>:
 80003d8:	b570      	push	{r4, r5, r6, lr}
 80003da:	2600      	movs	r6, #0
 80003dc:	4d0c      	ldr	r5, [pc, #48]	@ (8000410 <__libc_init_array+0x38>)
 80003de:	4c0d      	ldr	r4, [pc, #52]	@ (8000414 <__libc_init_array+0x3c>)
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	10a4      	asrs	r4, r4, #2
 80003e4:	42a6      	cmp	r6, r4
 80003e6:	d109      	bne.n	80003fc <__libc_init_array+0x24>
 80003e8:	f000 f81a 	bl	8000420 <_init>
 80003ec:	2600      	movs	r6, #0
 80003ee:	4d0a      	ldr	r5, [pc, #40]	@ (8000418 <__libc_init_array+0x40>)
 80003f0:	4c0a      	ldr	r4, [pc, #40]	@ (800041c <__libc_init_array+0x44>)
 80003f2:	1b64      	subs	r4, r4, r5
 80003f4:	10a4      	asrs	r4, r4, #2
 80003f6:	42a6      	cmp	r6, r4
 80003f8:	d105      	bne.n	8000406 <__libc_init_array+0x2e>
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000400:	4798      	blx	r3
 8000402:	3601      	adds	r6, #1
 8000404:	e7ee      	b.n	80003e4 <__libc_init_array+0xc>
 8000406:	f855 3b04 	ldr.w	r3, [r5], #4
 800040a:	4798      	blx	r3
 800040c:	3601      	adds	r6, #1
 800040e:	e7f2      	b.n	80003f6 <__libc_init_array+0x1e>
 8000410:	08000438 	.word	0x08000438
 8000414:	08000438 	.word	0x08000438
 8000418:	08000438 	.word	0x08000438
 800041c:	0800043c 	.word	0x0800043c

08000420 <_init>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr

0800042c <_fini>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr
