
IMUReadingI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002274  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002384  08002384  00003384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023c4  080023c4  00004054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080023c4  080023c4  00004054  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080023c4  080023c4  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023c4  080023c4  000033c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023c8  080023c8  000033c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080023cc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000054  08002420  00004054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08002420  00004208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001686  00000000  00000000  0000407d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006b2  00000000  00000000  00005703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000248  00000000  00000000  00005db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001b5  00000000  00000000  00006000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000152c3  00000000  00000000  000061b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002833  00000000  00000000  0001b478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007eef1  00000000  00000000  0001dcab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009cb9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dbc  00000000  00000000  0009cbe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0009d99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000054 	.word	0x20000054
 800012c:	00000000 	.word	0x00000000
 8000130:	0800236c 	.word	0x0800236c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000058 	.word	0x20000058
 800014c:	0800236c 	.word	0x0800236c

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_d2uiz>:
 800082c:	004a      	lsls	r2, r1, #1
 800082e:	d211      	bcs.n	8000854 <__aeabi_d2uiz+0x28>
 8000830:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000834:	d211      	bcs.n	800085a <__aeabi_d2uiz+0x2e>
 8000836:	d50d      	bpl.n	8000854 <__aeabi_d2uiz+0x28>
 8000838:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800083c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000840:	d40e      	bmi.n	8000860 <__aeabi_d2uiz+0x34>
 8000842:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000846:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800084a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800084e:	fa23 f002 	lsr.w	r0, r3, r2
 8000852:	4770      	bx	lr
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	4770      	bx	lr
 800085a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800085e:	d102      	bne.n	8000866 <__aeabi_d2uiz+0x3a>
 8000860:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000864:	4770      	bx	lr
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	4770      	bx	lr

0800086c <__aeabi_d2f>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000874:	bf24      	itt	cs
 8000876:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800087a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800087e:	d90d      	bls.n	800089c <__aeabi_d2f+0x30>
 8000880:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000884:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000888:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800088c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000890:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000894:	bf08      	it	eq
 8000896:	f020 0001 	biceq.w	r0, r0, #1
 800089a:	4770      	bx	lr
 800089c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008a0:	d121      	bne.n	80008e6 <__aeabi_d2f+0x7a>
 80008a2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008a6:	bfbc      	itt	lt
 80008a8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008ac:	4770      	bxlt	lr
 80008ae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008b6:	f1c2 0218 	rsb	r2, r2, #24
 80008ba:	f1c2 0c20 	rsb	ip, r2, #32
 80008be:	fa10 f30c 	lsls.w	r3, r0, ip
 80008c2:	fa20 f002 	lsr.w	r0, r0, r2
 80008c6:	bf18      	it	ne
 80008c8:	f040 0001 	orrne.w	r0, r0, #1
 80008cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008d8:	ea40 000c 	orr.w	r0, r0, ip
 80008dc:	fa23 f302 	lsr.w	r3, r3, r2
 80008e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008e4:	e7cc      	b.n	8000880 <__aeabi_d2f+0x14>
 80008e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ea:	d107      	bne.n	80008fc <__aeabi_d2f+0x90>
 80008ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f0:	bf1e      	ittt	ne
 80008f2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008f6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008fa:	4770      	bxne	lr
 80008fc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000900:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_frsub>:
 800090c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000910:	e002      	b.n	8000918 <__addsf3>
 8000912:	bf00      	nop

08000914 <__aeabi_fsub>:
 8000914:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000918 <__addsf3>:
 8000918:	0042      	lsls	r2, r0, #1
 800091a:	bf1f      	itttt	ne
 800091c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000920:	ea92 0f03 	teqne	r2, r3
 8000924:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000928:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800092c:	d06a      	beq.n	8000a04 <__addsf3+0xec>
 800092e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000932:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000936:	bfc1      	itttt	gt
 8000938:	18d2      	addgt	r2, r2, r3
 800093a:	4041      	eorgt	r1, r0
 800093c:	4048      	eorgt	r0, r1
 800093e:	4041      	eorgt	r1, r0
 8000940:	bfb8      	it	lt
 8000942:	425b      	neglt	r3, r3
 8000944:	2b19      	cmp	r3, #25
 8000946:	bf88      	it	hi
 8000948:	4770      	bxhi	lr
 800094a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800094e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000952:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000956:	bf18      	it	ne
 8000958:	4240      	negne	r0, r0
 800095a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800095e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000962:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000966:	bf18      	it	ne
 8000968:	4249      	negne	r1, r1
 800096a:	ea92 0f03 	teq	r2, r3
 800096e:	d03f      	beq.n	80009f0 <__addsf3+0xd8>
 8000970:	f1a2 0201 	sub.w	r2, r2, #1
 8000974:	fa41 fc03 	asr.w	ip, r1, r3
 8000978:	eb10 000c 	adds.w	r0, r0, ip
 800097c:	f1c3 0320 	rsb	r3, r3, #32
 8000980:	fa01 f103 	lsl.w	r1, r1, r3
 8000984:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000988:	d502      	bpl.n	8000990 <__addsf3+0x78>
 800098a:	4249      	negs	r1, r1
 800098c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000990:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000994:	d313      	bcc.n	80009be <__addsf3+0xa6>
 8000996:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800099a:	d306      	bcc.n	80009aa <__addsf3+0x92>
 800099c:	0840      	lsrs	r0, r0, #1
 800099e:	ea4f 0131 	mov.w	r1, r1, rrx
 80009a2:	f102 0201 	add.w	r2, r2, #1
 80009a6:	2afe      	cmp	r2, #254	@ 0xfe
 80009a8:	d251      	bcs.n	8000a4e <__addsf3+0x136>
 80009aa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009b2:	bf08      	it	eq
 80009b4:	f020 0001 	biceq.w	r0, r0, #1
 80009b8:	ea40 0003 	orr.w	r0, r0, r3
 80009bc:	4770      	bx	lr
 80009be:	0049      	lsls	r1, r1, #1
 80009c0:	eb40 0000 	adc.w	r0, r0, r0
 80009c4:	3a01      	subs	r2, #1
 80009c6:	bf28      	it	cs
 80009c8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80009cc:	d2ed      	bcs.n	80009aa <__addsf3+0x92>
 80009ce:	fab0 fc80 	clz	ip, r0
 80009d2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009d6:	ebb2 020c 	subs.w	r2, r2, ip
 80009da:	fa00 f00c 	lsl.w	r0, r0, ip
 80009de:	bfaa      	itet	ge
 80009e0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009e4:	4252      	neglt	r2, r2
 80009e6:	4318      	orrge	r0, r3
 80009e8:	bfbc      	itt	lt
 80009ea:	40d0      	lsrlt	r0, r2
 80009ec:	4318      	orrlt	r0, r3
 80009ee:	4770      	bx	lr
 80009f0:	f092 0f00 	teq	r2, #0
 80009f4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80009f8:	bf06      	itte	eq
 80009fa:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80009fe:	3201      	addeq	r2, #1
 8000a00:	3b01      	subne	r3, #1
 8000a02:	e7b5      	b.n	8000970 <__addsf3+0x58>
 8000a04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a12:	d021      	beq.n	8000a58 <__addsf3+0x140>
 8000a14:	ea92 0f03 	teq	r2, r3
 8000a18:	d004      	beq.n	8000a24 <__addsf3+0x10c>
 8000a1a:	f092 0f00 	teq	r2, #0
 8000a1e:	bf08      	it	eq
 8000a20:	4608      	moveq	r0, r1
 8000a22:	4770      	bx	lr
 8000a24:	ea90 0f01 	teq	r0, r1
 8000a28:	bf1c      	itt	ne
 8000a2a:	2000      	movne	r0, #0
 8000a2c:	4770      	bxne	lr
 8000a2e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a32:	d104      	bne.n	8000a3e <__addsf3+0x126>
 8000a34:	0040      	lsls	r0, r0, #1
 8000a36:	bf28      	it	cs
 8000a38:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a3c:	4770      	bx	lr
 8000a3e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a42:	bf3c      	itt	cc
 8000a44:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a48:	4770      	bxcc	lr
 8000a4a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a4e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a52:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a56:	4770      	bx	lr
 8000a58:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a5c:	bf16      	itet	ne
 8000a5e:	4608      	movne	r0, r1
 8000a60:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a64:	4601      	movne	r1, r0
 8000a66:	0242      	lsls	r2, r0, #9
 8000a68:	bf06      	itte	eq
 8000a6a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a6e:	ea90 0f01 	teqeq	r0, r1
 8000a72:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000a76:	4770      	bx	lr

08000a78 <__aeabi_ui2f>:
 8000a78:	f04f 0300 	mov.w	r3, #0
 8000a7c:	e004      	b.n	8000a88 <__aeabi_i2f+0x8>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_i2f>:
 8000a80:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000a84:	bf48      	it	mi
 8000a86:	4240      	negmi	r0, r0
 8000a88:	ea5f 0c00 	movs.w	ip, r0
 8000a8c:	bf08      	it	eq
 8000a8e:	4770      	bxeq	lr
 8000a90:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000a94:	4601      	mov	r1, r0
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	e01c      	b.n	8000ad6 <__aeabi_l2f+0x2a>

08000a9c <__aeabi_ul2f>:
 8000a9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000aa0:	bf08      	it	eq
 8000aa2:	4770      	bxeq	lr
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	e00a      	b.n	8000ac0 <__aeabi_l2f+0x14>
 8000aaa:	bf00      	nop

08000aac <__aeabi_l2f>:
 8000aac:	ea50 0201 	orrs.w	r2, r0, r1
 8000ab0:	bf08      	it	eq
 8000ab2:	4770      	bxeq	lr
 8000ab4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ab8:	d502      	bpl.n	8000ac0 <__aeabi_l2f+0x14>
 8000aba:	4240      	negs	r0, r0
 8000abc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ac0:	ea5f 0c01 	movs.w	ip, r1
 8000ac4:	bf02      	ittt	eq
 8000ac6:	4684      	moveq	ip, r0
 8000ac8:	4601      	moveq	r1, r0
 8000aca:	2000      	moveq	r0, #0
 8000acc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ad0:	bf08      	it	eq
 8000ad2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ad6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ada:	fabc f28c 	clz	r2, ip
 8000ade:	3a08      	subs	r2, #8
 8000ae0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ae4:	db10      	blt.n	8000b08 <__aeabi_l2f+0x5c>
 8000ae6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000aea:	4463      	add	r3, ip
 8000aec:	fa00 fc02 	lsl.w	ip, r0, r2
 8000af0:	f1c2 0220 	rsb	r2, r2, #32
 8000af4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000af8:	fa20 f202 	lsr.w	r2, r0, r2
 8000afc:	eb43 0002 	adc.w	r0, r3, r2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f102 0220 	add.w	r2, r2, #32
 8000b0c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b10:	f1c2 0220 	rsb	r2, r2, #32
 8000b14:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b18:	fa21 f202 	lsr.w	r2, r1, r2
 8000b1c:	eb43 0002 	adc.w	r0, r3, r2
 8000b20:	bf08      	it	eq
 8000b22:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_fmul>:
 8000b28:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b30:	bf1e      	ittt	ne
 8000b32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b36:	ea92 0f0c 	teqne	r2, ip
 8000b3a:	ea93 0f0c 	teqne	r3, ip
 8000b3e:	d06f      	beq.n	8000c20 <__aeabi_fmul+0xf8>
 8000b40:	441a      	add	r2, r3
 8000b42:	ea80 0c01 	eor.w	ip, r0, r1
 8000b46:	0240      	lsls	r0, r0, #9
 8000b48:	bf18      	it	ne
 8000b4a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b4e:	d01e      	beq.n	8000b8e <__aeabi_fmul+0x66>
 8000b50:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b54:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b58:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b5c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b60:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b64:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000b68:	bf3e      	ittt	cc
 8000b6a:	0049      	lslcc	r1, r1, #1
 8000b6c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b70:	005b      	lslcc	r3, r3, #1
 8000b72:	ea40 0001 	orr.w	r0, r0, r1
 8000b76:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000b7a:	2afd      	cmp	r2, #253	@ 0xfd
 8000b7c:	d81d      	bhi.n	8000bba <__aeabi_fmul+0x92>
 8000b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000b82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b86:	bf08      	it	eq
 8000b88:	f020 0001 	biceq.w	r0, r0, #1
 8000b8c:	4770      	bx	lr
 8000b8e:	f090 0f00 	teq	r0, #0
 8000b92:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b96:	bf08      	it	eq
 8000b98:	0249      	lsleq	r1, r1, #9
 8000b9a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b9e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ba2:	3a7f      	subs	r2, #127	@ 0x7f
 8000ba4:	bfc2      	ittt	gt
 8000ba6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000baa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bae:	4770      	bxgt	lr
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	dc5d      	bgt.n	8000c78 <__aeabi_fmul+0x150>
 8000bbc:	f112 0f19 	cmn.w	r2, #25
 8000bc0:	bfdc      	itt	le
 8000bc2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bxle	lr
 8000bc8:	f1c2 0200 	rsb	r2, r2, #0
 8000bcc:	0041      	lsls	r1, r0, #1
 8000bce:	fa21 f102 	lsr.w	r1, r1, r2
 8000bd2:	f1c2 0220 	rsb	r2, r2, #32
 8000bd6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bda:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bde:	f140 0000 	adc.w	r0, r0, #0
 8000be2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000be6:	bf08      	it	eq
 8000be8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bec:	4770      	bx	lr
 8000bee:	f092 0f00 	teq	r2, #0
 8000bf2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bf6:	bf02      	ittt	eq
 8000bf8:	0040      	lsleq	r0, r0, #1
 8000bfa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bfe:	3a01      	subeq	r2, #1
 8000c00:	d0f9      	beq.n	8000bf6 <__aeabi_fmul+0xce>
 8000c02:	ea40 000c 	orr.w	r0, r0, ip
 8000c06:	f093 0f00 	teq	r3, #0
 8000c0a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c0e:	bf02      	ittt	eq
 8000c10:	0049      	lsleq	r1, r1, #1
 8000c12:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c16:	3b01      	subeq	r3, #1
 8000c18:	d0f9      	beq.n	8000c0e <__aeabi_fmul+0xe6>
 8000c1a:	ea41 010c 	orr.w	r1, r1, ip
 8000c1e:	e78f      	b.n	8000b40 <__aeabi_fmul+0x18>
 8000c20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c24:	ea92 0f0c 	teq	r2, ip
 8000c28:	bf18      	it	ne
 8000c2a:	ea93 0f0c 	teqne	r3, ip
 8000c2e:	d00a      	beq.n	8000c46 <__aeabi_fmul+0x11e>
 8000c30:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c34:	bf18      	it	ne
 8000c36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c3a:	d1d8      	bne.n	8000bee <__aeabi_fmul+0xc6>
 8000c3c:	ea80 0001 	eor.w	r0, r0, r1
 8000c40:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f090 0f00 	teq	r0, #0
 8000c4a:	bf17      	itett	ne
 8000c4c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c50:	4608      	moveq	r0, r1
 8000c52:	f091 0f00 	teqne	r1, #0
 8000c56:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c5a:	d014      	beq.n	8000c86 <__aeabi_fmul+0x15e>
 8000c5c:	ea92 0f0c 	teq	r2, ip
 8000c60:	d101      	bne.n	8000c66 <__aeabi_fmul+0x13e>
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	d10f      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c66:	ea93 0f0c 	teq	r3, ip
 8000c6a:	d103      	bne.n	8000c74 <__aeabi_fmul+0x14c>
 8000c6c:	024b      	lsls	r3, r1, #9
 8000c6e:	bf18      	it	ne
 8000c70:	4608      	movne	r0, r1
 8000c72:	d108      	bne.n	8000c86 <__aeabi_fmul+0x15e>
 8000c74:	ea80 0001 	eor.w	r0, r0, r1
 8000c78:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c8a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_fdiv>:
 8000c90:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c98:	bf1e      	ittt	ne
 8000c9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c9e:	ea92 0f0c 	teqne	r2, ip
 8000ca2:	ea93 0f0c 	teqne	r3, ip
 8000ca6:	d069      	beq.n	8000d7c <__aeabi_fdiv+0xec>
 8000ca8:	eba2 0203 	sub.w	r2, r2, r3
 8000cac:	ea80 0c01 	eor.w	ip, r0, r1
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cb6:	d037      	beq.n	8000d28 <__aeabi_fdiv+0x98>
 8000cb8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cbc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cc0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cc4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	bf38      	it	cc
 8000ccc:	005b      	lslcc	r3, r3, #1
 8000cce:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000cd2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	bf24      	itt	cs
 8000cda:	1a5b      	subcs	r3, r3, r1
 8000cdc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ce0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ce4:	bf24      	itt	cs
 8000ce6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cf2:	bf24      	itt	cs
 8000cf4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cf8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cfc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d00:	bf24      	itt	cs
 8000d02:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d06:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	bf18      	it	ne
 8000d0e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d12:	d1e0      	bne.n	8000cd6 <__aeabi_fdiv+0x46>
 8000d14:	2afd      	cmp	r2, #253	@ 0xfd
 8000d16:	f63f af50 	bhi.w	8000bba <__aeabi_fmul+0x92>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d2c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d30:	327f      	adds	r2, #127	@ 0x7f
 8000d32:	bfc2      	ittt	gt
 8000d34:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d38:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3c:	4770      	bxgt	lr
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	3a01      	subs	r2, #1
 8000d48:	e737      	b.n	8000bba <__aeabi_fmul+0x92>
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d52:	bf02      	ittt	eq
 8000d54:	0040      	lsleq	r0, r0, #1
 8000d56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d5a:	3a01      	subeq	r2, #1
 8000d5c:	d0f9      	beq.n	8000d52 <__aeabi_fdiv+0xc2>
 8000d5e:	ea40 000c 	orr.w	r0, r0, ip
 8000d62:	f093 0f00 	teq	r3, #0
 8000d66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d6a:	bf02      	ittt	eq
 8000d6c:	0049      	lsleq	r1, r1, #1
 8000d6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d72:	3b01      	subeq	r3, #1
 8000d74:	d0f9      	beq.n	8000d6a <__aeabi_fdiv+0xda>
 8000d76:	ea41 010c 	orr.w	r1, r1, ip
 8000d7a:	e795      	b.n	8000ca8 <__aeabi_fdiv+0x18>
 8000d7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d80:	ea92 0f0c 	teq	r2, ip
 8000d84:	d108      	bne.n	8000d98 <__aeabi_fdiv+0x108>
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	f47f af7d 	bne.w	8000c86 <__aeabi_fmul+0x15e>
 8000d8c:	ea93 0f0c 	teq	r3, ip
 8000d90:	f47f af70 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000d94:	4608      	mov	r0, r1
 8000d96:	e776      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000d98:	ea93 0f0c 	teq	r3, ip
 8000d9c:	d104      	bne.n	8000da8 <__aeabi_fdiv+0x118>
 8000d9e:	024b      	lsls	r3, r1, #9
 8000da0:	f43f af4c 	beq.w	8000c3c <__aeabi_fmul+0x114>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e76e      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000da8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dac:	bf18      	it	ne
 8000dae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db2:	d1ca      	bne.n	8000d4a <__aeabi_fdiv+0xba>
 8000db4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000db8:	f47f af5c 	bne.w	8000c74 <__aeabi_fmul+0x14c>
 8000dbc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000dc0:	f47f af3c 	bne.w	8000c3c <__aeabi_fmul+0x114>
 8000dc4:	e75f      	b.n	8000c86 <__aeabi_fmul+0x15e>
 8000dc6:	bf00      	nop

08000dc8 <__gesf2>:
 8000dc8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000dcc:	e006      	b.n	8000ddc <__cmpsf2+0x4>
 8000dce:	bf00      	nop

08000dd0 <__lesf2>:
 8000dd0:	f04f 0c01 	mov.w	ip, #1
 8000dd4:	e002      	b.n	8000ddc <__cmpsf2+0x4>
 8000dd6:	bf00      	nop

08000dd8 <__cmpsf2>:
 8000dd8:	f04f 0c01 	mov.w	ip, #1
 8000ddc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000de0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000de4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000de8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dec:	bf18      	it	ne
 8000dee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000df2:	d011      	beq.n	8000e18 <__cmpsf2+0x40>
 8000df4:	b001      	add	sp, #4
 8000df6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dfa:	bf18      	it	ne
 8000dfc:	ea90 0f01 	teqne	r0, r1
 8000e00:	bf58      	it	pl
 8000e02:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e06:	bf88      	it	hi
 8000e08:	17c8      	asrhi	r0, r1, #31
 8000e0a:	bf38      	it	cc
 8000e0c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e10:	bf18      	it	ne
 8000e12:	f040 0001 	orrne.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e1c:	d102      	bne.n	8000e24 <__cmpsf2+0x4c>
 8000e1e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e22:	d105      	bne.n	8000e30 <__cmpsf2+0x58>
 8000e24:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e28:	d1e4      	bne.n	8000df4 <__cmpsf2+0x1c>
 8000e2a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e2e:	d0e1      	beq.n	8000df4 <__cmpsf2+0x1c>
 8000e30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <__aeabi_cfrcmple>:
 8000e38:	4684      	mov	ip, r0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	4661      	mov	r1, ip
 8000e3e:	e7ff      	b.n	8000e40 <__aeabi_cfcmpeq>

08000e40 <__aeabi_cfcmpeq>:
 8000e40:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e42:	f7ff ffc9 	bl	8000dd8 <__cmpsf2>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	bf48      	it	mi
 8000e4a:	f110 0f00 	cmnmi.w	r0, #0
 8000e4e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e50 <__aeabi_fcmpeq>:
 8000e50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e54:	f7ff fff4 	bl	8000e40 <__aeabi_cfcmpeq>
 8000e58:	bf0c      	ite	eq
 8000e5a:	2001      	moveq	r0, #1
 8000e5c:	2000      	movne	r0, #0
 8000e5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e62:	bf00      	nop

08000e64 <__aeabi_fcmplt>:
 8000e64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e68:	f7ff ffea 	bl	8000e40 <__aeabi_cfcmpeq>
 8000e6c:	bf34      	ite	cc
 8000e6e:	2001      	movcc	r0, #1
 8000e70:	2000      	movcs	r0, #0
 8000e72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e76:	bf00      	nop

08000e78 <__aeabi_fcmple>:
 8000e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e7c:	f7ff ffe0 	bl	8000e40 <__aeabi_cfcmpeq>
 8000e80:	bf94      	ite	ls
 8000e82:	2001      	movls	r0, #1
 8000e84:	2000      	movhi	r0, #0
 8000e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8a:	bf00      	nop

08000e8c <__aeabi_fcmpge>:
 8000e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e90:	f7ff ffd2 	bl	8000e38 <__aeabi_cfrcmple>
 8000e94:	bf94      	ite	ls
 8000e96:	2001      	movls	r0, #1
 8000e98:	2000      	movhi	r0, #0
 8000e9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_fcmpgt>:
 8000ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea4:	f7ff ffc8 	bl	8000e38 <__aeabi_cfrcmple>
 8000ea8:	bf34      	ite	cc
 8000eaa:	2001      	movcc	r0, #1
 8000eac:	2000      	movcs	r0, #0
 8000eae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_fcmpun>:
 8000eb4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ebc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec0:	d102      	bne.n	8000ec8 <__aeabi_fcmpun+0x14>
 8000ec2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fcmpun+0x26>
 8000ec8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ecc:	d102      	bne.n	8000ed4 <__aeabi_fcmpun+0x20>
 8000ece:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ed2:	d102      	bne.n	8000eda <__aeabi_fcmpun+0x26>
 8000ed4:	f04f 0000 	mov.w	r0, #0
 8000ed8:	4770      	bx	lr
 8000eda:	f04f 0001 	mov.w	r0, #1
 8000ede:	4770      	bx	lr

08000ee0 <__aeabi_f2iz>:
 8000ee0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ee4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ee8:	d30f      	bcc.n	8000f0a <__aeabi_f2iz+0x2a>
 8000eea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000eee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef2:	d90d      	bls.n	8000f10 <__aeabi_f2iz+0x30>
 8000ef4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ef8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000efc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f00:	fa23 f002 	lsr.w	r0, r3, r2
 8000f04:	bf18      	it	ne
 8000f06:	4240      	negne	r0, r0
 8000f08:	4770      	bx	lr
 8000f0a:	f04f 0000 	mov.w	r0, #0
 8000f0e:	4770      	bx	lr
 8000f10:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f14:	d101      	bne.n	8000f1a <__aeabi_f2iz+0x3a>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	d105      	bne.n	8000f26 <__aeabi_f2iz+0x46>
 8000f1a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f1e:	bf08      	it	eq
 8000f20:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f24:	4770      	bx	lr
 8000f26:	f04f 0000 	mov.w	r0, #0
 8000f2a:	4770      	bx	lr

08000f2c <__aeabi_f2uiz>:
 8000f2c:	0042      	lsls	r2, r0, #1
 8000f2e:	d20e      	bcs.n	8000f4e <__aeabi_f2uiz+0x22>
 8000f30:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f34:	d30b      	bcc.n	8000f4e <__aeabi_f2uiz+0x22>
 8000f36:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f3a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f3e:	d409      	bmi.n	8000f54 <__aeabi_f2uiz+0x28>
 8000f40:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f48:	fa23 f002 	lsr.w	r0, r3, r2
 8000f4c:	4770      	bx	lr
 8000f4e:	f04f 0000 	mov.w	r0, #0
 8000f52:	4770      	bx	lr
 8000f54:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f58:	d101      	bne.n	8000f5e <__aeabi_f2uiz+0x32>
 8000f5a:	0242      	lsls	r2, r0, #9
 8000f5c:	d102      	bne.n	8000f64 <__aeabi_f2uiz+0x38>
 8000f5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f62:	4770      	bx	lr
 8000f64:	f04f 0000 	mov.w	r0, #0
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	0000      	movs	r0, r0
	...

08000f70 <main>:
float gx, gy, gz;      // Gyroscope (°/s)




int main(void){
 8000f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af04      	add	r7, sp, #16
	enableClk();
 8000f76:	f000 f8d9 	bl	800112c <enableClk>
	configureIO();
 8000f7a:	f000 f8bd 	bl	80010f8 <configureIO>


	Kp = 5.0f;
 8000f7e:	4b4c      	ldr	r3, [pc, #304]	@ (80010b0 <main+0x140>)
 8000f80:	4a4c      	ldr	r2, [pc, #304]	@ (80010b4 <main+0x144>)
 8000f82:	601a      	str	r2, [r3, #0]
	Ki = 0.7f;
 8000f84:	4b4c      	ldr	r3, [pc, #304]	@ (80010b8 <main+0x148>)
 8000f86:	4a4d      	ldr	r2, [pc, #308]	@ (80010bc <main+0x14c>)
 8000f88:	601a      	str	r2, [r3, #0]
	Kd = 0.8f;
 8000f8a:	4b4d      	ldr	r3, [pc, #308]	@ (80010c0 <main+0x150>)
 8000f8c:	4a4d      	ldr	r2, [pc, #308]	@ (80010c4 <main+0x154>)
 8000f8e:	601a      	str	r2, [r3, #0]

	initADC2();
 8000f90:	f000 f954 	bl	800123c <initADC2>
	initPWM();
 8000f94:	f000 fa54 	bl	8001440 <initPWM>
	initI2C();
 8000f98:	f000 faca 	bl	8001530 <initI2C>
	initIMU();
 8000f9c:	f000 fafe 	bl	800159c <initIMU>


while (1) {


	freeMotor();
 8000fa0:	f000 fa40 	bl	8001424 <freeMotor>

	readIMUData(&ax, &ay, &az, &gx, &gy, &gz);
 8000fa4:	4b48      	ldr	r3, [pc, #288]	@ (80010c8 <main+0x158>)
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	4b48      	ldr	r3, [pc, #288]	@ (80010cc <main+0x15c>)
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	4b48      	ldr	r3, [pc, #288]	@ (80010d0 <main+0x160>)
 8000fae:	4a49      	ldr	r2, [pc, #292]	@ (80010d4 <main+0x164>)
 8000fb0:	4949      	ldr	r1, [pc, #292]	@ (80010d8 <main+0x168>)
 8000fb2:	484a      	ldr	r0, [pc, #296]	@ (80010dc <main+0x16c>)
 8000fb4:	f000 fb62 	bl	800167c <readIMUData>
//				}
//				else {
//					turnOFF(2);
//				}

	setAngles(ax, ay, az, gx, gy, gz, &roll, &pitch);
 8000fb8:	4b48      	ldr	r3, [pc, #288]	@ (80010dc <main+0x16c>)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	4b46      	ldr	r3, [pc, #280]	@ (80010d8 <main+0x168>)
 8000fbe:	6819      	ldr	r1, [r3, #0]
 8000fc0:	4b44      	ldr	r3, [pc, #272]	@ (80010d4 <main+0x164>)
 8000fc2:	681c      	ldr	r4, [r3, #0]
 8000fc4:	4b42      	ldr	r3, [pc, #264]	@ (80010d0 <main+0x160>)
 8000fc6:	681d      	ldr	r5, [r3, #0]
 8000fc8:	4b40      	ldr	r3, [pc, #256]	@ (80010cc <main+0x15c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a3e      	ldr	r2, [pc, #248]	@ (80010c8 <main+0x158>)
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	4e43      	ldr	r6, [pc, #268]	@ (80010e0 <main+0x170>)
 8000fd2:	9603      	str	r6, [sp, #12]
 8000fd4:	4e43      	ldr	r6, [pc, #268]	@ (80010e4 <main+0x174>)
 8000fd6:	9602      	str	r6, [sp, #8]
 8000fd8:	9201      	str	r2, [sp, #4]
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	462b      	mov	r3, r5
 8000fde:	4622      	mov	r2, r4
 8000fe0:	f000 fc6a 	bl	80018b8 <setAngles>

	yaw += gz * DT;
 8000fe4:	4b38      	ldr	r3, [pc, #224]	@ (80010c8 <main+0x158>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	493f      	ldr	r1, [pc, #252]	@ (80010e8 <main+0x178>)
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fd9c 	bl	8000b28 <__aeabi_fmul>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b3d      	ldr	r3, [pc, #244]	@ (80010ec <main+0x17c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	f7ff fc8c 	bl	8000918 <__addsf3>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	4b39      	ldr	r3, [pc, #228]	@ (80010ec <main+0x17c>)
 8001006:	601a      	str	r2, [r3, #0]
	if (pitch > 180.0f) pitch = 180.0f;
	if (roll < 0.0f) roll = 0.0f;
	if (yaw < 0.0f) yaw = 0.0f;
	if (pitch < 0.0f) pitch = 0.0f; */

	float angle_deg = roll;
 8001008:	4b36      	ldr	r3, [pc, #216]	@ (80010e4 <main+0x174>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	607b      	str	r3, [r7, #4]


	if (angle_deg !=0){
 800100e:	f04f 0100 	mov.w	r1, #0
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ff1c 	bl	8000e50 <__aeabi_fcmpeq>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <main+0xb6>
		turnON(2);
 800101e:	2002      	movs	r0, #2
 8001020:	f000 f8b0 	bl	8001184 <turnON>
 8001024:	e002      	b.n	800102c <main+0xbc>
	}
	else {
		turnOFF(2);
 8001026:	2002      	movs	r0, #2
 8001028:	f000 f8da 	bl	80011e0 <turnOFF>

    //  0° → 2225

    // +90° → 1050

	ref = (uint16_t)(-13.0556 * angle_deg + 2225);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff fb1d 	bl	800066c <__aeabi_f2d>
 8001032:	a31b      	add	r3, pc, #108	@ (adr r3, 80010a0 <main+0x130>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	f7ff f88a 	bl	8000150 <__aeabi_dmul>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	a318      	add	r3, pc, #96	@ (adr r3, 80010a8 <main+0x138>)
 8001046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104a:	f7ff f9b1 	bl	80003b0 <__adddf3>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fbe9 	bl	800082c <__aeabi_d2uiz>
 800105a:	4603      	mov	r3, r0
 800105c:	b29b      	uxth	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	4b23      	ldr	r3, [pc, #140]	@ (80010f0 <main+0x180>)
 8001062:	601a      	str	r2, [r3, #0]

	curr = getcurrentPosition();
 8001064:	f000 fcd8 	bl	8001a18 <getcurrentPosition>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <main+0x184>)
 800106e:	601a      	str	r2, [r3, #0]

	if ((ref >= LOWER_LIMIT && ref <= UPPER_LIMIT) && (curr != ref)) PIDController();
 8001070:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <main+0x180>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f240 4219 	movw	r2, #1049	@ 0x419
 8001078:	4293      	cmp	r3, r2
 800107a:	dd0d      	ble.n	8001098 <main+0x128>
 800107c:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <main+0x180>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f640 5248 	movw	r2, #3400	@ 0xd48
 8001084:	4293      	cmp	r3, r2
 8001086:	dc07      	bgt.n	8001098 <main+0x128>
 8001088:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <main+0x184>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <main+0x180>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d001      	beq.n	8001098 <main+0x128>
 8001094:	f000 fcc8 	bl	8001a28 <PIDController>

	delay(10);
 8001098:	200a      	movs	r0, #10
 800109a:	f000 f927 	bl	80012ec <delay>
while (1) {
 800109e:	e77f      	b.n	8000fa0 <main+0x30>
 80010a0:	9a6b50b1 	.word	0x9a6b50b1
 80010a4:	c02a1c77 	.word	0xc02a1c77
 80010a8:	00000000 	.word	0x00000000
 80010ac:	40a16200 	.word	0x40a16200
 80010b0:	20000070 	.word	0x20000070
 80010b4:	40a00000 	.word	0x40a00000
 80010b8:	20000074 	.word	0x20000074
 80010bc:	3f333333 	.word	0x3f333333
 80010c0:	20000078 	.word	0x20000078
 80010c4:	3f4ccccd 	.word	0x3f4ccccd
 80010c8:	200000bc 	.word	0x200000bc
 80010cc:	200000b8 	.word	0x200000b8
 80010d0:	200000b4 	.word	0x200000b4
 80010d4:	200000b0 	.word	0x200000b0
 80010d8:	200000ac 	.word	0x200000ac
 80010dc:	200000a8 	.word	0x200000a8
 80010e0:	200000a0 	.word	0x200000a0
 80010e4:	2000009c 	.word	0x2000009c
 80010e8:	3c23d70a 	.word	0x3c23d70a
 80010ec:	200000a4 	.word	0x200000a4
 80010f0:	2000008c 	.word	0x2000008c
 80010f4:	20000094 	.word	0x20000094

080010f8 <configureIO>:


}


void configureIO(){
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
	 * SDA -> B11
	 * SCL -> B10
	 *
	 * */

	GPIOA -> CRL = 0x444440A4;
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <configureIO+0x20>)
 80010fe:	4a07      	ldr	r2, [pc, #28]	@ (800111c <configureIO+0x24>)
 8001100:	601a      	str	r2, [r3, #0]
	GPIOB -> CRL = 0x24444444;
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <configureIO+0x28>)
 8001104:	4a07      	ldr	r2, [pc, #28]	@ (8001124 <configureIO+0x2c>)
 8001106:	601a      	str	r2, [r3, #0]
	GPIOB -> CRH = 0x4424AA22;
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <configureIO+0x28>)
 800110a:	4a07      	ldr	r2, [pc, #28]	@ (8001128 <configureIO+0x30>)
 800110c:	605a      	str	r2, [r3, #4]


}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40010800 	.word	0x40010800
 800111c:	444440a4 	.word	0x444440a4
 8001120:	40010c00 	.word	0x40010c00
 8001124:	24444444 	.word	0x24444444
 8001128:	4424aa22 	.word	0x4424aa22

0800112c <enableClk>:

void enableClk(){
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <enableClk+0x54>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <enableClk+0x54>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	6193      	str	r3, [r2, #24]
	RCC -> APB2ENR |= RCC_APB2ENR_IOPBEN;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <enableClk+0x54>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a0f      	ldr	r2, [pc, #60]	@ (8001180 <enableClk+0x54>)
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	6193      	str	r3, [r2, #24]
	RCC -> APB1ENR |= 0b11; //enable TIM2 & TIM3
 8001148:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <enableClk+0x54>)
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	4a0c      	ldr	r2, [pc, #48]	@ (8001180 <enableClk+0x54>)
 800114e:	f043 0303 	orr.w	r3, r3, #3
 8001152:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <enableClk+0x54>)
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	4a09      	ldr	r2, [pc, #36]	@ (8001180 <enableClk+0x54>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	61d3      	str	r3, [r2, #28]
	RCC -> APB2ENR |= (1 << 9) | (1 << 10); // enable CLK for ADC1
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <enableClk+0x54>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a06      	ldr	r2, [pc, #24]	@ (8001180 <enableClk+0x54>)
 8001166:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800116a:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_I2C2EN; //enable I2C2 CLK
 800116c:	4b04      	ldr	r3, [pc, #16]	@ (8001180 <enableClk+0x54>)
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	4a03      	ldr	r2, [pc, #12]	@ (8001180 <enableClk+0x54>)
 8001172:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001176:	61d3      	str	r3, [r2, #28]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	40021000 	.word	0x40021000

08001184 <turnON>:


void turnON(uint8_t i){
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]


	switch (i){
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d014      	beq.n	80011be <turnON+0x3a>
 8001194:	2b02      	cmp	r3, #2
 8001196:	dc19      	bgt.n	80011cc <turnON+0x48>
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <turnON+0x1e>
 800119c:	2b01      	cmp	r3, #1
 800119e:	d007      	beq.n	80011b0 <turnON+0x2c>

		case 0: GPIOA ->ODR |= (1 << 7);  return; // Blue indicates reached goal
		case 1: GPIOB ->ODR |= (1 << 10); return; // Red indicates still processing
		case 2: GPIOB ->ODR |= (1 << 13); return; // Green indicates CAL for first time

		default: break;
 80011a0:	e014      	b.n	80011cc <turnON+0x48>
		case 0: GPIOA ->ODR |= (1 << 7);  return; // Blue indicates reached goal
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <turnON+0x54>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	4a0c      	ldr	r2, [pc, #48]	@ (80011d8 <turnON+0x54>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011ac:	60d3      	str	r3, [r2, #12]
 80011ae:	e00e      	b.n	80011ce <turnON+0x4a>
		case 1: GPIOB ->ODR |= (1 << 10); return; // Red indicates still processing
 80011b0:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <turnON+0x58>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	4a09      	ldr	r2, [pc, #36]	@ (80011dc <turnON+0x58>)
 80011b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ba:	60d3      	str	r3, [r2, #12]
 80011bc:	e007      	b.n	80011ce <turnON+0x4a>
		case 2: GPIOB ->ODR |= (1 << 13); return; // Green indicates CAL for first time
 80011be:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <turnON+0x58>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	4a06      	ldr	r2, [pc, #24]	@ (80011dc <turnON+0x58>)
 80011c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011c8:	60d3      	str	r3, [r2, #12]
 80011ca:	e000      	b.n	80011ce <turnON+0x4a>
		default: break;
 80011cc:	bf00      	nop
	}
}
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40010800 	.word	0x40010800
 80011dc:	40010c00 	.word	0x40010c00

080011e0 <turnOFF>:

void turnOFF(uint8_t i){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]


	switch (i){
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d014      	beq.n	800121a <turnOFF+0x3a>
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	dc19      	bgt.n	8001228 <turnOFF+0x48>
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <turnOFF+0x1e>
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d007      	beq.n	800120c <turnOFF+0x2c>

		case 0: GPIOA ->ODR &= ~(1 << 7);  return;
		case 1: GPIOB ->ODR &= ~(1 << 10); return;
		case 2: GPIOB ->ODR &= ~(1 << 13); return;

		default: break;
 80011fc:	e014      	b.n	8001228 <turnOFF+0x48>
		case 0: GPIOA ->ODR &= ~(1 << 7);  return;
 80011fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <turnOFF+0x54>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	4a0c      	ldr	r2, [pc, #48]	@ (8001234 <turnOFF+0x54>)
 8001204:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001208:	60d3      	str	r3, [r2, #12]
 800120a:	e00e      	b.n	800122a <turnOFF+0x4a>
		case 1: GPIOB ->ODR &= ~(1 << 10); return;
 800120c:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <turnOFF+0x58>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	4a09      	ldr	r2, [pc, #36]	@ (8001238 <turnOFF+0x58>)
 8001212:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001216:	60d3      	str	r3, [r2, #12]
 8001218:	e007      	b.n	800122a <turnOFF+0x4a>
		case 2: GPIOB ->ODR &= ~(1 << 13); return;
 800121a:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <turnOFF+0x58>)
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	4a06      	ldr	r2, [pc, #24]	@ (8001238 <turnOFF+0x58>)
 8001220:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001224:	60d3      	str	r3, [r2, #12]
 8001226:	e000      	b.n	800122a <turnOFF+0x4a>
		default: break;
 8001228:	bf00      	nop
	}
}
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40010800 	.word	0x40010800
 8001238:	40010c00 	.word	0x40010c00

0800123c <initADC2>:


void initADC2(){
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0

		ADC2->SQR1 = 0x00000000;  // Reset SQR1 (sequence length = 1 by default)
 8001242:	4b29      	ldr	r3, [pc, #164]	@ (80012e8 <initADC2+0xac>)
 8001244:	2200      	movs	r2, #0
 8001246:	62da      	str	r2, [r3, #44]	@ 0x2c
		ADC2->SQR3 = 2; // Channel 2
 8001248:	4b27      	ldr	r3, [pc, #156]	@ (80012e8 <initADC2+0xac>)
 800124a:	2202      	movs	r2, #2
 800124c:	635a      	str	r2, [r3, #52]	@ 0x34
		ADC2 -> SMPR2 &= 0; // reseting the sample time
 800124e:	4b26      	ldr	r3, [pc, #152]	@ (80012e8 <initADC2+0xac>)
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <initADC2+0xac>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
		ADC2->SMPR2 |= (0b010 << 6); // Channel 2 7.5 cycles
 8001258:	4b23      	ldr	r3, [pc, #140]	@ (80012e8 <initADC2+0xac>)
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	4a22      	ldr	r2, [pc, #136]	@ (80012e8 <initADC2+0xac>)
 800125e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001262:	6113      	str	r3, [r2, #16]

		ADC2->CR2 |= ADC_CR2_ADON; // ADC on
 8001264:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <initADC2+0xac>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	4a1f      	ldr	r2, [pc, #124]	@ (80012e8 <initADC2+0xac>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6093      	str	r3, [r2, #8]
		for (volatile int i = 0; i < 10000; i++);  // Short delay
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	e002      	b.n	800127c <initADC2+0x40>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3301      	adds	r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001282:	4293      	cmp	r3, r2
 8001284:	ddf7      	ble.n	8001276 <initADC2+0x3a>

		ADC2->CR2 |= ADC_CR2_CAL;          // Start calibration
 8001286:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <initADC2+0xac>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	4a17      	ldr	r2, [pc, #92]	@ (80012e8 <initADC2+0xac>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6093      	str	r3, [r2, #8]
		while (ADC2->CR2 & ADC_CR2_CAL);   // Wait for calibration to finish
 8001292:	bf00      	nop
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <initADC2+0xac>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f9      	bne.n	8001294 <initADC2+0x58>

		ADC2->CR2 |= ADC_CR2_EXTTRIG;  // Enable external trigger
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <initADC2+0xac>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	4a10      	ldr	r2, [pc, #64]	@ (80012e8 <initADC2+0xac>)
 80012a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012aa:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_EXTSEL;       // Clear EXTSEL bits
 80012ac:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <initADC2+0xac>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	@ (80012e8 <initADC2+0xac>)
 80012b2:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 80012b6:	6093      	str	r3, [r2, #8]
		ADC2->CR2 |= (0b111 << 17);         // Set EXTSEL = 111 for SWSTART
 80012b8:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <initADC2+0xac>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <initADC2+0xac>)
 80012be:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 80012c2:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_CONT;  // Clear CONT bit for single conversion mode
 80012c4:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <initADC2+0xac>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4a07      	ldr	r2, [pc, #28]	@ (80012e8 <initADC2+0xac>)
 80012ca:	f023 0302 	bic.w	r3, r3, #2
 80012ce:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_ALIGN;  // 0 = Right alignment (default)
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <initADC2+0xac>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	4a04      	ldr	r2, [pc, #16]	@ (80012e8 <initADC2+0xac>)
 80012d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80012da:	6093      	str	r3, [r2, #8]

}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40012800 	.word	0x40012800

080012ec <delay>:


void delay(uint16_t t){
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
	TIM3 ->PSC = 8000-1;
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <delay+0x58>)
 80012f8:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80012fc:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3 ->ARR = t-1;
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	1e5a      	subs	r2, r3, #1
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <delay+0x58>)
 8001304:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3 ->CR1 |= TIM_CR1_CEN;
 8001306:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <delay+0x58>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a0e      	ldr	r2, [pc, #56]	@ (8001344 <delay+0x58>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6013      	str	r3, [r2, #0]
	while(!(TIM3->SR & TIM_SR_UIF));
 8001312:	bf00      	nop
 8001314:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <delay+0x58>)
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f9      	beq.n	8001314 <delay+0x28>
	TIM3->SR &= ~TIM_SR_UIF;
 8001320:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <delay+0x58>)
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	4a07      	ldr	r2, [pc, #28]	@ (8001344 <delay+0x58>)
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	6113      	str	r3, [r2, #16]
	TIM3 ->CR1 &= ~(TIM_CR1_CEN);
 800132c:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <delay+0x58>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a04      	ldr	r2, [pc, #16]	@ (8001344 <delay+0x58>)
 8001332:	f023 0301 	bic.w	r3, r3, #1
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40000400 	.word	0x40000400

08001348 <getADCVal>:


uint16_t getADCVal(uint8_t i){
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
	if (i ==0){
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d117      	bne.n	8001388 <getADCVal+0x40>
		ADC1->CR2 |= ADC_CR2_SWSTART; // start conversion
 8001358:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <getADCVal+0x78>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	4a18      	ldr	r2, [pc, #96]	@ (80013c0 <getADCVal+0x78>)
 800135e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001362:	6093      	str	r3, [r2, #8]
			while (!(ADC1->SR & ADC_SR_EOC));     // Wait for conversion complete
 8001364:	bf00      	nop
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <getADCVal+0x78>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f9      	beq.n	8001366 <getADCVal+0x1e>
			ADC1->SR &= ~(ADC_SR_EOC);
 8001372:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <getADCVal+0x78>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <getADCVal+0x78>)
 8001378:	f023 0302 	bic.w	r3, r3, #2
 800137c:	6013      	str	r3, [r2, #0]
			uint16_t ADCVal = ADC1->DR;  // Read result (10-bit mask)
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <getADCVal+0x78>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	81bb      	strh	r3, [r7, #12]
			return ADCVal;
 8001384:	89bb      	ldrh	r3, [r7, #12]
 8001386:	e016      	b.n	80013b6 <getADCVal+0x6e>
	}
	else {
		ADC2->CR2 |= ADC_CR2_SWSTART; // start conversion
 8001388:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <getADCVal+0x7c>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <getADCVal+0x7c>)
 800138e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001392:	6093      	str	r3, [r2, #8]
		while (!(ADC2->SR & ADC_SR_EOC));     // Wait for conversion complete
 8001394:	bf00      	nop
 8001396:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <getADCVal+0x7c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f9      	beq.n	8001396 <getADCVal+0x4e>
		ADC2->SR &= ~(ADC_SR_EOC);
 80013a2:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <getADCVal+0x7c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a07      	ldr	r2, [pc, #28]	@ (80013c4 <getADCVal+0x7c>)
 80013a8:	f023 0302 	bic.w	r3, r3, #2
 80013ac:	6013      	str	r3, [r2, #0]
		uint16_t ADCVal = ADC2->DR;  // Read result (10-bit mask)
 80013ae:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <getADCVal+0x7c>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	81fb      	strh	r3, [r7, #14]
		return ADCVal;
 80013b4:	89fb      	ldrh	r3, [r7, #14]
	}


}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	40012400 	.word	0x40012400
 80013c4:	40012800 	.word	0x40012800

080013c8 <setRotationDir>:


void setRotationDir(uint8_t i){
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	switch(i){
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <setRotationDir+0x16>
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d007      	beq.n	80013ec <setRotationDir+0x24>
		case 0 : GPIOB -> ODR |= (1 << 7) ;break; // Counter CLockwise
		case 1 : GPIOB -> ODR |= (1 << 8) ;break; // CLockwise
		default: break;
 80013dc:	e00d      	b.n	80013fa <setRotationDir+0x32>
		case 0 : GPIOB -> ODR |= (1 << 7) ;break; // Counter CLockwise
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <setRotationDir+0x3c>)
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	4a08      	ldr	r2, [pc, #32]	@ (8001404 <setRotationDir+0x3c>)
 80013e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e8:	60d3      	str	r3, [r2, #12]
 80013ea:	e006      	b.n	80013fa <setRotationDir+0x32>
		case 1 : GPIOB -> ODR |= (1 << 8) ;break; // CLockwise
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <setRotationDir+0x3c>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	4a04      	ldr	r2, [pc, #16]	@ (8001404 <setRotationDir+0x3c>)
 80013f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f6:	60d3      	str	r3, [r2, #12]
 80013f8:	bf00      	nop
	}
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	40010c00 	.word	0x40010c00

08001408 <pressBreak>:


void pressBreak(){
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	GPIOB->ODR |= (1 << 7) | (1 << 8);
 800140c:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <pressBreak+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4a03      	ldr	r2, [pc, #12]	@ (8001420 <pressBreak+0x18>)
 8001412:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8001416:	60d3      	str	r3, [r2, #12]

}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	40010c00 	.word	0x40010c00

08001424 <freeMotor>:


void freeMotor(){
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~((1 << 7) | (1 << 8));
 8001428:	4b04      	ldr	r3, [pc, #16]	@ (800143c <freeMotor+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4a03      	ldr	r2, [pc, #12]	@ (800143c <freeMotor+0x18>)
 800142e:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	40010c00 	.word	0x40010c00

08001440 <initPWM>:

void initPWM(){
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	RCC ->APB1ENR |= RCC_APB1ENR_TIM2EN; //enable Timer
 8001444:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <initPWM+0x94>)
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	4a22      	ldr	r2, [pc, #136]	@ (80014d4 <initPWM+0x94>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	61d3      	str	r3, [r2, #28]

	TIM2 -> PSC = 8 - 1;
 8001450:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001454:	2207      	movs	r2, #7
 8001456:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2 -> ARR = 20000 - 1;
 8001458:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800145c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001460:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CCMR1 |= (6 << 12); // mode 1 for ch2
 8001462:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800146c:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001470:	6193      	str	r3, [r2, #24]

	TIM2 -> CCR2 = 0; //duty Cycle =0
 8001472:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001476:	2200      	movs	r2, #0
 8001478:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM2->CCMR1 |= TIM_CCMR1_OC1PE; // Enable preload
 800147a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= TIM_CCER_CC2E;    // Enable output for CH1
 800148a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001494:	f043 0310 	orr.w	r3, r3, #16
 8001498:	6213      	str	r3, [r2, #32]

	TIM2->CR1 |= TIM_CR1_ARPE;   // Enable auto-reload Preload
 800149a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014a8:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= TIM_EGR_UG;     // Force update to load registers
 80014aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6153      	str	r3, [r2, #20]

	TIM2->CR1 |= TIM_CR1_CEN;    // Enable timer
 80014ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6013      	str	r3, [r2, #0]

}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000

080014d8 <writePWM>:

void writePWM (float dutyCycle){
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	if (dutyCycle > 100){
 80014e0:	4912      	ldr	r1, [pc, #72]	@ (800152c <writePWM+0x54>)
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff fcdc 	bl	8000ea0 <__aeabi_fcmpgt>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <writePWM+0x1a>
		dutyCycle = 100;
 80014ee:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <writePWM+0x54>)
 80014f0:	607b      	str	r3, [r7, #4]
	}

	TIM2 -> CCR2 = (TIM2->ARR + 1) * dutyCycle / 100;
 80014f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f8:	3301      	adds	r3, #1
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fabc 	bl	8000a78 <__aeabi_ui2f>
 8001500:	4603      	mov	r3, r0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fb0f 	bl	8000b28 <__aeabi_fmul>
 800150a:	4603      	mov	r3, r0
 800150c:	4907      	ldr	r1, [pc, #28]	@ (800152c <writePWM+0x54>)
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fbbe 	bl	8000c90 <__aeabi_fdiv>
 8001514:	4603      	mov	r3, r0
 8001516:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fd06 	bl	8000f2c <__aeabi_f2uiz>
 8001520:	4603      	mov	r3, r0
 8001522:	63a3      	str	r3, [r4, #56]	@ 0x38

}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bd90      	pop	{r4, r7, pc}
 800152c:	42c80000 	.word	0x42c80000

08001530 <initI2C>:

void initI2C(){
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

	//enabled RCC
	//Configured IO as AF OD

	I2C2-> CR1 &= ~I2C_CR1_PE; // Disable I2C2 before configuring
 8001534:	4b18      	ldr	r3, [pc, #96]	@ (8001598 <initI2C+0x68>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a17      	ldr	r2, [pc, #92]	@ (8001598 <initI2C+0x68>)
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	6013      	str	r3, [r2, #0]

	// Reset I2C2 peripheral
	I2C2-> CR1 |= I2C_CR1_SWRST;
 8001540:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <initI2C+0x68>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a14      	ldr	r2, [pc, #80]	@ (8001598 <initI2C+0x68>)
 8001546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800154a:	6013      	str	r3, [r2, #0]
	I2C2-> CR1 &= ~I2C_CR1_SWRST;
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <initI2C+0x68>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a11      	ldr	r2, [pc, #68]	@ (8001598 <initI2C+0x68>)
 8001552:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001556:	6013      	str	r3, [r2, #0]

	I2C2 -> CR2 = 8 ; // set Freq.
 8001558:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <initI2C+0x68>)
 800155a:	2208      	movs	r2, #8
 800155c:	605a      	str	r2, [r3, #4]

	I2C2-> CCR &= ~I2C_CCR_FS;  // Standard mode
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <initI2C+0x68>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <initI2C+0x68>)
 8001564:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001568:	61d3      	str	r3, [r2, #28]
	I2C2 -> CCR |= (1<<15); //or
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <initI2C+0x68>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <initI2C+0x68>)
 8001570:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001574:	61d3      	str	r3, [r2, #28]

	//I2C2->CCR &= ~I2C_CCR_DUTY; setting duty here is useless

	I2C2->CCR = 7;
 8001576:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <initI2C+0x68>)
 8001578:	2207      	movs	r2, #7
 800157a:	61da      	str	r2, [r3, #28]

	// F/(2*speed) -> 8M / ( 2*100K )

	I2C2-> TRISE = 8 + 1 ;  // TRISE = Fpclk1(MHz) + 1 => 8 + 1
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <initI2C+0x68>)
 800157e:	2209      	movs	r2, #9
 8001580:	621a      	str	r2, [r3, #32]

	I2C2-> CR1 |= I2C_CR1_PE; //Enable I2C2
 8001582:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <initI2C+0x68>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <initI2C+0x68>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6013      	str	r3, [r2, #0]


}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40005800 	.word	0x40005800

0800159c <initIMU>:
	}




void initIMU() {
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
    // Wake up the MPU9250
	if (I2C2->SR2 & I2C_SR2_BUSY){
 80015a2:	4b35      	ldr	r3, [pc, #212]	@ (8001678 <initIMU+0xdc>)
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d017      	beq.n	80015de <initIMU+0x42>
		I2C2 ->CR1 &= ~I2C_CR1_PE;     // Disable I2C
 80015ae:	4b32      	ldr	r3, [pc, #200]	@ (8001678 <initIMU+0xdc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a31      	ldr	r2, [pc, #196]	@ (8001678 <initIMU+0xdc>)
 80015b4:	f023 0301 	bic.w	r3, r3, #1
 80015b8:	6013      	str	r3, [r2, #0]
		I2C2 ->CR1 |= I2C_CR1_SWRST;   // Software reset
 80015ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <initIMU+0xdc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a2e      	ldr	r2, [pc, #184]	@ (8001678 <initIMU+0xdc>)
 80015c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015c4:	6013      	str	r3, [r2, #0]
		I2C2 ->CR1 &= ~I2C_CR1_SWRST;
 80015c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001678 <initIMU+0xdc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001678 <initIMU+0xdc>)
 80015cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80015d0:	6013      	str	r3, [r2, #0]
		I2C2 ->CR1 |= I2C_CR1_PE;      // Re-enable I2C
 80015d2:	4b29      	ldr	r3, [pc, #164]	@ (8001678 <initIMU+0xdc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a28      	ldr	r2, [pc, #160]	@ (8001678 <initIMU+0xdc>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6013      	str	r3, [r2, #0]
	}

    I2C2->CR1 |= I2C_CR1_START;
 80015de:	4b26      	ldr	r3, [pc, #152]	@ (8001678 <initIMU+0xdc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a25      	ldr	r2, [pc, #148]	@ (8001678 <initIMU+0xdc>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e8:	6013      	str	r3, [r2, #0]
    while (!(I2C2->SR1 & I2C_SR1_SB));
 80015ea:	bf00      	nop
 80015ec:	4b22      	ldr	r3, [pc, #136]	@ (8001678 <initIMU+0xdc>)
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0f9      	beq.n	80015ec <initIMU+0x50>
    (void)I2C2->SR1;
 80015f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <initIMU+0xdc>)
 80015fa:	695b      	ldr	r3, [r3, #20]

    for (volatile int i = 0 ; i<20 ; i++);
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	e002      	b.n	8001608 <initIMU+0x6c>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3301      	adds	r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b13      	cmp	r3, #19
 800160c:	ddf9      	ble.n	8001602 <initIMU+0x66>

    I2C2->DR = MPU9250_ADDR << 1; // write
 800160e:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <initIMU+0xdc>)
 8001610:	22d0      	movs	r2, #208	@ 0xd0
 8001612:	611a      	str	r2, [r3, #16]
    while (!(I2C2->SR1 & I2C_SR1_ADDR));
 8001614:	bf00      	nop
 8001616:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <initIMU+0xdc>)
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f9      	beq.n	8001616 <initIMU+0x7a>
    (void)I2C2->SR1;
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <initIMU+0xdc>)
 8001624:	695b      	ldr	r3, [r3, #20]
    (void)I2C2->SR2;
 8001626:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <initIMU+0xdc>)
 8001628:	699b      	ldr	r3, [r3, #24]

    while (!(I2C2->SR1 & I2C_SR1_TXE));
 800162a:	bf00      	nop
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <initIMU+0xdc>)
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f9      	beq.n	800162c <initIMU+0x90>
    I2C2->DR = PWR_MGMT_1;
 8001638:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <initIMU+0xdc>)
 800163a:	226b      	movs	r2, #107	@ 0x6b
 800163c:	611a      	str	r2, [r3, #16]
    while (!(I2C2->SR1 & I2C_SR1_BTF));
 800163e:	bf00      	nop
 8001640:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <initIMU+0xdc>)
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f9      	beq.n	8001640 <initIMU+0xa4>
    I2C2->DR = 0x00;
 800164c:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <initIMU+0xdc>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
    while (!(I2C2->SR1 & I2C_SR1_BTF));
 8001652:	bf00      	nop
 8001654:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <initIMU+0xdc>)
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f9      	beq.n	8001654 <initIMU+0xb8>
    I2C2->CR1 |= I2C_CR1_STOP;
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <initIMU+0xdc>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <initIMU+0xdc>)
 8001666:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40005800 	.word	0x40005800

0800167c <readIMUData>:

void readIMUData(float* ax, float* ay, float* az,
                 float* gx, float* gy, float* gz) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b08e      	sub	sp, #56	@ 0x38
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
 8001688:	603b      	str	r3, [r7, #0]
    uint8_t rawData[14];

    // Start communication
    I2C2->CR1 |= I2C_CR1_START;
 800168a:	4b89      	ldr	r3, [pc, #548]	@ (80018b0 <readIMUData+0x234>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a88      	ldr	r2, [pc, #544]	@ (80018b0 <readIMUData+0x234>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001694:	6013      	str	r3, [r2, #0]
    while (!(I2C2->SR1 & I2C_SR1_SB));
 8001696:	bf00      	nop
 8001698:	4b85      	ldr	r3, [pc, #532]	@ (80018b0 <readIMUData+0x234>)
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f9      	beq.n	8001698 <readIMUData+0x1c>
    (void)I2C2->SR1;
 80016a4:	4b82      	ldr	r3, [pc, #520]	@ (80018b0 <readIMUData+0x234>)
 80016a6:	695b      	ldr	r3, [r3, #20]

    for (volatile int i = 0; i <20 ;i++);
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	e002      	b.n	80016b4 <readIMUData+0x38>
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2b13      	cmp	r3, #19
 80016b8:	ddf9      	ble.n	80016ae <readIMUData+0x32>

    I2C2->DR = MPU9250_ADDR << 1; // Write
 80016ba:	4b7d      	ldr	r3, [pc, #500]	@ (80018b0 <readIMUData+0x234>)
 80016bc:	22d0      	movs	r2, #208	@ 0xd0
 80016be:	611a      	str	r2, [r3, #16]
    while (!(I2C2->SR1 & I2C_SR1_ADDR));
 80016c0:	bf00      	nop
 80016c2:	4b7b      	ldr	r3, [pc, #492]	@ (80018b0 <readIMUData+0x234>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f9      	beq.n	80016c2 <readIMUData+0x46>
    (void)I2C2->SR1;
 80016ce:	4b78      	ldr	r3, [pc, #480]	@ (80018b0 <readIMUData+0x234>)
 80016d0:	695b      	ldr	r3, [r3, #20]
    (void)I2C2->SR2;
 80016d2:	4b77      	ldr	r3, [pc, #476]	@ (80018b0 <readIMUData+0x234>)
 80016d4:	699b      	ldr	r3, [r3, #24]

    while (!(I2C2->SR1 & I2C_SR1_TXE));
 80016d6:	bf00      	nop
 80016d8:	4b75      	ldr	r3, [pc, #468]	@ (80018b0 <readIMUData+0x234>)
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f9      	beq.n	80016d8 <readIMUData+0x5c>
    I2C2->DR = ACCEL_XOUT_H;
 80016e4:	4b72      	ldr	r3, [pc, #456]	@ (80018b0 <readIMUData+0x234>)
 80016e6:	223b      	movs	r2, #59	@ 0x3b
 80016e8:	611a      	str	r2, [r3, #16]

    while (!(I2C2->SR1 & I2C_SR1_TXE));
 80016ea:	bf00      	nop
 80016ec:	4b70      	ldr	r3, [pc, #448]	@ (80018b0 <readIMUData+0x234>)
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f9      	beq.n	80016ec <readIMUData+0x70>
    I2C2->CR1 |= I2C_CR1_START; // Repeated start
 80016f8:	4b6d      	ldr	r3, [pc, #436]	@ (80018b0 <readIMUData+0x234>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a6c      	ldr	r2, [pc, #432]	@ (80018b0 <readIMUData+0x234>)
 80016fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001702:	6013      	str	r3, [r2, #0]
    while (!(I2C2->SR1 & I2C_SR1_SB));
 8001704:	bf00      	nop
 8001706:	4b6a      	ldr	r3, [pc, #424]	@ (80018b0 <readIMUData+0x234>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f9      	beq.n	8001706 <readIMUData+0x8a>
    (void)I2C2->SR1;
 8001712:	4b67      	ldr	r3, [pc, #412]	@ (80018b0 <readIMUData+0x234>)
 8001714:	695b      	ldr	r3, [r3, #20]

    I2C2->CR1 |= I2C_CR1_ACK; // Enable ACK before reading
 8001716:	4b66      	ldr	r3, [pc, #408]	@ (80018b0 <readIMUData+0x234>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a65      	ldr	r2, [pc, #404]	@ (80018b0 <readIMUData+0x234>)
 800171c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001720:	6013      	str	r3, [r2, #0]

    I2C2->DR = (MPU9250_ADDR << 1) | 0x01; // Read
 8001722:	4b63      	ldr	r3, [pc, #396]	@ (80018b0 <readIMUData+0x234>)
 8001724:	22d1      	movs	r2, #209	@ 0xd1
 8001726:	611a      	str	r2, [r3, #16]
    while (!(I2C2->SR1 & I2C_SR1_ADDR));
 8001728:	bf00      	nop
 800172a:	4b61      	ldr	r3, [pc, #388]	@ (80018b0 <readIMUData+0x234>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f9      	beq.n	800172a <readIMUData+0xae>
    (void)I2C2->SR1; (void)I2C2->SR2;
 8001736:	4b5e      	ldr	r3, [pc, #376]	@ (80018b0 <readIMUData+0x234>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	4b5d      	ldr	r3, [pc, #372]	@ (80018b0 <readIMUData+0x234>)
 800173c:	699b      	ldr	r3, [r3, #24]

    for (int i = 0; i < 14; i++) {
 800173e:	2300      	movs	r3, #0
 8001740:	637b      	str	r3, [r7, #52]	@ 0x34
 8001742:	e021      	b.n	8001788 <readIMUData+0x10c>
        while (!(I2C2->SR1 & I2C_SR1_RXNE));
 8001744:	bf00      	nop
 8001746:	4b5a      	ldr	r3, [pc, #360]	@ (80018b0 <readIMUData+0x234>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f9      	beq.n	8001746 <readIMUData+0xca>

        if (i == 12) {
 8001752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001754:	2b0c      	cmp	r3, #12
 8001756:	d10b      	bne.n	8001770 <readIMUData+0xf4>
            I2C2->CR1 &= ~I2C_CR1_ACK;  // NACK before 2nd last byte
 8001758:	4b55      	ldr	r3, [pc, #340]	@ (80018b0 <readIMUData+0x234>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a54      	ldr	r2, [pc, #336]	@ (80018b0 <readIMUData+0x234>)
 800175e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001762:	6013      	str	r3, [r2, #0]
            I2C2->CR1 |= I2C_CR1_STOP;  // Generate STOP
 8001764:	4b52      	ldr	r3, [pc, #328]	@ (80018b0 <readIMUData+0x234>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a51      	ldr	r2, [pc, #324]	@ (80018b0 <readIMUData+0x234>)
 800176a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800176e:	6013      	str	r3, [r2, #0]
        }

        rawData[i] = I2C2->DR;
 8001770:	4b4f      	ldr	r3, [pc, #316]	@ (80018b0 <readIMUData+0x234>)
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	b2d9      	uxtb	r1, r3
 8001776:	f107 0218 	add.w	r2, r7, #24
 800177a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800177c:	4413      	add	r3, r2
 800177e:	460a      	mov	r2, r1
 8001780:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 14; i++) {
 8001782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001784:	3301      	adds	r3, #1
 8001786:	637b      	str	r3, [r7, #52]	@ 0x34
 8001788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800178a:	2b0d      	cmp	r3, #13
 800178c:	ddda      	ble.n	8001744 <readIMUData+0xc8>
//    I2C2->CR1 &= ~I2C_CR1_ACK; // NACK
//    I2C2->CR1 |= I2C_CR1_STOP;
//    while (!(I2C2->SR1 & I2C_SR1_RXNE));
//    rawData[13] = I2C2->DR;

    int16_t ax_raw = (rawData[0] << 8) | rawData[1];
 800178e:	7e3b      	ldrb	r3, [r7, #24]
 8001790:	b21b      	sxth	r3, r3
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	b21a      	sxth	r2, r3
 8001796:	7e7b      	ldrb	r3, [r7, #25]
 8001798:	b21b      	sxth	r3, r3
 800179a:	4313      	orrs	r3, r2
 800179c:	867b      	strh	r3, [r7, #50]	@ 0x32
    int16_t ay_raw = (rawData[2] << 8) | rawData[3];
 800179e:	7ebb      	ldrb	r3, [r7, #26]
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	7efb      	ldrb	r3, [r7, #27]
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	863b      	strh	r3, [r7, #48]	@ 0x30
    int16_t az_raw = (rawData[4] << 8) | rawData[5];
 80017ae:	7f3b      	ldrb	r3, [r7, #28]
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	7f7b      	ldrb	r3, [r7, #29]
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    int16_t gx_raw = (rawData[8] << 8) | rawData[9];
 80017be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	b21a      	sxth	r2, r3
 80017c8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    int16_t gy_raw = (rawData[10] << 8) | rawData[11];
 80017d2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b21a      	sxth	r2, r3
 80017dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	4313      	orrs	r3, r2
 80017e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
    int16_t gz_raw = (rawData[12] << 8) | rawData[13];
 80017e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	4313      	orrs	r3, r2
 80017f8:	853b      	strh	r3, [r7, #40]	@ 0x28

    // Convert raw to physical units (example: depends on sensitivity settings)
    *ax = ax_raw / 16384.0f;  // Assuming ±2g
 80017fa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f93e 	bl	8000a80 <__aeabi_i2f>
 8001804:	4603      	mov	r3, r0
 8001806:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fa40 	bl	8000c90 <__aeabi_fdiv>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	601a      	str	r2, [r3, #0]
    *ay = ay_raw / 16384.0f;
 8001818:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff f92f 	bl	8000a80 <__aeabi_i2f>
 8001822:	4603      	mov	r3, r0
 8001824:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fa31 	bl	8000c90 <__aeabi_fdiv>
 800182e:	4603      	mov	r3, r0
 8001830:	461a      	mov	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	601a      	str	r2, [r3, #0]
    *az = az_raw / 16384.0f;
 8001836:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff f920 	bl	8000a80 <__aeabi_i2f>
 8001840:	4603      	mov	r3, r0
 8001842:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fa22 	bl	8000c90 <__aeabi_fdiv>
 800184c:	4603      	mov	r3, r0
 800184e:	461a      	mov	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	601a      	str	r2, [r3, #0]
    *gx = gx_raw / 131.0f;    // Assuming ±250°/s
 8001854:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff f911 	bl	8000a80 <__aeabi_i2f>
 800185e:	4603      	mov	r3, r0
 8001860:	4914      	ldr	r1, [pc, #80]	@ (80018b4 <readIMUData+0x238>)
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fa14 	bl	8000c90 <__aeabi_fdiv>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	601a      	str	r2, [r3, #0]
    *gy = gy_raw / 131.0f;
 8001870:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff f903 	bl	8000a80 <__aeabi_i2f>
 800187a:	4603      	mov	r3, r0
 800187c:	490d      	ldr	r1, [pc, #52]	@ (80018b4 <readIMUData+0x238>)
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fa06 	bl	8000c90 <__aeabi_fdiv>
 8001884:	4603      	mov	r3, r0
 8001886:	461a      	mov	r2, r3
 8001888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800188a:	601a      	str	r2, [r3, #0]
    *gz = gz_raw / 131.0f;
 800188c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff f8f5 	bl	8000a80 <__aeabi_i2f>
 8001896:	4603      	mov	r3, r0
 8001898:	4906      	ldr	r1, [pc, #24]	@ (80018b4 <readIMUData+0x238>)
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f9f8 	bl	8000c90 <__aeabi_fdiv>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018a6:	601a      	str	r2, [r3, #0]
}
 80018a8:	bf00      	nop
 80018aa:	3738      	adds	r7, #56	@ 0x38
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40005800 	.word	0x40005800
 80018b4:	43030000 	.word	0x43030000

080018b8 <setAngles>:


void setAngles(float ax, float ay, float az,
               float gx, float gy, float gz,
               float* roll, float* pitch) {
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b08a      	sub	sp, #40	@ 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]

    // Compute roll and pitch from accelerometer (in degrees)
    float accel_roll  = atan2f(ay, az) * RAD_TO_DEG;
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	68b8      	ldr	r0, [r7, #8]
 80018ca:	f000 fb01 	bl	8001ed0 <atan2f>
 80018ce:	4603      	mov	r3, r0
 80018d0:	494a      	ldr	r1, [pc, #296]	@ (80019fc <setAngles+0x144>)
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f928 	bl	8000b28 <__aeabi_fmul>
 80018d8:	4603      	mov	r3, r0
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
    float accel_pitch = atan2f(-ax, sqrtf(ay * ay + az * az)) * RAD_TO_DEG;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	68b8      	ldr	r0, [r7, #8]
 80018e6:	f7ff f91f 	bl	8000b28 <__aeabi_fmul>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461d      	mov	r5, r3
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff f919 	bl	8000b28 <__aeabi_fmul>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4619      	mov	r1, r3
 80018fa:	4628      	mov	r0, r5
 80018fc:	f7ff f80c 	bl	8000918 <__addsf3>
 8001900:	4603      	mov	r3, r0
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fae6 	bl	8001ed4 <sqrtf>
 8001908:	4603      	mov	r3, r0
 800190a:	4619      	mov	r1, r3
 800190c:	4620      	mov	r0, r4
 800190e:	f000 fadf 	bl	8001ed0 <atan2f>
 8001912:	4603      	mov	r3, r0
 8001914:	4939      	ldr	r1, [pc, #228]	@ (80019fc <setAngles+0x144>)
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff f906 	bl	8000b28 <__aeabi_fmul>
 800191c:	4603      	mov	r3, r0
 800191e:	623b      	str	r3, [r7, #32]

    // Calculate delta time in seconds
    static uint32_t lastTime = 0;
    uint32_t now = SysTick->VAL;
 8001920:	4b37      	ldr	r3, [pc, #220]	@ (8001a00 <setAngles+0x148>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	61fb      	str	r3, [r7, #28]
    float dt = (now - lastTime) / 8000000.0f;  // Assuming 8 MHz SysTick clock
 8001926:	4b37      	ldr	r3, [pc, #220]	@ (8001a04 <setAngles+0x14c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f8a2 	bl	8000a78 <__aeabi_ui2f>
 8001934:	4603      	mov	r3, r0
 8001936:	4934      	ldr	r1, [pc, #208]	@ (8001a08 <setAngles+0x150>)
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff f9a9 	bl	8000c90 <__aeabi_fdiv>
 800193e:	4603      	mov	r3, r0
 8001940:	61bb      	str	r3, [r7, #24]
    lastTime = now;
 8001942:	4a30      	ldr	r2, [pc, #192]	@ (8001a04 <setAngles+0x14c>)
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	6013      	str	r3, [r2, #0]

    // Complementary filter constant
    const float alpha = 0.98f;
 8001948:	4b30      	ldr	r3, [pc, #192]	@ (8001a0c <setAngles+0x154>)
 800194a:	617b      	str	r3, [r7, #20]

    // Integrate gyro data
    static float roll_cf = 0.0f;
    static float pitch_cf = 0.0f;

    roll_cf  = alpha * (roll_cf + gx * dt)  + (1 - alpha) * accel_roll;
 800194c:	69b9      	ldr	r1, [r7, #24]
 800194e:	6838      	ldr	r0, [r7, #0]
 8001950:	f7ff f8ea 	bl	8000b28 <__aeabi_fmul>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	4b2d      	ldr	r3, [pc, #180]	@ (8001a10 <setAngles+0x158>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	4610      	mov	r0, r2
 8001960:	f7fe ffda 	bl	8000918 <__addsf3>
 8001964:	4603      	mov	r3, r0
 8001966:	6979      	ldr	r1, [r7, #20]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff f8dd 	bl	8000b28 <__aeabi_fmul>
 800196e:	4603      	mov	r3, r0
 8001970:	461c      	mov	r4, r3
 8001972:	6979      	ldr	r1, [r7, #20]
 8001974:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001978:	f7fe ffcc 	bl	8000914 <__aeabi_fsub>
 800197c:	4603      	mov	r3, r0
 800197e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff f8d1 	bl	8000b28 <__aeabi_fmul>
 8001986:	4603      	mov	r3, r0
 8001988:	4619      	mov	r1, r3
 800198a:	4620      	mov	r0, r4
 800198c:	f7fe ffc4 	bl	8000918 <__addsf3>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	4b1e      	ldr	r3, [pc, #120]	@ (8001a10 <setAngles+0x158>)
 8001996:	601a      	str	r2, [r3, #0]
    pitch_cf = alpha * (pitch_cf + gy * dt) + (1 - alpha) * accel_pitch;
 8001998:	69b9      	ldr	r1, [r7, #24]
 800199a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800199c:	f7ff f8c4 	bl	8000b28 <__aeabi_fmul>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a14 <setAngles+0x15c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	4610      	mov	r0, r2
 80019ac:	f7fe ffb4 	bl	8000918 <__addsf3>
 80019b0:	4603      	mov	r3, r0
 80019b2:	6979      	ldr	r1, [r7, #20]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff f8b7 	bl	8000b28 <__aeabi_fmul>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461c      	mov	r4, r3
 80019be:	6979      	ldr	r1, [r7, #20]
 80019c0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80019c4:	f7fe ffa6 	bl	8000914 <__aeabi_fsub>
 80019c8:	4603      	mov	r3, r0
 80019ca:	6a39      	ldr	r1, [r7, #32]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff f8ab 	bl	8000b28 <__aeabi_fmul>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4619      	mov	r1, r3
 80019d6:	4620      	mov	r0, r4
 80019d8:	f7fe ff9e 	bl	8000918 <__addsf3>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <setAngles+0x15c>)
 80019e2:	601a      	str	r2, [r3, #0]

    *roll = roll_cf;
 80019e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <setAngles+0x158>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019ea:	601a      	str	r2, [r3, #0]
    *pitch = pitch_cf;
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <setAngles+0x15c>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019f2:	601a      	str	r2, [r3, #0]
}
 80019f4:	bf00      	nop
 80019f6:	3728      	adds	r7, #40	@ 0x28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bdb0      	pop	{r4, r5, r7, pc}
 80019fc:	42652ee1 	.word	0x42652ee1
 8001a00:	e000e010 	.word	0xe000e010
 8001a04:	200000c0 	.word	0x200000c0
 8001a08:	4af42400 	.word	0x4af42400
 8001a0c:	3f7ae148 	.word	0x3f7ae148
 8001a10:	200000c4 	.word	0x200000c4
 8001a14:	200000c8 	.word	0x200000c8

08001a18 <getcurrentPosition>:
    *roll = Kalman_getAngle(&kalmanRoll, accel_roll, gx, dt);
    *pitch = Kalman_getAngle(&kalmanPitch, accel_pitch, gy, dt);
}
 */

uint16_t getcurrentPosition(){ return getADCVal(1);}
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff fc93 	bl	8001348 <getADCVal>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4618      	mov	r0, r3
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <PIDController>:

// PID -> u(t) = Kp * E(t) + Ki * ∫E(t)dt + Kd * dE(t)/dt

void PIDController() {
 8001a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a2c:	b089      	sub	sp, #36	@ 0x24
 8001a2e:	af04      	add	r7, sp, #16
    int count = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]

    while ((fabs(ref - curr) > TOLERANCE) && (count++ < 10000)) {
 8001a34:	e19c      	b.n	8001d70 <PIDController+0x348>

    	if (fabs(prevRef - ref) > RESET_THRESHOLD){
 8001a36:	4b82      	ldr	r3, [pc, #520]	@ (8001c40 <PIDController+0x218>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4b82      	ldr	r3, [pc, #520]	@ (8001c44 <PIDController+0x21c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fe01 	bl	8000648 <__aeabi_i2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4614      	mov	r4, r2
 8001a4c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	4b7c      	ldr	r3, [pc, #496]	@ (8001c48 <PIDController+0x220>)
 8001a56:	4620      	mov	r0, r4
 8001a58:	4629      	mov	r1, r5
 8001a5a:	f7fe fedd 	bl	8000818 <__aeabi_dcmpgt>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <PIDController+0x48>
    		errDerivative =0;
 8001a64:	4b79      	ldr	r3, [pc, #484]	@ (8001c4c <PIDController+0x224>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
    		errIntegral = 0;
 8001a6a:	4b79      	ldr	r3, [pc, #484]	@ (8001c50 <PIDController+0x228>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

    	}

        curr = getcurrentPosition();
 8001a70:	f7ff ffd2 	bl	8001a18 <getcurrentPosition>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b76      	ldr	r3, [pc, #472]	@ (8001c54 <PIDController+0x22c>)
 8001a7a:	601a      	str	r2, [r3, #0]
        err = ref - curr;
 8001a7c:	4b71      	ldr	r3, [pc, #452]	@ (8001c44 <PIDController+0x21c>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b74      	ldr	r3, [pc, #464]	@ (8001c54 <PIDController+0x22c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	4a74      	ldr	r2, [pc, #464]	@ (8001c58 <PIDController+0x230>)
 8001a88:	6013      	str	r3, [r2, #0]

        // Enforce limits and prevent overshooting
        if ((curr <= LOWER_LIMIT && err < 0) ||
 8001a8a:	4b72      	ldr	r3, [pc, #456]	@ (8001c54 <PIDController+0x22c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f240 421a 	movw	r2, #1050	@ 0x41a
 8001a92:	4293      	cmp	r3, r2
 8001a94:	dc03      	bgt.n	8001a9e <PIDController+0x76>
 8001a96:	4b70      	ldr	r3, [pc, #448]	@ (8001c58 <PIDController+0x230>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db16      	blt.n	8001acc <PIDController+0xa4>
            (curr >= UPPER_LIMIT && err > 0) ||
 8001a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8001c54 <PIDController+0x22c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
        if ((curr <= LOWER_LIMIT && err < 0) ||
 8001aa2:	f640 5247 	movw	r2, #3399	@ 0xd47
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	dd03      	ble.n	8001ab2 <PIDController+0x8a>
            (curr >= UPPER_LIMIT && err > 0) ||
 8001aaa:	4b6b      	ldr	r3, [pc, #428]	@ (8001c58 <PIDController+0x230>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	dc0c      	bgt.n	8001acc <PIDController+0xa4>
            curr < LOWER_LIMIT ||
 8001ab2:	4b68      	ldr	r3, [pc, #416]	@ (8001c54 <PIDController+0x22c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
            (curr >= UPPER_LIMIT && err > 0) ||
 8001ab6:	f240 4219 	movw	r2, #1049	@ 0x419
 8001aba:	4293      	cmp	r3, r2
 8001abc:	dd06      	ble.n	8001acc <PIDController+0xa4>
            curr > UPPER_LIMIT) {
 8001abe:	4b65      	ldr	r3, [pc, #404]	@ (8001c54 <PIDController+0x22c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
            curr < LOWER_LIMIT ||
 8001ac2:	f640 5248 	movw	r2, #3400	@ 0xd48
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	f340 80a0 	ble.w	8001c0c <PIDController+0x1e4>

            pressBreak();        // Emergency stop
 8001acc:	f7ff fc9c 	bl	8001408 <pressBreak>

            // Wait until ref is set to move AWAY from the limit
            while (1) {
                curr = getcurrentPosition();
 8001ad0:	f7ff ffa2 	bl	8001a18 <getcurrentPosition>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8001c54 <PIDController+0x22c>)
 8001ada:	601a      	str	r2, [r3, #0]
            	readIMUData(&ax, &ay, &az, &gx, &gy, &gz);
 8001adc:	4b5f      	ldr	r3, [pc, #380]	@ (8001c5c <PIDController+0x234>)
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	4b5f      	ldr	r3, [pc, #380]	@ (8001c60 <PIDController+0x238>)
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4b5f      	ldr	r3, [pc, #380]	@ (8001c64 <PIDController+0x23c>)
 8001ae6:	4a60      	ldr	r2, [pc, #384]	@ (8001c68 <PIDController+0x240>)
 8001ae8:	4960      	ldr	r1, [pc, #384]	@ (8001c6c <PIDController+0x244>)
 8001aea:	4861      	ldr	r0, [pc, #388]	@ (8001c70 <PIDController+0x248>)
 8001aec:	f7ff fdc6 	bl	800167c <readIMUData>
            	setAngles(ax, ay, az, gx, gy, gz, &roll, &pitch);
 8001af0:	4b5f      	ldr	r3, [pc, #380]	@ (8001c70 <PIDController+0x248>)
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	4b5d      	ldr	r3, [pc, #372]	@ (8001c6c <PIDController+0x244>)
 8001af6:	6819      	ldr	r1, [r3, #0]
 8001af8:	4b5b      	ldr	r3, [pc, #364]	@ (8001c68 <PIDController+0x240>)
 8001afa:	681e      	ldr	r6, [r3, #0]
 8001afc:	4b59      	ldr	r3, [pc, #356]	@ (8001c64 <PIDController+0x23c>)
 8001afe:	f8d3 c000 	ldr.w	ip, [r3]
 8001b02:	4b57      	ldr	r3, [pc, #348]	@ (8001c60 <PIDController+0x238>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a55      	ldr	r2, [pc, #340]	@ (8001c5c <PIDController+0x234>)
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	f8df e168 	ldr.w	lr, [pc, #360]	@ 8001c74 <PIDController+0x24c>
 8001b0e:	f8cd e00c 	str.w	lr, [sp, #12]
 8001b12:	f8df e164 	ldr.w	lr, [pc, #356]	@ 8001c78 <PIDController+0x250>
 8001b16:	f8cd e008 	str.w	lr, [sp, #8]
 8001b1a:	9201      	str	r2, [sp, #4]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	4663      	mov	r3, ip
 8001b20:	4632      	mov	r2, r6
 8001b22:	f7ff fec9 	bl	80018b8 <setAngles>

            	float angle_deg =0;
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]
            		if (fabs(roll) > STABILITY_TOLERANCE){
 8001b2c:	4b52      	ldr	r3, [pc, #328]	@ (8001c78 <PIDController+0x250>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b34:	4951      	ldr	r1, [pc, #324]	@ (8001c7c <PIDController+0x254>)
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f9b2 	bl	8000ea0 <__aeabi_fcmpgt>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <PIDController+0x120>
            			    angle_deg = roll;
 8001b42:	4b4d      	ldr	r3, [pc, #308]	@ (8001c78 <PIDController+0x250>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	60bb      	str	r3, [r7, #8]
            			}
            			if (fabs(pitch) > STABILITY_TOLERANCE){
 8001b48:	4b4a      	ldr	r3, [pc, #296]	@ (8001c74 <PIDController+0x24c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b50:	494a      	ldr	r1, [pc, #296]	@ (8001c7c <PIDController+0x254>)
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f9a4 	bl	8000ea0 <__aeabi_fcmpgt>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <PIDController+0x13c>
            				angle_deg = pitch;
 8001b5e:	4b45      	ldr	r3, [pc, #276]	@ (8001c74 <PIDController+0x24c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	60bb      	str	r3, [r7, #8]
            			}
            			if (fabs(yaw) > STABILITY_TOLERANCE){
 8001b64:	4b46      	ldr	r3, [pc, #280]	@ (8001c80 <PIDController+0x258>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b6c:	4943      	ldr	r1, [pc, #268]	@ (8001c7c <PIDController+0x254>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f996 	bl	8000ea0 <__aeabi_fcmpgt>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <PIDController+0x158>
            				angle_deg = yaw;
 8001b7a:	4b41      	ldr	r3, [pc, #260]	@ (8001c80 <PIDController+0x258>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	60bb      	str	r3, [r7, #8]
            			}

            		ref = (uint16_t) (-13.0556 * angle_deg + 3400);
 8001b80:	68b8      	ldr	r0, [r7, #8]
 8001b82:	f7fe fd73 	bl	800066c <__aeabi_f2d>
 8001b86:	a32a      	add	r3, pc, #168	@ (adr r3, 8001c30 <PIDController+0x208>)
 8001b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8c:	f7fe fae0 	bl	8000150 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	a327      	add	r3, pc, #156	@ (adr r3, 8001c38 <PIDController+0x210>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	f7fe fc07 	bl	80003b0 <__adddf3>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f7fe fe3f 	bl	800082c <__aeabi_d2uiz>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <PIDController+0x21c>)
 8001bb6:	601a      	str	r2, [r3, #0]
                err = ref - curr;
 8001bb8:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <PIDController+0x21c>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b25      	ldr	r3, [pc, #148]	@ (8001c54 <PIDController+0x22c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	4a25      	ldr	r2, [pc, #148]	@ (8001c58 <PIDController+0x230>)
 8001bc4:	6013      	str	r3, [r2, #0]

                if ((curr > LOWER_LIMIT && err > 0) ||
 8001bc6:	4b23      	ldr	r3, [pc, #140]	@ (8001c54 <PIDController+0x22c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f240 421a 	movw	r2, #1050	@ 0x41a
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	dd03      	ble.n	8001bda <PIDController+0x1b2>
 8001bd2:	4b21      	ldr	r3, [pc, #132]	@ (8001c58 <PIDController+0x230>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	dc18      	bgt.n	8001c0c <PIDController+0x1e4>
                    (curr < UPPER_LIMIT && err < 0)) {
 8001bda:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <PIDController+0x22c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
                if ((curr > LOWER_LIMIT && err > 0) ||
 8001bde:	f640 5247 	movw	r2, #3399	@ 0xd47
 8001be2:	4293      	cmp	r3, r2
 8001be4:	dc03      	bgt.n	8001bee <PIDController+0x1c6>
                    (curr < UPPER_LIMIT && err < 0)) {
 8001be6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c58 <PIDController+0x230>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	db0e      	blt.n	8001c0c <PIDController+0x1e4>
                    break; // Safe to resume
                }

                if (ref > LOWER_LIMIT && ref < UPPER_LIMIT) break;
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <PIDController+0x21c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f240 421a 	movw	r2, #1050	@ 0x41a
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	f77f af6a 	ble.w	8001ad0 <PIDController+0xa8>
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <PIDController+0x21c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f640 5247 	movw	r2, #3399	@ 0xd47
 8001c04:	4293      	cmp	r3, r2
 8001c06:	dd00      	ble.n	8001c0a <PIDController+0x1e2>
            while (1) {
 8001c08:	e762      	b.n	8001ad0 <PIDController+0xa8>
                if (ref > LOWER_LIMIT && ref < UPPER_LIMIT) break;
 8001c0a:	bf00      	nop
            }
        }


        errIntegral += err;
 8001c0c:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <PIDController+0x228>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <PIDController+0x230>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a0e      	ldr	r2, [pc, #56]	@ (8001c50 <PIDController+0x228>)
 8001c18:	6013      	str	r3, [r2, #0]
        if (errIntegral > 1000) errIntegral = 1000;
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c50 <PIDController+0x228>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c22:	dd2f      	ble.n	8001c84 <PIDController+0x25c>
 8001c24:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <PIDController+0x228>)
 8001c26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e032      	b.n	8001c94 <PIDController+0x26c>
 8001c2e:	bf00      	nop
 8001c30:	9a6b50b1 	.word	0x9a6b50b1
 8001c34:	c02a1c77 	.word	0xc02a1c77
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	40aa9000 	.word	0x40aa9000
 8001c40:	20000090 	.word	0x20000090
 8001c44:	2000008c 	.word	0x2000008c
 8001c48:	406f4000 	.word	0x406f4000
 8001c4c:	2000007c 	.word	0x2000007c
 8001c50:	20000080 	.word	0x20000080
 8001c54:	20000094 	.word	0x20000094
 8001c58:	20000088 	.word	0x20000088
 8001c5c:	200000bc 	.word	0x200000bc
 8001c60:	200000b8 	.word	0x200000b8
 8001c64:	200000b4 	.word	0x200000b4
 8001c68:	200000b0 	.word	0x200000b0
 8001c6c:	200000ac 	.word	0x200000ac
 8001c70:	200000a8 	.word	0x200000a8
 8001c74:	200000a0 	.word	0x200000a0
 8001c78:	2000009c 	.word	0x2000009c
 8001c7c:	41200000 	.word	0x41200000
 8001c80:	200000a4 	.word	0x200000a4
        else if (errIntegral < -1000) errIntegral = -1000;
 8001c84:	4b4f      	ldr	r3, [pc, #316]	@ (8001dc4 <PIDController+0x39c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001c8c:	da02      	bge.n	8001c94 <PIDController+0x26c>
 8001c8e:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc4 <PIDController+0x39c>)
 8001c90:	4a4d      	ldr	r2, [pc, #308]	@ (8001dc8 <PIDController+0x3a0>)
 8001c92:	601a      	str	r2, [r3, #0]

        errDerivative = err - prevErr;
 8001c94:	4b4d      	ldr	r3, [pc, #308]	@ (8001dcc <PIDController+0x3a4>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b4d      	ldr	r3, [pc, #308]	@ (8001dd0 <PIDController+0x3a8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	4a4d      	ldr	r2, [pc, #308]	@ (8001dd4 <PIDController+0x3ac>)
 8001ca0:	6013      	str	r3, [r2, #0]
        prevErr = err;
 8001ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8001dcc <PIDController+0x3a4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8001dd0 <PIDController+0x3a8>)
 8001ca8:	6013      	str	r3, [r2, #0]

        u = Kp * err + Ki * errIntegral + Kd * errDerivative;
 8001caa:	4b48      	ldr	r3, [pc, #288]	@ (8001dcc <PIDController+0x3a4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fee6 	bl	8000a80 <__aeabi_i2f>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b48      	ldr	r3, [pc, #288]	@ (8001dd8 <PIDController+0x3b0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	f7fe ff33 	bl	8000b28 <__aeabi_fmul>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461e      	mov	r6, r3
 8001cc6:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc4 <PIDController+0x39c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fed8 	bl	8000a80 <__aeabi_i2f>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b42      	ldr	r3, [pc, #264]	@ (8001ddc <PIDController+0x3b4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4610      	mov	r0, r2
 8001cda:	f7fe ff25 	bl	8000b28 <__aeabi_fmul>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4630      	mov	r0, r6
 8001ce4:	f7fe fe18 	bl	8000918 <__addsf3>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461e      	mov	r6, r3
 8001cec:	4b39      	ldr	r3, [pc, #228]	@ (8001dd4 <PIDController+0x3ac>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fec5 	bl	8000a80 <__aeabi_i2f>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	4b39      	ldr	r3, [pc, #228]	@ (8001de0 <PIDController+0x3b8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4610      	mov	r0, r2
 8001d00:	f7fe ff12 	bl	8000b28 <__aeabi_fmul>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4619      	mov	r1, r3
 8001d08:	4630      	mov	r0, r6
 8001d0a:	f7fe fe05 	bl	8000918 <__addsf3>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff f8e5 	bl	8000ee0 <__aeabi_f2iz>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a32      	ldr	r2, [pc, #200]	@ (8001de4 <PIDController+0x3bc>)
 8001d1a:	6013      	str	r3, [r2, #0]

        float duty = fabs(u);
 8001d1c:	4b31      	ldr	r3, [pc, #196]	@ (8001de4 <PIDController+0x3bc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fc91 	bl	8000648 <__aeabi_i2d>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe fd9d 	bl	800086c <__aeabi_d2f>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d38:	607b      	str	r3, [r7, #4]
        duty = duty > 100.0f ? 100.0f : duty;  // Clamp to 100
 8001d3a:	492b      	ldr	r1, [pc, #172]	@ (8001de8 <PIDController+0x3c0>)
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff f8af 	bl	8000ea0 <__aeabi_fcmpgt>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <PIDController+0x324>
 8001d48:	4b27      	ldr	r3, [pc, #156]	@ (8001de8 <PIDController+0x3c0>)
 8001d4a:	e000      	b.n	8001d4e <PIDController+0x326>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	607b      	str	r3, [r7, #4]

        freeMotor();  // Remove brake
 8001d50:	f7ff fb68 	bl	8001424 <freeMotor>

        if (u > 0) {
 8001d54:	4b23      	ldr	r3, [pc, #140]	@ (8001de4 <PIDController+0x3bc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	dd03      	ble.n	8001d64 <PIDController+0x33c>
            setRotationDir(1);  // Clockwise
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f7ff fb33 	bl	80013c8 <setRotationDir>
 8001d62:	e002      	b.n	8001d6a <PIDController+0x342>
        } else {
            setRotationDir(0);  // Counter-clockwise
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7ff fb2f 	bl	80013c8 <setRotationDir>
        }

        writePWM(duty);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff fbb4 	bl	80014d8 <writePWM>
    while ((fabs(ref - curr) > TOLERANCE) && (count++ < 10000)) {
 8001d70:	4b1e      	ldr	r3, [pc, #120]	@ (8001dec <PIDController+0x3c4>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b1e      	ldr	r3, [pc, #120]	@ (8001df0 <PIDController+0x3c8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fc64 	bl	8000648 <__aeabi_i2d>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4690      	mov	r8, r2
 8001d86:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	4b19      	ldr	r3, [pc, #100]	@ (8001df4 <PIDController+0x3cc>)
 8001d90:	4640      	mov	r0, r8
 8001d92:	4649      	mov	r1, r9
 8001d94:	f7fe fd40 	bl	8000818 <__aeabi_dcmpgt>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d007      	beq.n	8001dae <PIDController+0x386>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	60fa      	str	r2, [r7, #12]
 8001da4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001da8:	4293      	cmp	r3, r2
 8001daa:	f77f ae44 	ble.w	8001a36 <PIDController+0xe>

    }

    // Stop motor and show finish (BLUE ON)
    pressBreak();
 8001dae:	f7ff fb2b 	bl	8001408 <pressBreak>
    prevRef = ref;
 8001db2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dec <PIDController+0x3c4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a10      	ldr	r2, [pc, #64]	@ (8001df8 <PIDController+0x3d0>)
 8001db8:	6013      	str	r3, [r2, #0]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dc4:	20000080 	.word	0x20000080
 8001dc8:	fffffc18 	.word	0xfffffc18
 8001dcc:	20000088 	.word	0x20000088
 8001dd0:	20000084 	.word	0x20000084
 8001dd4:	2000007c 	.word	0x2000007c
 8001dd8:	20000070 	.word	0x20000070
 8001ddc:	20000074 	.word	0x20000074
 8001de0:	20000078 	.word	0x20000078
 8001de4:	20000098 	.word	0x20000098
 8001de8:	42c80000 	.word	0x42c80000
 8001dec:	2000008c 	.word	0x2000008c
 8001df0:	20000094 	.word	0x20000094
 8001df4:	40418000 	.word	0x40418000
 8001df8:	20000090 	.word	0x20000090

08001dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e00:	bf00      	nop
 8001e02:	e7fd      	b.n	8001e00 <NMI_Handler+0x4>

08001e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <HardFault_Handler+0x4>

08001e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <MemManage_Handler+0x4>

08001e14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <BusFault_Handler+0x4>

08001e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <UsageFault_Handler+0x4>

08001e24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e4c:	f000 f82e 	bl	8001eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e60:	f7ff fff8 	bl	8001e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e64:	480b      	ldr	r0, [pc, #44]	@ (8001e94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e66:	490c      	ldr	r1, [pc, #48]	@ (8001e98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e68:	4a0c      	ldr	r2, [pc, #48]	@ (8001e9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e6c:	e002      	b.n	8001e74 <LoopCopyDataInit>

08001e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e72:	3304      	adds	r3, #4

08001e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e78:	d3f9      	bcc.n	8001e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ea0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e7c:	4c09      	ldr	r4, [pc, #36]	@ (8001ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e80:	e001      	b.n	8001e86 <LoopFillZerobss>

08001e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e84:	3204      	adds	r2, #4

08001e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e88:	d3fb      	bcc.n	8001e82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e8a:	f000 fa4b 	bl	8002324 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e8e:	f7ff f86f 	bl	8000f70 <main>
  bx lr
 8001e92:	4770      	bx	lr
  ldr r0, =_sdata
 8001e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e98:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001e9c:	080023cc 	.word	0x080023cc
  ldr r2, =_sbss
 8001ea0:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001ea4:	20000208 	.word	0x20000208

08001ea8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ea8:	e7fe      	b.n	8001ea8 <ADC1_2_IRQHandler>
	...

08001eac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb0:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <HAL_IncTick+0x1c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <HAL_IncTick+0x20>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a03      	ldr	r2, [pc, #12]	@ (8001ecc <HAL_IncTick+0x20>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	200000cc 	.word	0x200000cc

08001ed0 <atan2f>:
 8001ed0:	f000 b88a 	b.w	8001fe8 <__ieee754_atan2f>

08001ed4 <sqrtf>:
 8001ed4:	b538      	push	{r3, r4, r5, lr}
 8001ed6:	4605      	mov	r5, r0
 8001ed8:	f000 f816 	bl	8001f08 <__ieee754_sqrtf>
 8001edc:	4629      	mov	r1, r5
 8001ede:	4604      	mov	r4, r0
 8001ee0:	4628      	mov	r0, r5
 8001ee2:	f7fe ffe7 	bl	8000eb4 <__aeabi_fcmpun>
 8001ee6:	b968      	cbnz	r0, 8001f04 <sqrtf+0x30>
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4628      	mov	r0, r5
 8001eec:	f7fe ffba 	bl	8000e64 <__aeabi_fcmplt>
 8001ef0:	b140      	cbz	r0, 8001f04 <sqrtf+0x30>
 8001ef2:	f000 fa11 	bl	8002318 <__errno>
 8001ef6:	2321      	movs	r3, #33	@ 0x21
 8001ef8:	2100      	movs	r1, #0
 8001efa:	6003      	str	r3, [r0, #0]
 8001efc:	4608      	mov	r0, r1
 8001efe:	f7fe fec7 	bl	8000c90 <__aeabi_fdiv>
 8001f02:	4604      	mov	r4, r0
 8001f04:	4620      	mov	r0, r4
 8001f06:	bd38      	pop	{r3, r4, r5, pc}

08001f08 <__ieee754_sqrtf>:
 8001f08:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8001f0c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8001f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f14:	4603      	mov	r3, r0
 8001f16:	4604      	mov	r4, r0
 8001f18:	d30a      	bcc.n	8001f30 <__ieee754_sqrtf+0x28>
 8001f1a:	4601      	mov	r1, r0
 8001f1c:	f7fe fe04 	bl	8000b28 <__aeabi_fmul>
 8001f20:	4601      	mov	r1, r0
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7fe fcf8 	bl	8000918 <__addsf3>
 8001f28:	4604      	mov	r4, r0
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f30:	2a00      	cmp	r2, #0
 8001f32:	d0fa      	beq.n	8001f2a <__ieee754_sqrtf+0x22>
 8001f34:	2800      	cmp	r0, #0
 8001f36:	da06      	bge.n	8001f46 <__ieee754_sqrtf+0x3e>
 8001f38:	4601      	mov	r1, r0
 8001f3a:	f7fe fceb 	bl	8000914 <__aeabi_fsub>
 8001f3e:	4601      	mov	r1, r0
 8001f40:	f7fe fea6 	bl	8000c90 <__aeabi_fdiv>
 8001f44:	e7f0      	b.n	8001f28 <__ieee754_sqrtf+0x20>
 8001f46:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8001f4a:	d03c      	beq.n	8001fc6 <__ieee754_sqrtf+0xbe>
 8001f4c:	15c2      	asrs	r2, r0, #23
 8001f4e:	2400      	movs	r4, #0
 8001f50:	2019      	movs	r0, #25
 8001f52:	4626      	mov	r6, r4
 8001f54:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001f58:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001f5c:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8001f60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f64:	07d2      	lsls	r2, r2, #31
 8001f66:	bf58      	it	pl
 8001f68:	005b      	lslpl	r3, r3, #1
 8001f6a:	106d      	asrs	r5, r5, #1
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	1872      	adds	r2, r6, r1
 8001f70:	429a      	cmp	r2, r3
 8001f72:	bfcf      	iteee	gt
 8001f74:	461a      	movgt	r2, r3
 8001f76:	1856      	addle	r6, r2, r1
 8001f78:	1864      	addle	r4, r4, r1
 8001f7a:	1a9a      	suble	r2, r3, r2
 8001f7c:	3801      	subs	r0, #1
 8001f7e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8001f82:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8001f86:	d1f2      	bne.n	8001f6e <__ieee754_sqrtf+0x66>
 8001f88:	b1ba      	cbz	r2, 8001fba <__ieee754_sqrtf+0xb2>
 8001f8a:	4e15      	ldr	r6, [pc, #84]	@ (8001fe0 <__ieee754_sqrtf+0xd8>)
 8001f8c:	4f15      	ldr	r7, [pc, #84]	@ (8001fe4 <__ieee754_sqrtf+0xdc>)
 8001f8e:	6830      	ldr	r0, [r6, #0]
 8001f90:	6839      	ldr	r1, [r7, #0]
 8001f92:	f7fe fcbf 	bl	8000914 <__aeabi_fsub>
 8001f96:	f8d6 8000 	ldr.w	r8, [r6]
 8001f9a:	4601      	mov	r1, r0
 8001f9c:	4640      	mov	r0, r8
 8001f9e:	f7fe ff6b 	bl	8000e78 <__aeabi_fcmple>
 8001fa2:	b150      	cbz	r0, 8001fba <__ieee754_sqrtf+0xb2>
 8001fa4:	6830      	ldr	r0, [r6, #0]
 8001fa6:	6839      	ldr	r1, [r7, #0]
 8001fa8:	f7fe fcb6 	bl	8000918 <__addsf3>
 8001fac:	6836      	ldr	r6, [r6, #0]
 8001fae:	4601      	mov	r1, r0
 8001fb0:	4630      	mov	r0, r6
 8001fb2:	f7fe ff57 	bl	8000e64 <__aeabi_fcmplt>
 8001fb6:	b170      	cbz	r0, 8001fd6 <__ieee754_sqrtf+0xce>
 8001fb8:	3402      	adds	r4, #2
 8001fba:	1064      	asrs	r4, r4, #1
 8001fbc:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8001fc0:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8001fc4:	e7b1      	b.n	8001f2a <__ieee754_sqrtf+0x22>
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	0218      	lsls	r0, r3, #8
 8001fca:	460a      	mov	r2, r1
 8001fcc:	f101 0101 	add.w	r1, r1, #1
 8001fd0:	d5f9      	bpl.n	8001fc6 <__ieee754_sqrtf+0xbe>
 8001fd2:	4252      	negs	r2, r2
 8001fd4:	e7bb      	b.n	8001f4e <__ieee754_sqrtf+0x46>
 8001fd6:	3401      	adds	r4, #1
 8001fd8:	f024 0401 	bic.w	r4, r4, #1
 8001fdc:	e7ed      	b.n	8001fba <__ieee754_sqrtf+0xb2>
 8001fde:	bf00      	nop
 8001fe0:	08002388 	.word	0x08002388
 8001fe4:	08002384 	.word	0x08002384

08001fe8 <__ieee754_atan2f>:
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fea:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8001fee:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	d805      	bhi.n	8002002 <__ieee754_atan2f+0x1a>
 8001ff6:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8001ffa:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8001ffe:	4607      	mov	r7, r0
 8002000:	d904      	bls.n	800200c <__ieee754_atan2f+0x24>
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fc88 	bl	8000918 <__addsf3>
 8002008:	4603      	mov	r3, r0
 800200a:	e010      	b.n	800202e <__ieee754_atan2f+0x46>
 800200c:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8002010:	d103      	bne.n	800201a <__ieee754_atan2f+0x32>
 8002012:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002016:	f000 b86f 	b.w	80020f8 <atanf>
 800201a:	178c      	asrs	r4, r1, #30
 800201c:	f004 0402 	and.w	r4, r4, #2
 8002020:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8002024:	b92a      	cbnz	r2, 8002032 <__ieee754_atan2f+0x4a>
 8002026:	2c02      	cmp	r4, #2
 8002028:	d04b      	beq.n	80020c2 <__ieee754_atan2f+0xda>
 800202a:	2c03      	cmp	r4, #3
 800202c:	d04b      	beq.n	80020c6 <__ieee754_atan2f+0xde>
 800202e:	4618      	mov	r0, r3
 8002030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002032:	b91e      	cbnz	r6, 800203c <__ieee754_atan2f+0x54>
 8002034:	2f00      	cmp	r7, #0
 8002036:	db4c      	blt.n	80020d2 <__ieee754_atan2f+0xea>
 8002038:	4b27      	ldr	r3, [pc, #156]	@ (80020d8 <__ieee754_atan2f+0xf0>)
 800203a:	e7f8      	b.n	800202e <__ieee754_atan2f+0x46>
 800203c:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8002040:	d10e      	bne.n	8002060 <__ieee754_atan2f+0x78>
 8002042:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8002046:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800204a:	d105      	bne.n	8002058 <__ieee754_atan2f+0x70>
 800204c:	2c02      	cmp	r4, #2
 800204e:	d83c      	bhi.n	80020ca <__ieee754_atan2f+0xe2>
 8002050:	4b22      	ldr	r3, [pc, #136]	@ (80020dc <__ieee754_atan2f+0xf4>)
 8002052:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002056:	e7ea      	b.n	800202e <__ieee754_atan2f+0x46>
 8002058:	2c02      	cmp	r4, #2
 800205a:	d838      	bhi.n	80020ce <__ieee754_atan2f+0xe6>
 800205c:	4b20      	ldr	r3, [pc, #128]	@ (80020e0 <__ieee754_atan2f+0xf8>)
 800205e:	e7f8      	b.n	8002052 <__ieee754_atan2f+0x6a>
 8002060:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8002064:	d0e6      	beq.n	8002034 <__ieee754_atan2f+0x4c>
 8002066:	1b92      	subs	r2, r2, r6
 8002068:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800206c:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8002070:	da17      	bge.n	80020a2 <__ieee754_atan2f+0xba>
 8002072:	2900      	cmp	r1, #0
 8002074:	da01      	bge.n	800207a <__ieee754_atan2f+0x92>
 8002076:	303c      	adds	r0, #60	@ 0x3c
 8002078:	db15      	blt.n	80020a6 <__ieee754_atan2f+0xbe>
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fe08 	bl	8000c90 <__aeabi_fdiv>
 8002080:	f000 f946 	bl	8002310 <fabsf>
 8002084:	f000 f838 	bl	80020f8 <atanf>
 8002088:	4603      	mov	r3, r0
 800208a:	2c01      	cmp	r4, #1
 800208c:	d00d      	beq.n	80020aa <__ieee754_atan2f+0xc2>
 800208e:	2c02      	cmp	r4, #2
 8002090:	d00e      	beq.n	80020b0 <__ieee754_atan2f+0xc8>
 8002092:	2c00      	cmp	r4, #0
 8002094:	d0cb      	beq.n	800202e <__ieee754_atan2f+0x46>
 8002096:	4913      	ldr	r1, [pc, #76]	@ (80020e4 <__ieee754_atan2f+0xfc>)
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fc3d 	bl	8000918 <__addsf3>
 800209e:	4912      	ldr	r1, [pc, #72]	@ (80020e8 <__ieee754_atan2f+0x100>)
 80020a0:	e00c      	b.n	80020bc <__ieee754_atan2f+0xd4>
 80020a2:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <__ieee754_atan2f+0xf0>)
 80020a4:	e7f1      	b.n	800208a <__ieee754_atan2f+0xa2>
 80020a6:	2300      	movs	r3, #0
 80020a8:	e7ef      	b.n	800208a <__ieee754_atan2f+0xa2>
 80020aa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80020ae:	e7be      	b.n	800202e <__ieee754_atan2f+0x46>
 80020b0:	490c      	ldr	r1, [pc, #48]	@ (80020e4 <__ieee754_atan2f+0xfc>)
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fc30 	bl	8000918 <__addsf3>
 80020b8:	4601      	mov	r1, r0
 80020ba:	480b      	ldr	r0, [pc, #44]	@ (80020e8 <__ieee754_atan2f+0x100>)
 80020bc:	f7fe fc2a 	bl	8000914 <__aeabi_fsub>
 80020c0:	e7a2      	b.n	8002008 <__ieee754_atan2f+0x20>
 80020c2:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <__ieee754_atan2f+0x100>)
 80020c4:	e7b3      	b.n	800202e <__ieee754_atan2f+0x46>
 80020c6:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <__ieee754_atan2f+0x104>)
 80020c8:	e7b1      	b.n	800202e <__ieee754_atan2f+0x46>
 80020ca:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <__ieee754_atan2f+0x108>)
 80020cc:	e7af      	b.n	800202e <__ieee754_atan2f+0x46>
 80020ce:	2300      	movs	r3, #0
 80020d0:	e7ad      	b.n	800202e <__ieee754_atan2f+0x46>
 80020d2:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <__ieee754_atan2f+0x10c>)
 80020d4:	e7ab      	b.n	800202e <__ieee754_atan2f+0x46>
 80020d6:	bf00      	nop
 80020d8:	3fc90fdb 	.word	0x3fc90fdb
 80020dc:	08002398 	.word	0x08002398
 80020e0:	0800238c 	.word	0x0800238c
 80020e4:	33bbbd2e 	.word	0x33bbbd2e
 80020e8:	40490fdb 	.word	0x40490fdb
 80020ec:	c0490fdb 	.word	0xc0490fdb
 80020f0:	3f490fdb 	.word	0x3f490fdb
 80020f4:	bfc90fdb 	.word	0xbfc90fdb

080020f8 <atanf>:
 80020f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020fc:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8002100:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 8002104:	4604      	mov	r4, r0
 8002106:	4680      	mov	r8, r0
 8002108:	d30e      	bcc.n	8002128 <atanf+0x30>
 800210a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800210e:	d904      	bls.n	800211a <atanf+0x22>
 8002110:	4601      	mov	r1, r0
 8002112:	f7fe fc01 	bl	8000918 <__addsf3>
 8002116:	4604      	mov	r4, r0
 8002118:	e003      	b.n	8002122 <atanf+0x2a>
 800211a:	2800      	cmp	r0, #0
 800211c:	f340 80ce 	ble.w	80022bc <atanf+0x1c4>
 8002120:	4c67      	ldr	r4, [pc, #412]	@ (80022c0 <atanf+0x1c8>)
 8002122:	4620      	mov	r0, r4
 8002124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002128:	4b66      	ldr	r3, [pc, #408]	@ (80022c4 <atanf+0x1cc>)
 800212a:	429d      	cmp	r5, r3
 800212c:	d80e      	bhi.n	800214c <atanf+0x54>
 800212e:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 8002132:	d208      	bcs.n	8002146 <atanf+0x4e>
 8002134:	4964      	ldr	r1, [pc, #400]	@ (80022c8 <atanf+0x1d0>)
 8002136:	f7fe fbef 	bl	8000918 <__addsf3>
 800213a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800213e:	f7fe feaf 	bl	8000ea0 <__aeabi_fcmpgt>
 8002142:	2800      	cmp	r0, #0
 8002144:	d1ed      	bne.n	8002122 <atanf+0x2a>
 8002146:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800214a:	e01c      	b.n	8002186 <atanf+0x8e>
 800214c:	f000 f8e0 	bl	8002310 <fabsf>
 8002150:	4b5e      	ldr	r3, [pc, #376]	@ (80022cc <atanf+0x1d4>)
 8002152:	4604      	mov	r4, r0
 8002154:	429d      	cmp	r5, r3
 8002156:	d87c      	bhi.n	8002252 <atanf+0x15a>
 8002158:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800215c:	429d      	cmp	r5, r3
 800215e:	d867      	bhi.n	8002230 <atanf+0x138>
 8002160:	4601      	mov	r1, r0
 8002162:	f7fe fbd9 	bl	8000918 <__addsf3>
 8002166:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800216a:	f7fe fbd3 	bl	8000914 <__aeabi_fsub>
 800216e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002172:	4605      	mov	r5, r0
 8002174:	4620      	mov	r0, r4
 8002176:	f7fe fbcf 	bl	8000918 <__addsf3>
 800217a:	4601      	mov	r1, r0
 800217c:	4628      	mov	r0, r5
 800217e:	f7fe fd87 	bl	8000c90 <__aeabi_fdiv>
 8002182:	2600      	movs	r6, #0
 8002184:	4604      	mov	r4, r0
 8002186:	4621      	mov	r1, r4
 8002188:	4620      	mov	r0, r4
 800218a:	f7fe fccd 	bl	8000b28 <__aeabi_fmul>
 800218e:	4601      	mov	r1, r0
 8002190:	4607      	mov	r7, r0
 8002192:	f7fe fcc9 	bl	8000b28 <__aeabi_fmul>
 8002196:	4605      	mov	r5, r0
 8002198:	494d      	ldr	r1, [pc, #308]	@ (80022d0 <atanf+0x1d8>)
 800219a:	f7fe fcc5 	bl	8000b28 <__aeabi_fmul>
 800219e:	494d      	ldr	r1, [pc, #308]	@ (80022d4 <atanf+0x1dc>)
 80021a0:	f7fe fbba 	bl	8000918 <__addsf3>
 80021a4:	4629      	mov	r1, r5
 80021a6:	f7fe fcbf 	bl	8000b28 <__aeabi_fmul>
 80021aa:	494b      	ldr	r1, [pc, #300]	@ (80022d8 <atanf+0x1e0>)
 80021ac:	f7fe fbb4 	bl	8000918 <__addsf3>
 80021b0:	4629      	mov	r1, r5
 80021b2:	f7fe fcb9 	bl	8000b28 <__aeabi_fmul>
 80021b6:	4949      	ldr	r1, [pc, #292]	@ (80022dc <atanf+0x1e4>)
 80021b8:	f7fe fbae 	bl	8000918 <__addsf3>
 80021bc:	4629      	mov	r1, r5
 80021be:	f7fe fcb3 	bl	8000b28 <__aeabi_fmul>
 80021c2:	4947      	ldr	r1, [pc, #284]	@ (80022e0 <atanf+0x1e8>)
 80021c4:	f7fe fba8 	bl	8000918 <__addsf3>
 80021c8:	4629      	mov	r1, r5
 80021ca:	f7fe fcad 	bl	8000b28 <__aeabi_fmul>
 80021ce:	4945      	ldr	r1, [pc, #276]	@ (80022e4 <atanf+0x1ec>)
 80021d0:	f7fe fba2 	bl	8000918 <__addsf3>
 80021d4:	4639      	mov	r1, r7
 80021d6:	f7fe fca7 	bl	8000b28 <__aeabi_fmul>
 80021da:	4943      	ldr	r1, [pc, #268]	@ (80022e8 <atanf+0x1f0>)
 80021dc:	4607      	mov	r7, r0
 80021de:	4628      	mov	r0, r5
 80021e0:	f7fe fca2 	bl	8000b28 <__aeabi_fmul>
 80021e4:	4941      	ldr	r1, [pc, #260]	@ (80022ec <atanf+0x1f4>)
 80021e6:	f7fe fb95 	bl	8000914 <__aeabi_fsub>
 80021ea:	4629      	mov	r1, r5
 80021ec:	f7fe fc9c 	bl	8000b28 <__aeabi_fmul>
 80021f0:	493f      	ldr	r1, [pc, #252]	@ (80022f0 <atanf+0x1f8>)
 80021f2:	f7fe fb8f 	bl	8000914 <__aeabi_fsub>
 80021f6:	4629      	mov	r1, r5
 80021f8:	f7fe fc96 	bl	8000b28 <__aeabi_fmul>
 80021fc:	493d      	ldr	r1, [pc, #244]	@ (80022f4 <atanf+0x1fc>)
 80021fe:	f7fe fb89 	bl	8000914 <__aeabi_fsub>
 8002202:	4629      	mov	r1, r5
 8002204:	f7fe fc90 	bl	8000b28 <__aeabi_fmul>
 8002208:	493b      	ldr	r1, [pc, #236]	@ (80022f8 <atanf+0x200>)
 800220a:	f7fe fb83 	bl	8000914 <__aeabi_fsub>
 800220e:	4629      	mov	r1, r5
 8002210:	f7fe fc8a 	bl	8000b28 <__aeabi_fmul>
 8002214:	4601      	mov	r1, r0
 8002216:	4638      	mov	r0, r7
 8002218:	f7fe fb7e 	bl	8000918 <__addsf3>
 800221c:	4621      	mov	r1, r4
 800221e:	f7fe fc83 	bl	8000b28 <__aeabi_fmul>
 8002222:	1c73      	adds	r3, r6, #1
 8002224:	4601      	mov	r1, r0
 8002226:	d133      	bne.n	8002290 <atanf+0x198>
 8002228:	4620      	mov	r0, r4
 800222a:	f7fe fb73 	bl	8000914 <__aeabi_fsub>
 800222e:	e772      	b.n	8002116 <atanf+0x1e>
 8002230:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002234:	f7fe fb6e 	bl	8000914 <__aeabi_fsub>
 8002238:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800223c:	4605      	mov	r5, r0
 800223e:	4620      	mov	r0, r4
 8002240:	f7fe fb6a 	bl	8000918 <__addsf3>
 8002244:	4601      	mov	r1, r0
 8002246:	4628      	mov	r0, r5
 8002248:	f7fe fd22 	bl	8000c90 <__aeabi_fdiv>
 800224c:	2601      	movs	r6, #1
 800224e:	4604      	mov	r4, r0
 8002250:	e799      	b.n	8002186 <atanf+0x8e>
 8002252:	4b2a      	ldr	r3, [pc, #168]	@ (80022fc <atanf+0x204>)
 8002254:	429d      	cmp	r5, r3
 8002256:	d814      	bhi.n	8002282 <atanf+0x18a>
 8002258:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800225c:	f7fe fb5a 	bl	8000914 <__aeabi_fsub>
 8002260:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8002264:	4605      	mov	r5, r0
 8002266:	4620      	mov	r0, r4
 8002268:	f7fe fc5e 	bl	8000b28 <__aeabi_fmul>
 800226c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002270:	f7fe fb52 	bl	8000918 <__addsf3>
 8002274:	4601      	mov	r1, r0
 8002276:	4628      	mov	r0, r5
 8002278:	f7fe fd0a 	bl	8000c90 <__aeabi_fdiv>
 800227c:	2602      	movs	r6, #2
 800227e:	4604      	mov	r4, r0
 8002280:	e781      	b.n	8002186 <atanf+0x8e>
 8002282:	4601      	mov	r1, r0
 8002284:	481e      	ldr	r0, [pc, #120]	@ (8002300 <atanf+0x208>)
 8002286:	f7fe fd03 	bl	8000c90 <__aeabi_fdiv>
 800228a:	2603      	movs	r6, #3
 800228c:	4604      	mov	r4, r0
 800228e:	e77a      	b.n	8002186 <atanf+0x8e>
 8002290:	4b1c      	ldr	r3, [pc, #112]	@ (8002304 <atanf+0x20c>)
 8002292:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8002296:	f7fe fb3d 	bl	8000914 <__aeabi_fsub>
 800229a:	4621      	mov	r1, r4
 800229c:	f7fe fb3a 	bl	8000914 <__aeabi_fsub>
 80022a0:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <atanf+0x210>)
 80022a2:	4601      	mov	r1, r0
 80022a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80022a8:	f7fe fb34 	bl	8000914 <__aeabi_fsub>
 80022ac:	f1b8 0f00 	cmp.w	r8, #0
 80022b0:	4604      	mov	r4, r0
 80022b2:	f6bf af36 	bge.w	8002122 <atanf+0x2a>
 80022b6:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80022ba:	e732      	b.n	8002122 <atanf+0x2a>
 80022bc:	4c13      	ldr	r4, [pc, #76]	@ (800230c <atanf+0x214>)
 80022be:	e730      	b.n	8002122 <atanf+0x2a>
 80022c0:	3fc90fdb 	.word	0x3fc90fdb
 80022c4:	3edfffff 	.word	0x3edfffff
 80022c8:	7149f2ca 	.word	0x7149f2ca
 80022cc:	3f97ffff 	.word	0x3f97ffff
 80022d0:	3c8569d7 	.word	0x3c8569d7
 80022d4:	3d4bda59 	.word	0x3d4bda59
 80022d8:	3d886b35 	.word	0x3d886b35
 80022dc:	3dba2e6e 	.word	0x3dba2e6e
 80022e0:	3e124925 	.word	0x3e124925
 80022e4:	3eaaaaab 	.word	0x3eaaaaab
 80022e8:	bd15a221 	.word	0xbd15a221
 80022ec:	3d6ef16b 	.word	0x3d6ef16b
 80022f0:	3d9d8795 	.word	0x3d9d8795
 80022f4:	3de38e38 	.word	0x3de38e38
 80022f8:	3e4ccccd 	.word	0x3e4ccccd
 80022fc:	401bffff 	.word	0x401bffff
 8002300:	bf800000 	.word	0xbf800000
 8002304:	080023a4 	.word	0x080023a4
 8002308:	080023b4 	.word	0x080023b4
 800230c:	bfc90fdb 	.word	0xbfc90fdb

08002310 <fabsf>:
 8002310:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002314:	4770      	bx	lr
	...

08002318 <__errno>:
 8002318:	4b01      	ldr	r3, [pc, #4]	@ (8002320 <__errno+0x8>)
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000004 	.word	0x20000004

08002324 <__libc_init_array>:
 8002324:	b570      	push	{r4, r5, r6, lr}
 8002326:	2600      	movs	r6, #0
 8002328:	4d0c      	ldr	r5, [pc, #48]	@ (800235c <__libc_init_array+0x38>)
 800232a:	4c0d      	ldr	r4, [pc, #52]	@ (8002360 <__libc_init_array+0x3c>)
 800232c:	1b64      	subs	r4, r4, r5
 800232e:	10a4      	asrs	r4, r4, #2
 8002330:	42a6      	cmp	r6, r4
 8002332:	d109      	bne.n	8002348 <__libc_init_array+0x24>
 8002334:	f000 f81a 	bl	800236c <_init>
 8002338:	2600      	movs	r6, #0
 800233a:	4d0a      	ldr	r5, [pc, #40]	@ (8002364 <__libc_init_array+0x40>)
 800233c:	4c0a      	ldr	r4, [pc, #40]	@ (8002368 <__libc_init_array+0x44>)
 800233e:	1b64      	subs	r4, r4, r5
 8002340:	10a4      	asrs	r4, r4, #2
 8002342:	42a6      	cmp	r6, r4
 8002344:	d105      	bne.n	8002352 <__libc_init_array+0x2e>
 8002346:	bd70      	pop	{r4, r5, r6, pc}
 8002348:	f855 3b04 	ldr.w	r3, [r5], #4
 800234c:	4798      	blx	r3
 800234e:	3601      	adds	r6, #1
 8002350:	e7ee      	b.n	8002330 <__libc_init_array+0xc>
 8002352:	f855 3b04 	ldr.w	r3, [r5], #4
 8002356:	4798      	blx	r3
 8002358:	3601      	adds	r6, #1
 800235a:	e7f2      	b.n	8002342 <__libc_init_array+0x1e>
 800235c:	080023c4 	.word	0x080023c4
 8002360:	080023c4 	.word	0x080023c4
 8002364:	080023c4 	.word	0x080023c4
 8002368:	080023c8 	.word	0x080023c8

0800236c <_init>:
 800236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236e:	bf00      	nop
 8002370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002372:	bc08      	pop	{r3}
 8002374:	469e      	mov	lr, r3
 8002376:	4770      	bx	lr

08002378 <_fini>:
 8002378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800237a:	bf00      	nop
 800237c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237e:	bc08      	pop	{r3}
 8002380:	469e      	mov	lr, r3
 8002382:	4770      	bx	lr
