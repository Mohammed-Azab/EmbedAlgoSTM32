
IMUReadingI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f44  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002054  08002054  00003054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002094  08002094  00004054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002094  08002094  00004054  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002094  08002094  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002094  08002094  00003094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002098  08002098  00003098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800209c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000054  080020f0  00004054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080020f0  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017a5  00000000  00000000  0000407d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007b2  00000000  00000000  00005822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000270  00000000  00000000  00005fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001cf  00000000  00000000  00006248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015dbc  00000000  00000000  00006417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000029ed  00000000  00000000  0001c1d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ef5b  00000000  00000000  0001ebc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009db1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ce4  00000000  00000000  0009db60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0009e844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000054 	.word	0x20000054
 800012c:	00000000 	.word	0x00000000
 8000130:	0800203c 	.word	0x0800203c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000058 	.word	0x20000058
 800014c:	0800203c 	.word	0x0800203c

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_frsub>:
 800075c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000760:	e002      	b.n	8000768 <__addsf3>
 8000762:	bf00      	nop

08000764 <__aeabi_fsub>:
 8000764:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000768 <__addsf3>:
 8000768:	0042      	lsls	r2, r0, #1
 800076a:	bf1f      	itttt	ne
 800076c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000770:	ea92 0f03 	teqne	r2, r3
 8000774:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000778:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077c:	d06a      	beq.n	8000854 <__addsf3+0xec>
 800077e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000782:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000786:	bfc1      	itttt	gt
 8000788:	18d2      	addgt	r2, r2, r3
 800078a:	4041      	eorgt	r1, r0
 800078c:	4048      	eorgt	r0, r1
 800078e:	4041      	eorgt	r1, r0
 8000790:	bfb8      	it	lt
 8000792:	425b      	neglt	r3, r3
 8000794:	2b19      	cmp	r3, #25
 8000796:	bf88      	it	hi
 8000798:	4770      	bxhi	lr
 800079a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800079e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80007a6:	bf18      	it	ne
 80007a8:	4240      	negne	r0, r0
 80007aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80007b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80007b6:	bf18      	it	ne
 80007b8:	4249      	negne	r1, r1
 80007ba:	ea92 0f03 	teq	r2, r3
 80007be:	d03f      	beq.n	8000840 <__addsf3+0xd8>
 80007c0:	f1a2 0201 	sub.w	r2, r2, #1
 80007c4:	fa41 fc03 	asr.w	ip, r1, r3
 80007c8:	eb10 000c 	adds.w	r0, r0, ip
 80007cc:	f1c3 0320 	rsb	r3, r3, #32
 80007d0:	fa01 f103 	lsl.w	r1, r1, r3
 80007d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	d502      	bpl.n	80007e0 <__addsf3+0x78>
 80007da:	4249      	negs	r1, r1
 80007dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007e4:	d313      	bcc.n	800080e <__addsf3+0xa6>
 80007e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007ea:	d306      	bcc.n	80007fa <__addsf3+0x92>
 80007ec:	0840      	lsrs	r0, r0, #1
 80007ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f2:	f102 0201 	add.w	r2, r2, #1
 80007f6:	2afe      	cmp	r2, #254	@ 0xfe
 80007f8:	d251      	bcs.n	800089e <__addsf3+0x136>
 80007fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000802:	bf08      	it	eq
 8000804:	f020 0001 	biceq.w	r0, r0, #1
 8000808:	ea40 0003 	orr.w	r0, r0, r3
 800080c:	4770      	bx	lr
 800080e:	0049      	lsls	r1, r1, #1
 8000810:	eb40 0000 	adc.w	r0, r0, r0
 8000814:	3a01      	subs	r2, #1
 8000816:	bf28      	it	cs
 8000818:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800081c:	d2ed      	bcs.n	80007fa <__addsf3+0x92>
 800081e:	fab0 fc80 	clz	ip, r0
 8000822:	f1ac 0c08 	sub.w	ip, ip, #8
 8000826:	ebb2 020c 	subs.w	r2, r2, ip
 800082a:	fa00 f00c 	lsl.w	r0, r0, ip
 800082e:	bfaa      	itet	ge
 8000830:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000834:	4252      	neglt	r2, r2
 8000836:	4318      	orrge	r0, r3
 8000838:	bfbc      	itt	lt
 800083a:	40d0      	lsrlt	r0, r2
 800083c:	4318      	orrlt	r0, r3
 800083e:	4770      	bx	lr
 8000840:	f092 0f00 	teq	r2, #0
 8000844:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000848:	bf06      	itte	eq
 800084a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800084e:	3201      	addeq	r2, #1
 8000850:	3b01      	subne	r3, #1
 8000852:	e7b5      	b.n	80007c0 <__addsf3+0x58>
 8000854:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000858:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800085c:	bf18      	it	ne
 800085e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000862:	d021      	beq.n	80008a8 <__addsf3+0x140>
 8000864:	ea92 0f03 	teq	r2, r3
 8000868:	d004      	beq.n	8000874 <__addsf3+0x10c>
 800086a:	f092 0f00 	teq	r2, #0
 800086e:	bf08      	it	eq
 8000870:	4608      	moveq	r0, r1
 8000872:	4770      	bx	lr
 8000874:	ea90 0f01 	teq	r0, r1
 8000878:	bf1c      	itt	ne
 800087a:	2000      	movne	r0, #0
 800087c:	4770      	bxne	lr
 800087e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000882:	d104      	bne.n	800088e <__addsf3+0x126>
 8000884:	0040      	lsls	r0, r0, #1
 8000886:	bf28      	it	cs
 8000888:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800088c:	4770      	bx	lr
 800088e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000892:	bf3c      	itt	cc
 8000894:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000898:	4770      	bxcc	lr
 800089a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800089e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80008a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008a6:	4770      	bx	lr
 80008a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008ac:	bf16      	itet	ne
 80008ae:	4608      	movne	r0, r1
 80008b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008b4:	4601      	movne	r1, r0
 80008b6:	0242      	lsls	r2, r0, #9
 80008b8:	bf06      	itte	eq
 80008ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008be:	ea90 0f01 	teqeq	r0, r1
 80008c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_ui2f>:
 80008c8:	f04f 0300 	mov.w	r3, #0
 80008cc:	e004      	b.n	80008d8 <__aeabi_i2f+0x8>
 80008ce:	bf00      	nop

080008d0 <__aeabi_i2f>:
 80008d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008d4:	bf48      	it	mi
 80008d6:	4240      	negmi	r0, r0
 80008d8:	ea5f 0c00 	movs.w	ip, r0
 80008dc:	bf08      	it	eq
 80008de:	4770      	bxeq	lr
 80008e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008e4:	4601      	mov	r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	e01c      	b.n	8000926 <__aeabi_l2f+0x2a>

080008ec <__aeabi_ul2f>:
 80008ec:	ea50 0201 	orrs.w	r2, r0, r1
 80008f0:	bf08      	it	eq
 80008f2:	4770      	bxeq	lr
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	e00a      	b.n	8000910 <__aeabi_l2f+0x14>
 80008fa:	bf00      	nop

080008fc <__aeabi_l2f>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000908:	d502      	bpl.n	8000910 <__aeabi_l2f+0x14>
 800090a:	4240      	negs	r0, r0
 800090c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000910:	ea5f 0c01 	movs.w	ip, r1
 8000914:	bf02      	ittt	eq
 8000916:	4684      	moveq	ip, r0
 8000918:	4601      	moveq	r1, r0
 800091a:	2000      	moveq	r0, #0
 800091c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000920:	bf08      	it	eq
 8000922:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000926:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800092a:	fabc f28c 	clz	r2, ip
 800092e:	3a08      	subs	r2, #8
 8000930:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000934:	db10      	blt.n	8000958 <__aeabi_l2f+0x5c>
 8000936:	fa01 fc02 	lsl.w	ip, r1, r2
 800093a:	4463      	add	r3, ip
 800093c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000940:	f1c2 0220 	rsb	r2, r2, #32
 8000944:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	eb43 0002 	adc.w	r0, r3, r2
 8000950:	bf08      	it	eq
 8000952:	f020 0001 	biceq.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	f102 0220 	add.w	r2, r2, #32
 800095c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000960:	f1c2 0220 	rsb	r2, r2, #32
 8000964:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000968:	fa21 f202 	lsr.w	r2, r1, r2
 800096c:	eb43 0002 	adc.w	r0, r3, r2
 8000970:	bf08      	it	eq
 8000972:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000976:	4770      	bx	lr

08000978 <__aeabi_fmul>:
 8000978:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800097c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000980:	bf1e      	ittt	ne
 8000982:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000986:	ea92 0f0c 	teqne	r2, ip
 800098a:	ea93 0f0c 	teqne	r3, ip
 800098e:	d06f      	beq.n	8000a70 <__aeabi_fmul+0xf8>
 8000990:	441a      	add	r2, r3
 8000992:	ea80 0c01 	eor.w	ip, r0, r1
 8000996:	0240      	lsls	r0, r0, #9
 8000998:	bf18      	it	ne
 800099a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800099e:	d01e      	beq.n	80009de <__aeabi_fmul+0x66>
 80009a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009ac:	fba0 3101 	umull	r3, r1, r0, r1
 80009b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80009b8:	bf3e      	ittt	cc
 80009ba:	0049      	lslcc	r1, r1, #1
 80009bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009c0:	005b      	lslcc	r3, r3, #1
 80009c2:	ea40 0001 	orr.w	r0, r0, r1
 80009c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80009ca:	2afd      	cmp	r2, #253	@ 0xfd
 80009cc:	d81d      	bhi.n	8000a0a <__aeabi_fmul+0x92>
 80009ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80009d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d6:	bf08      	it	eq
 80009d8:	f020 0001 	biceq.w	r0, r0, #1
 80009dc:	4770      	bx	lr
 80009de:	f090 0f00 	teq	r0, #0
 80009e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009e6:	bf08      	it	eq
 80009e8:	0249      	lsleq	r1, r1, #9
 80009ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80009f2:	3a7f      	subs	r2, #127	@ 0x7f
 80009f4:	bfc2      	ittt	gt
 80009f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80009fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009fe:	4770      	bxgt	lr
 8000a00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a04:	f04f 0300 	mov.w	r3, #0
 8000a08:	3a01      	subs	r2, #1
 8000a0a:	dc5d      	bgt.n	8000ac8 <__aeabi_fmul+0x150>
 8000a0c:	f112 0f19 	cmn.w	r2, #25
 8000a10:	bfdc      	itt	le
 8000a12:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a16:	4770      	bxle	lr
 8000a18:	f1c2 0200 	rsb	r2, r2, #0
 8000a1c:	0041      	lsls	r1, r0, #1
 8000a1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a22:	f1c2 0220 	rsb	r2, r2, #32
 8000a26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a2e:	f140 0000 	adc.w	r0, r0, #0
 8000a32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a36:	bf08      	it	eq
 8000a38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a3c:	4770      	bx	lr
 8000a3e:	f092 0f00 	teq	r2, #0
 8000a42:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a46:	bf02      	ittt	eq
 8000a48:	0040      	lsleq	r0, r0, #1
 8000a4a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a4e:	3a01      	subeq	r2, #1
 8000a50:	d0f9      	beq.n	8000a46 <__aeabi_fmul+0xce>
 8000a52:	ea40 000c 	orr.w	r0, r0, ip
 8000a56:	f093 0f00 	teq	r3, #0
 8000a5a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a5e:	bf02      	ittt	eq
 8000a60:	0049      	lsleq	r1, r1, #1
 8000a62:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a66:	3b01      	subeq	r3, #1
 8000a68:	d0f9      	beq.n	8000a5e <__aeabi_fmul+0xe6>
 8000a6a:	ea41 010c 	orr.w	r1, r1, ip
 8000a6e:	e78f      	b.n	8000990 <__aeabi_fmul+0x18>
 8000a70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a74:	ea92 0f0c 	teq	r2, ip
 8000a78:	bf18      	it	ne
 8000a7a:	ea93 0f0c 	teqne	r3, ip
 8000a7e:	d00a      	beq.n	8000a96 <__aeabi_fmul+0x11e>
 8000a80:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a84:	bf18      	it	ne
 8000a86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a8a:	d1d8      	bne.n	8000a3e <__aeabi_fmul+0xc6>
 8000a8c:	ea80 0001 	eor.w	r0, r0, r1
 8000a90:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000a94:	4770      	bx	lr
 8000a96:	f090 0f00 	teq	r0, #0
 8000a9a:	bf17      	itett	ne
 8000a9c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	f091 0f00 	teqne	r1, #0
 8000aa6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000aaa:	d014      	beq.n	8000ad6 <__aeabi_fmul+0x15e>
 8000aac:	ea92 0f0c 	teq	r2, ip
 8000ab0:	d101      	bne.n	8000ab6 <__aeabi_fmul+0x13e>
 8000ab2:	0242      	lsls	r2, r0, #9
 8000ab4:	d10f      	bne.n	8000ad6 <__aeabi_fmul+0x15e>
 8000ab6:	ea93 0f0c 	teq	r3, ip
 8000aba:	d103      	bne.n	8000ac4 <__aeabi_fmul+0x14c>
 8000abc:	024b      	lsls	r3, r1, #9
 8000abe:	bf18      	it	ne
 8000ac0:	4608      	movne	r0, r1
 8000ac2:	d108      	bne.n	8000ad6 <__aeabi_fmul+0x15e>
 8000ac4:	ea80 0001 	eor.w	r0, r0, r1
 8000ac8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ada:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_fdiv>:
 8000ae0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ae4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ae8:	bf1e      	ittt	ne
 8000aea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aee:	ea92 0f0c 	teqne	r2, ip
 8000af2:	ea93 0f0c 	teqne	r3, ip
 8000af6:	d069      	beq.n	8000bcc <__aeabi_fdiv+0xec>
 8000af8:	eba2 0203 	sub.w	r2, r2, r3
 8000afc:	ea80 0c01 	eor.w	ip, r0, r1
 8000b00:	0249      	lsls	r1, r1, #9
 8000b02:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b06:	d037      	beq.n	8000b78 <__aeabi_fdiv+0x98>
 8000b08:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b0c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b10:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b14:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	bf38      	it	cc
 8000b1c:	005b      	lslcc	r3, r3, #1
 8000b1e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b22:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b26:	428b      	cmp	r3, r1
 8000b28:	bf24      	itt	cs
 8000b2a:	1a5b      	subcs	r3, r3, r1
 8000b2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b30:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b34:	bf24      	itt	cs
 8000b36:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b3a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b3e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b42:	bf24      	itt	cs
 8000b44:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b48:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b4c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b50:	bf24      	itt	cs
 8000b52:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b56:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b5a:	011b      	lsls	r3, r3, #4
 8000b5c:	bf18      	it	ne
 8000b5e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b62:	d1e0      	bne.n	8000b26 <__aeabi_fdiv+0x46>
 8000b64:	2afd      	cmp	r2, #253	@ 0xfd
 8000b66:	f63f af50 	bhi.w	8000a0a <__aeabi_fmul+0x92>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b7c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b80:	327f      	adds	r2, #127	@ 0x7f
 8000b82:	bfc2      	ittt	gt
 8000b84:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b88:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b8c:	4770      	bxgt	lr
 8000b8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b92:	f04f 0300 	mov.w	r3, #0
 8000b96:	3a01      	subs	r2, #1
 8000b98:	e737      	b.n	8000a0a <__aeabi_fmul+0x92>
 8000b9a:	f092 0f00 	teq	r2, #0
 8000b9e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ba2:	bf02      	ittt	eq
 8000ba4:	0040      	lsleq	r0, r0, #1
 8000ba6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000baa:	3a01      	subeq	r2, #1
 8000bac:	d0f9      	beq.n	8000ba2 <__aeabi_fdiv+0xc2>
 8000bae:	ea40 000c 	orr.w	r0, r0, ip
 8000bb2:	f093 0f00 	teq	r3, #0
 8000bb6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bba:	bf02      	ittt	eq
 8000bbc:	0049      	lsleq	r1, r1, #1
 8000bbe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bc2:	3b01      	subeq	r3, #1
 8000bc4:	d0f9      	beq.n	8000bba <__aeabi_fdiv+0xda>
 8000bc6:	ea41 010c 	orr.w	r1, r1, ip
 8000bca:	e795      	b.n	8000af8 <__aeabi_fdiv+0x18>
 8000bcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bd0:	ea92 0f0c 	teq	r2, ip
 8000bd4:	d108      	bne.n	8000be8 <__aeabi_fdiv+0x108>
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	f47f af7d 	bne.w	8000ad6 <__aeabi_fmul+0x15e>
 8000bdc:	ea93 0f0c 	teq	r3, ip
 8000be0:	f47f af70 	bne.w	8000ac4 <__aeabi_fmul+0x14c>
 8000be4:	4608      	mov	r0, r1
 8000be6:	e776      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000be8:	ea93 0f0c 	teq	r3, ip
 8000bec:	d104      	bne.n	8000bf8 <__aeabi_fdiv+0x118>
 8000bee:	024b      	lsls	r3, r1, #9
 8000bf0:	f43f af4c 	beq.w	8000a8c <__aeabi_fmul+0x114>
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	e76e      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000bf8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000bfc:	bf18      	it	ne
 8000bfe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c02:	d1ca      	bne.n	8000b9a <__aeabi_fdiv+0xba>
 8000c04:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c08:	f47f af5c 	bne.w	8000ac4 <__aeabi_fmul+0x14c>
 8000c0c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c10:	f47f af3c 	bne.w	8000a8c <__aeabi_fmul+0x114>
 8000c14:	e75f      	b.n	8000ad6 <__aeabi_fmul+0x15e>
 8000c16:	bf00      	nop

08000c18 <__gesf2>:
 8000c18:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000c1c:	e006      	b.n	8000c2c <__cmpsf2+0x4>
 8000c1e:	bf00      	nop

08000c20 <__lesf2>:
 8000c20:	f04f 0c01 	mov.w	ip, #1
 8000c24:	e002      	b.n	8000c2c <__cmpsf2+0x4>
 8000c26:	bf00      	nop

08000c28 <__cmpsf2>:
 8000c28:	f04f 0c01 	mov.w	ip, #1
 8000c2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d011      	beq.n	8000c68 <__cmpsf2+0x40>
 8000c44:	b001      	add	sp, #4
 8000c46:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c4a:	bf18      	it	ne
 8000c4c:	ea90 0f01 	teqne	r0, r1
 8000c50:	bf58      	it	pl
 8000c52:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c56:	bf88      	it	hi
 8000c58:	17c8      	asrhi	r0, r1, #31
 8000c5a:	bf38      	it	cc
 8000c5c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c60:	bf18      	it	ne
 8000c62:	f040 0001 	orrne.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c6c:	d102      	bne.n	8000c74 <__cmpsf2+0x4c>
 8000c6e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c72:	d105      	bne.n	8000c80 <__cmpsf2+0x58>
 8000c74:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c78:	d1e4      	bne.n	8000c44 <__cmpsf2+0x1c>
 8000c7a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c7e:	d0e1      	beq.n	8000c44 <__cmpsf2+0x1c>
 8000c80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_cfrcmple>:
 8000c88:	4684      	mov	ip, r0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	4661      	mov	r1, ip
 8000c8e:	e7ff      	b.n	8000c90 <__aeabi_cfcmpeq>

08000c90 <__aeabi_cfcmpeq>:
 8000c90:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c92:	f7ff ffc9 	bl	8000c28 <__cmpsf2>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	bf48      	it	mi
 8000c9a:	f110 0f00 	cmnmi.w	r0, #0
 8000c9e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ca0 <__aeabi_fcmpeq>:
 8000ca0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca4:	f7ff fff4 	bl	8000c90 <__aeabi_cfcmpeq>
 8000ca8:	bf0c      	ite	eq
 8000caa:	2001      	moveq	r0, #1
 8000cac:	2000      	movne	r0, #0
 8000cae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_fcmplt>:
 8000cb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb8:	f7ff ffea 	bl	8000c90 <__aeabi_cfcmpeq>
 8000cbc:	bf34      	ite	cc
 8000cbe:	2001      	movcc	r0, #1
 8000cc0:	2000      	movcs	r0, #0
 8000cc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_fcmple>:
 8000cc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ccc:	f7ff ffe0 	bl	8000c90 <__aeabi_cfcmpeq>
 8000cd0:	bf94      	ite	ls
 8000cd2:	2001      	movls	r0, #1
 8000cd4:	2000      	movhi	r0, #0
 8000cd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cda:	bf00      	nop

08000cdc <__aeabi_fcmpge>:
 8000cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce0:	f7ff ffd2 	bl	8000c88 <__aeabi_cfrcmple>
 8000ce4:	bf94      	ite	ls
 8000ce6:	2001      	movls	r0, #1
 8000ce8:	2000      	movhi	r0, #0
 8000cea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cee:	bf00      	nop

08000cf0 <__aeabi_fcmpgt>:
 8000cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf4:	f7ff ffc8 	bl	8000c88 <__aeabi_cfrcmple>
 8000cf8:	bf34      	ite	cc
 8000cfa:	2001      	movcc	r0, #1
 8000cfc:	2000      	movcs	r0, #0
 8000cfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d02:	bf00      	nop

08000d04 <__aeabi_fcmpun>:
 8000d04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d10:	d102      	bne.n	8000d18 <__aeabi_fcmpun+0x14>
 8000d12:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d16:	d108      	bne.n	8000d2a <__aeabi_fcmpun+0x26>
 8000d18:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d1c:	d102      	bne.n	8000d24 <__aeabi_fcmpun+0x20>
 8000d1e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d22:	d102      	bne.n	8000d2a <__aeabi_fcmpun+0x26>
 8000d24:	f04f 0000 	mov.w	r0, #0
 8000d28:	4770      	bx	lr
 8000d2a:	f04f 0001 	mov.w	r0, #1
 8000d2e:	4770      	bx	lr

08000d30 <Kalman_getAngle>:
    kf->P[0][1] = 0;
    kf->P[1][0] = 0;
    kf->P[1][1] = 0;
}

float Kalman_getAngle(Kalman_t *kf, float newAngle, float newRate, float dt) {
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b08b      	sub	sp, #44	@ 0x2c
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
 8000d3c:	603b      	str	r3, [r7, #0]
    // Predict
    kf->rate = newRate - kf->bias;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fd0d 	bl	8000764 <__aeabi_fsub>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	609a      	str	r2, [r3, #8]
    kf->angle += dt * kf->rate;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681c      	ldr	r4, [r3, #0]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	6839      	ldr	r1, [r7, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fe0b 	bl	8000978 <__aeabi_fmul>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4619      	mov	r1, r3
 8000d66:	4620      	mov	r0, r4
 8000d68:	f7ff fcfe 	bl	8000768 <__addsf3>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	601a      	str	r2, [r3, #0]

    kf->P[0][0] += dt * (dt*kf->P[1][1] - kf->P[0][1] - kf->P[1][0] + Q_angle);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	68dc      	ldr	r4, [r3, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	6839      	ldr	r1, [r7, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fdfa 	bl	8000978 <__aeabi_fmul>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4610      	mov	r0, r2
 8000d90:	f7ff fce8 	bl	8000764 <__aeabi_fsub>
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4610      	mov	r0, r2
 8000da0:	f7ff fce0 	bl	8000764 <__aeabi_fsub>
 8000da4:	4603      	mov	r3, r0
 8000da6:	4967      	ldr	r1, [pc, #412]	@ (8000f44 <Kalman_getAngle+0x214>)
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fcdd 	bl	8000768 <__addsf3>
 8000dae:	4603      	mov	r3, r0
 8000db0:	6839      	ldr	r1, [r7, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fde0 	bl	8000978 <__aeabi_fmul>
 8000db8:	4603      	mov	r3, r0
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f7ff fcd3 	bl	8000768 <__addsf3>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	60da      	str	r2, [r3, #12]
    kf->P[0][1] -= dt * kf->P[1][1];
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	691c      	ldr	r4, [r3, #16]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	6839      	ldr	r1, [r7, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fdcf 	bl	8000978 <__aeabi_fmul>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4620      	mov	r0, r4
 8000de0:	f7ff fcc0 	bl	8000764 <__aeabi_fsub>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	611a      	str	r2, [r3, #16]
    kf->P[1][0] -= dt * kf->P[1][1];
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	695c      	ldr	r4, [r3, #20]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	6839      	ldr	r1, [r7, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fdbe 	bl	8000978 <__aeabi_fmul>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4620      	mov	r0, r4
 8000e02:	f7ff fcaf 	bl	8000764 <__aeabi_fsub>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	615a      	str	r2, [r3, #20]
    kf->P[1][1] += Q_bias * dt;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	699c      	ldr	r4, [r3, #24]
 8000e12:	494d      	ldr	r1, [pc, #308]	@ (8000f48 <Kalman_getAngle+0x218>)
 8000e14:	6838      	ldr	r0, [r7, #0]
 8000e16:	f7ff fdaf 	bl	8000978 <__aeabi_fmul>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f7ff fca2 	bl	8000768 <__addsf3>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	619a      	str	r2, [r3, #24]

    // Update
    float S = kf->P[0][0] + R_measure;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	4946      	ldr	r1, [pc, #280]	@ (8000f4c <Kalman_getAngle+0x21c>)
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fc98 	bl	8000768 <__addsf3>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    float K[2];
    K[0] = kf->P[0][0] / S;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fe4c 	bl	8000ae0 <__aeabi_fdiv>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	613b      	str	r3, [r7, #16]
    K[1] = kf->P[1][0] / S;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fe44 	bl	8000ae0 <__aeabi_fdiv>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	617b      	str	r3, [r7, #20]

    float y = newAngle - kf->angle;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	68b8      	ldr	r0, [r7, #8]
 8000e64:	f7ff fc7e 	bl	8000764 <__aeabi_fsub>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	623b      	str	r3, [r7, #32]

    kf->angle += K[0] * y;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681c      	ldr	r4, [r3, #0]
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	6a39      	ldr	r1, [r7, #32]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fd7f 	bl	8000978 <__aeabi_fmul>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4620      	mov	r0, r4
 8000e80:	f7ff fc72 	bl	8000768 <__addsf3>
 8000e84:	4603      	mov	r3, r0
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	601a      	str	r2, [r3, #0]
    kf->bias += K[1] * y;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	685c      	ldr	r4, [r3, #4]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	6a39      	ldr	r1, [r7, #32]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fd6f 	bl	8000978 <__aeabi_fmul>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	f7ff fc62 	bl	8000768 <__addsf3>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	605a      	str	r2, [r3, #4]

    float P00_temp = kf->P[0][0];
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61fb      	str	r3, [r7, #28]
    float P01_temp = kf->P[0][1];
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	61bb      	str	r3, [r7, #24]

    kf->P[0][0] -= K[0] * P00_temp;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	68dc      	ldr	r4, [r3, #12]
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	69f9      	ldr	r1, [r7, #28]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fd59 	bl	8000978 <__aeabi_fmul>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4620      	mov	r0, r4
 8000ecc:	f7ff fc4a 	bl	8000764 <__aeabi_fsub>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	60da      	str	r2, [r3, #12]
    kf->P[0][1] -= K[0] * P01_temp;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	691c      	ldr	r4, [r3, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	69b9      	ldr	r1, [r7, #24]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fd49 	bl	8000978 <__aeabi_fmul>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4620      	mov	r0, r4
 8000eec:	f7ff fc3a 	bl	8000764 <__aeabi_fsub>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
    kf->P[1][0] -= K[1] * P00_temp;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	695c      	ldr	r4, [r3, #20]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	69f9      	ldr	r1, [r7, #28]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fd39 	bl	8000978 <__aeabi_fmul>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	f7ff fc2a 	bl	8000764 <__aeabi_fsub>
 8000f10:	4603      	mov	r3, r0
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	615a      	str	r2, [r3, #20]
    kf->P[1][1] -= K[1] * P01_temp;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	699c      	ldr	r4, [r3, #24]
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	69b9      	ldr	r1, [r7, #24]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fd29 	bl	8000978 <__aeabi_fmul>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f7ff fc1a 	bl	8000764 <__aeabi_fsub>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	619a      	str	r2, [r3, #24]

    return kf->angle;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	372c      	adds	r7, #44	@ 0x2c
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	3a83126f 	.word	0x3a83126f
 8000f48:	3b449ba6 	.word	0x3b449ba6
 8000f4c:	3cf5c28f 	.word	0x3cf5c28f

08000f50 <main>:
float gx, gy, gz;      // Gyroscope (°/s)




int main(void){
 8000f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af04      	add	r7, sp, #16
	enableClk();
 8000f56:	f000 f9ff 	bl	8001358 <enableClk>
	configureIO();
 8000f5a:	f000 f9e3 	bl	8001324 <configureIO>


	Kp = 5.0f;
 8000f5e:	4b27      	ldr	r3, [pc, #156]	@ (8000ffc <main+0xac>)
 8000f60:	4a27      	ldr	r2, [pc, #156]	@ (8001000 <main+0xb0>)
 8000f62:	601a      	str	r2, [r3, #0]
	Ki = 0.5f;
 8000f64:	4b27      	ldr	r3, [pc, #156]	@ (8001004 <main+0xb4>)
 8000f66:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000f6a:	601a      	str	r2, [r3, #0]
	Kd = 0.8f;
 8000f6c:	4b26      	ldr	r3, [pc, #152]	@ (8001008 <main+0xb8>)
 8000f6e:	4a27      	ldr	r2, [pc, #156]	@ (800100c <main+0xbc>)
 8000f70:	601a      	str	r2, [r3, #0]

	initADC2();
 8000f72:	f000 fa79 	bl	8001468 <initADC2>
	initPWM();
 8000f76:	f000 fb4b 	bl	8001610 <initPWM>
	initI2C();
 8000f7a:	f000 fb95 	bl	80016a8 <initI2C>
	initIMU();
 8000f7e:	f000 fbc3 	bl	8001708 <initIMU>


while (1) {


	freeMotor();
 8000f82:	f000 fb37 	bl	80015f4 <freeMotor>

	readIMUData(&ax, &ay, &az, &gx, &gy, &gz);
 8000f86:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <main+0xc0>)
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <main+0xc4>)
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <main+0xc8>)
 8000f90:	4a22      	ldr	r2, [pc, #136]	@ (800101c <main+0xcc>)
 8000f92:	4923      	ldr	r1, [pc, #140]	@ (8001020 <main+0xd0>)
 8000f94:	4823      	ldr	r0, [pc, #140]	@ (8001024 <main+0xd4>)
 8000f96:	f000 fbfd 	bl	8001794 <readIMUData>

	if (gx !=0){
 8000f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <main+0xc8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f04f 0100 	mov.w	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fe7c 	bl	8000ca0 <__aeabi_fcmpeq>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d103      	bne.n	8000fb6 <main+0x66>
			turnON(2);
 8000fae:	2002      	movs	r0, #2
 8000fb0:	f000 f9fe 	bl	80013b0 <turnON>
 8000fb4:	e002      	b.n	8000fbc <main+0x6c>
		}
		else {
			turnOFF(2);
 8000fb6:	2002      	movs	r0, #2
 8000fb8:	f000 fa28 	bl	800140c <turnOFF>
		}
	if (gy !=0){
 8000fbc:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <main+0xc4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f04f 0100 	mov.w	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe6b 	bl	8000ca0 <__aeabi_fcmpeq>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d103      	bne.n	8000fd8 <main+0x88>
				turnON(2);
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f000 f9ed 	bl	80013b0 <turnON>
 8000fd6:	e002      	b.n	8000fde <main+0x8e>
			}
			else {
				turnOFF(2);
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f000 fa17 	bl	800140c <turnOFF>
			}
	if (gz !=0){
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <main+0xc0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f04f 0100 	mov.w	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fe5a 	bl	8000ca0 <__aeabi_fcmpeq>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d11a      	bne.n	8001028 <main+0xd8>
					turnON(2);
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f000 f9dc 	bl	80013b0 <turnON>
 8000ff8:	e019      	b.n	800102e <main+0xde>
 8000ffa:	bf00      	nop
 8000ffc:	200000a8 	.word	0x200000a8
 8001000:	40a00000 	.word	0x40a00000
 8001004:	200000ac 	.word	0x200000ac
 8001008:	200000b0 	.word	0x200000b0
 800100c:	3f4ccccd 	.word	0x3f4ccccd
 8001010:	200000dc 	.word	0x200000dc
 8001014:	200000d8 	.word	0x200000d8
 8001018:	200000d4 	.word	0x200000d4
 800101c:	200000d0 	.word	0x200000d0
 8001020:	200000cc 	.word	0x200000cc
 8001024:	200000c8 	.word	0x200000c8
				}
				else {
					turnOFF(2);
 8001028:	2002      	movs	r0, #2
 800102a:	f000 f9ef 	bl	800140c <turnOFF>
				}

	setAngles(ax, ay, az, gx, gy, gz, &roll, &pitch);
 800102e:	4b91      	ldr	r3, [pc, #580]	@ (8001274 <main+0x324>)
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	4b91      	ldr	r3, [pc, #580]	@ (8001278 <main+0x328>)
 8001034:	6819      	ldr	r1, [r3, #0]
 8001036:	4b91      	ldr	r3, [pc, #580]	@ (800127c <main+0x32c>)
 8001038:	681c      	ldr	r4, [r3, #0]
 800103a:	4b91      	ldr	r3, [pc, #580]	@ (8001280 <main+0x330>)
 800103c:	681d      	ldr	r5, [r3, #0]
 800103e:	4b91      	ldr	r3, [pc, #580]	@ (8001284 <main+0x334>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a91      	ldr	r2, [pc, #580]	@ (8001288 <main+0x338>)
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	4e91      	ldr	r6, [pc, #580]	@ (800128c <main+0x33c>)
 8001048:	9603      	str	r6, [sp, #12]
 800104a:	4e91      	ldr	r6, [pc, #580]	@ (8001290 <main+0x340>)
 800104c:	9602      	str	r6, [sp, #8]
 800104e:	9201      	str	r2, [sp, #4]
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	462b      	mov	r3, r5
 8001054:	4622      	mov	r2, r4
 8001056:	f000 fcc7 	bl	80019e8 <setAngles>

	yaw += gz * DT;
 800105a:	4b8b      	ldr	r3, [pc, #556]	@ (8001288 <main+0x338>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	498d      	ldr	r1, [pc, #564]	@ (8001294 <main+0x344>)
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fc89 	bl	8000978 <__aeabi_fmul>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b8b      	ldr	r3, [pc, #556]	@ (8001298 <main+0x348>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	4610      	mov	r0, r2
 8001072:	f7ff fb79 	bl	8000768 <__addsf3>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4b87      	ldr	r3, [pc, #540]	@ (8001298 <main+0x348>)
 800107c:	601a      	str	r2, [r3, #0]

	if (yaw >= 360.0f) yaw -= 360.0f;
 800107e:	4b86      	ldr	r3, [pc, #536]	@ (8001298 <main+0x348>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4986      	ldr	r1, [pc, #536]	@ (800129c <main+0x34c>)
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fe29 	bl	8000cdc <__aeabi_fcmpge>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d009      	beq.n	80010a4 <main+0x154>
 8001090:	4b81      	ldr	r3, [pc, #516]	@ (8001298 <main+0x348>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4981      	ldr	r1, [pc, #516]	@ (800129c <main+0x34c>)
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fb64 	bl	8000764 <__aeabi_fsub>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	4b7d      	ldr	r3, [pc, #500]	@ (8001298 <main+0x348>)
 80010a2:	601a      	str	r2, [r3, #0]
	if (yaw < 0.0f) yaw += 360.0f;
 80010a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001298 <main+0x348>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f04f 0100 	mov.w	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fe01 	bl	8000cb4 <__aeabi_fcmplt>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d009      	beq.n	80010cc <main+0x17c>
 80010b8:	4b77      	ldr	r3, [pc, #476]	@ (8001298 <main+0x348>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4977      	ldr	r1, [pc, #476]	@ (800129c <main+0x34c>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fb52 	bl	8000768 <__addsf3>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b73      	ldr	r3, [pc, #460]	@ (8001298 <main+0x348>)
 80010ca:	601a      	str	r2, [r3, #0]
	if (roll >= 360.0f) roll -= 360.0f;
 80010cc:	4b70      	ldr	r3, [pc, #448]	@ (8001290 <main+0x340>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4972      	ldr	r1, [pc, #456]	@ (800129c <main+0x34c>)
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fe02 	bl	8000cdc <__aeabi_fcmpge>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d009      	beq.n	80010f2 <main+0x1a2>
 80010de:	4b6c      	ldr	r3, [pc, #432]	@ (8001290 <main+0x340>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	496e      	ldr	r1, [pc, #440]	@ (800129c <main+0x34c>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fb3d 	bl	8000764 <__aeabi_fsub>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b68      	ldr	r3, [pc, #416]	@ (8001290 <main+0x340>)
 80010f0:	601a      	str	r2, [r3, #0]
	if (roll < 0.0f) roll += 360.0f;
 80010f2:	4b67      	ldr	r3, [pc, #412]	@ (8001290 <main+0x340>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f04f 0100 	mov.w	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fdda 	bl	8000cb4 <__aeabi_fcmplt>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d009      	beq.n	800111a <main+0x1ca>
 8001106:	4b62      	ldr	r3, [pc, #392]	@ (8001290 <main+0x340>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4964      	ldr	r1, [pc, #400]	@ (800129c <main+0x34c>)
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fb2b 	bl	8000768 <__addsf3>
 8001112:	4603      	mov	r3, r0
 8001114:	461a      	mov	r2, r3
 8001116:	4b5e      	ldr	r3, [pc, #376]	@ (8001290 <main+0x340>)
 8001118:	601a      	str	r2, [r3, #0]
	if (pitch >= 360.0f) pitch -= 360.0f;
 800111a:	4b5c      	ldr	r3, [pc, #368]	@ (800128c <main+0x33c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	495f      	ldr	r1, [pc, #380]	@ (800129c <main+0x34c>)
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fddb 	bl	8000cdc <__aeabi_fcmpge>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d009      	beq.n	8001140 <main+0x1f0>
 800112c:	4b57      	ldr	r3, [pc, #348]	@ (800128c <main+0x33c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	495a      	ldr	r1, [pc, #360]	@ (800129c <main+0x34c>)
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fb16 	bl	8000764 <__aeabi_fsub>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b53      	ldr	r3, [pc, #332]	@ (800128c <main+0x33c>)
 800113e:	601a      	str	r2, [r3, #0]
	if (pitch < 0.0f) pitch += 360.0f;
 8001140:	4b52      	ldr	r3, [pc, #328]	@ (800128c <main+0x33c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f04f 0100 	mov.w	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fdb3 	bl	8000cb4 <__aeabi_fcmplt>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d009      	beq.n	8001168 <main+0x218>
 8001154:	4b4d      	ldr	r3, [pc, #308]	@ (800128c <main+0x33c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4950      	ldr	r1, [pc, #320]	@ (800129c <main+0x34c>)
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fb04 	bl	8000768 <__addsf3>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	4b49      	ldr	r3, [pc, #292]	@ (800128c <main+0x33c>)
 8001166:	601a      	str	r2, [r3, #0]

	if (roll > 180.0f) roll = 180.0f;
 8001168:	4b49      	ldr	r3, [pc, #292]	@ (8001290 <main+0x340>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	494c      	ldr	r1, [pc, #304]	@ (80012a0 <main+0x350>)
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fdbe 	bl	8000cf0 <__aeabi_fcmpgt>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <main+0x230>
 800117a:	4b45      	ldr	r3, [pc, #276]	@ (8001290 <main+0x340>)
 800117c:	4a48      	ldr	r2, [pc, #288]	@ (80012a0 <main+0x350>)
 800117e:	601a      	str	r2, [r3, #0]
	if (yaw > 180.0f) yaw = 180.0f;
 8001180:	4b45      	ldr	r3, [pc, #276]	@ (8001298 <main+0x348>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4946      	ldr	r1, [pc, #280]	@ (80012a0 <main+0x350>)
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fdb2 	bl	8000cf0 <__aeabi_fcmpgt>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <main+0x248>
 8001192:	4b41      	ldr	r3, [pc, #260]	@ (8001298 <main+0x348>)
 8001194:	4a42      	ldr	r2, [pc, #264]	@ (80012a0 <main+0x350>)
 8001196:	601a      	str	r2, [r3, #0]
	if (pitch > 180.0f) pitch = 180.0f;
 8001198:	4b3c      	ldr	r3, [pc, #240]	@ (800128c <main+0x33c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4940      	ldr	r1, [pc, #256]	@ (80012a0 <main+0x350>)
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fda6 	bl	8000cf0 <__aeabi_fcmpgt>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <main+0x260>
 80011aa:	4b38      	ldr	r3, [pc, #224]	@ (800128c <main+0x33c>)
 80011ac:	4a3c      	ldr	r2, [pc, #240]	@ (80012a0 <main+0x350>)
 80011ae:	601a      	str	r2, [r3, #0]
	if (roll < 0.0f) roll = 0.0f;
 80011b0:	4b37      	ldr	r3, [pc, #220]	@ (8001290 <main+0x340>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f04f 0100 	mov.w	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fd7b 	bl	8000cb4 <__aeabi_fcmplt>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <main+0x27c>
 80011c4:	4b32      	ldr	r3, [pc, #200]	@ (8001290 <main+0x340>)
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
	if (yaw < 0.0f) yaw = 0.0f;
 80011cc:	4b32      	ldr	r3, [pc, #200]	@ (8001298 <main+0x348>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f04f 0100 	mov.w	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fd6d 	bl	8000cb4 <__aeabi_fcmplt>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <main+0x298>
 80011e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <main+0x348>)
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
	if (pitch < 0.0f) pitch = 0.0f;
 80011e8:	4b28      	ldr	r3, [pc, #160]	@ (800128c <main+0x33c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f04f 0100 	mov.w	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fd5f 	bl	8000cb4 <__aeabi_fcmplt>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <main+0x2b4>
 80011fc:	4b23      	ldr	r3, [pc, #140]	@ (800128c <main+0x33c>)
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	601a      	str	r2, [r3, #0]

	float angle_deg =0;
 8001204:	f04f 0300 	mov.w	r3, #0
 8001208:	607b      	str	r3, [r7, #4]


	if (fabs(roll) > STABILITY_TOLERANCE){
 800120a:	4b21      	ldr	r3, [pc, #132]	@ (8001290 <main+0x340>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001212:	4924      	ldr	r1, [pc, #144]	@ (80012a4 <main+0x354>)
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fd6b 	bl	8000cf0 <__aeabi_fcmpgt>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <main+0x2d6>
		    angle_deg = roll;
 8001220:	4b1b      	ldr	r3, [pc, #108]	@ (8001290 <main+0x340>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	607b      	str	r3, [r7, #4]
	}
	if (fabs(pitch) > STABILITY_TOLERANCE){
 8001226:	4b19      	ldr	r3, [pc, #100]	@ (800128c <main+0x33c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800122e:	491d      	ldr	r1, [pc, #116]	@ (80012a4 <main+0x354>)
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fd5d 	bl	8000cf0 <__aeabi_fcmpgt>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <main+0x2f2>
			angle_deg = pitch;
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <main+0x33c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	607b      	str	r3, [r7, #4]
	}
	if (fabs(yaw) > STABILITY_TOLERANCE){
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <main+0x348>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800124a:	4916      	ldr	r1, [pc, #88]	@ (80012a4 <main+0x354>)
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fd4f 	bl	8000cf0 <__aeabi_fcmpgt>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <main+0x30e>
			angle_deg = yaw;
 8001258:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <main+0x348>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	607b      	str	r3, [r7, #4]
	}
	if (angle_deg >15){
 800125e:	4912      	ldr	r1, [pc, #72]	@ (80012a8 <main+0x358>)
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff fd45 	bl	8000cf0 <__aeabi_fcmpgt>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d01f      	beq.n	80012ac <main+0x35c>
		turnON(2);
 800126c:	2002      	movs	r0, #2
 800126e:	f000 f89f 	bl	80013b0 <turnON>
 8001272:	e01e      	b.n	80012b2 <main+0x362>
 8001274:	200000c8 	.word	0x200000c8
 8001278:	200000cc 	.word	0x200000cc
 800127c:	200000d0 	.word	0x200000d0
 8001280:	200000d4 	.word	0x200000d4
 8001284:	200000d8 	.word	0x200000d8
 8001288:	200000dc 	.word	0x200000dc
 800128c:	200000c0 	.word	0x200000c0
 8001290:	200000bc 	.word	0x200000bc
 8001294:	3c23d70a 	.word	0x3c23d70a
 8001298:	200000c4 	.word	0x200000c4
 800129c:	43b40000 	.word	0x43b40000
 80012a0:	43340000 	.word	0x43340000
 80012a4:	41200000 	.word	0x41200000
 80012a8:	41700000 	.word	0x41700000
	}
	else {
		turnOFF(2);
 80012ac:	2002      	movs	r0, #2
 80012ae:	f000 f8ad 	bl	800140c <turnOFF>

	// 3400 from Motor Side to 1050 to the Potentiometer Side gives angle from 0 to 180
	// 3400 -> 0
	// 1050 -> 180

	angle_deg = 30; //Hard Coded to test
 80012b2:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <main+0x3c8>)
 80012b4:	607b      	str	r3, [r7, #4]

	ref = (uint16_t) (-13.0556 * angle_deg + 3400);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff f9d8 	bl	800066c <__aeabi_f2d>
 80012bc:	a312      	add	r3, pc, #72	@ (adr r3, 8001308 <main+0x3b8>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7fe ff45 	bl	8000150 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	a310      	add	r3, pc, #64	@ (adr r3, 8001310 <main+0x3c0>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff f86c 	bl	80003b0 <__adddf3>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fa1c 	bl	800071c <__aeabi_d2uiz>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <main+0x3cc>)
 80012ec:	601a      	str	r2, [r3, #0]

	curr = getcurrentPosition();
 80012ee:	f000 fbe5 	bl	8001abc <getcurrentPosition>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <main+0x3d0>)
 80012f8:	601a      	str	r2, [r3, #0]

	//if ((ref >= LOWER_LIMIT && ref <= UPPER_LIMIT) && (curr != ref)) PIDController();

	delay(10);
 80012fa:	200a      	movs	r0, #10
 80012fc:	f000 f90c 	bl	8001518 <delay>
while (1) {
 8001300:	e63f      	b.n	8000f82 <main+0x32>
 8001302:	bf00      	nop
 8001304:	f3af 8000 	nop.w
 8001308:	9a6b50b1 	.word	0x9a6b50b1
 800130c:	c02a1c77 	.word	0xc02a1c77
 8001310:	00000000 	.word	0x00000000
 8001314:	40aa9000 	.word	0x40aa9000
 8001318:	41f00000 	.word	0x41f00000
 800131c:	200000b4 	.word	0x200000b4
 8001320:	200000b8 	.word	0x200000b8

08001324 <configureIO>:


}


void configureIO(){
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	 * SDA -> B11
	 * SCL -> B10
	 *
	 * */

	GPIOA -> CRL = 0x444440A4;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <configureIO+0x20>)
 800132a:	4a07      	ldr	r2, [pc, #28]	@ (8001348 <configureIO+0x24>)
 800132c:	601a      	str	r2, [r3, #0]
	GPIOB -> CRL = 0x24444444;
 800132e:	4b07      	ldr	r3, [pc, #28]	@ (800134c <configureIO+0x28>)
 8001330:	4a07      	ldr	r2, [pc, #28]	@ (8001350 <configureIO+0x2c>)
 8001332:	601a      	str	r2, [r3, #0]
	GPIOB -> CRH = 0x4424AA22;
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <configureIO+0x28>)
 8001336:	4a07      	ldr	r2, [pc, #28]	@ (8001354 <configureIO+0x30>)
 8001338:	605a      	str	r2, [r3, #4]


}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40010800 	.word	0x40010800
 8001348:	444440a4 	.word	0x444440a4
 800134c:	40010c00 	.word	0x40010c00
 8001350:	24444444 	.word	0x24444444
 8001354:	4424aa22 	.word	0x4424aa22

08001358 <enableClk>:

void enableClk(){
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= RCC_APB2ENR_IOPAEN;
 800135c:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <enableClk+0x54>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a12      	ldr	r2, [pc, #72]	@ (80013ac <enableClk+0x54>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6193      	str	r3, [r2, #24]
	RCC -> APB2ENR |= RCC_APB2ENR_IOPBEN;
 8001368:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <enableClk+0x54>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a0f      	ldr	r2, [pc, #60]	@ (80013ac <enableClk+0x54>)
 800136e:	f043 0308 	orr.w	r3, r3, #8
 8001372:	6193      	str	r3, [r2, #24]
	RCC -> APB1ENR |= 0b11; //enable TIM2 & TIM3
 8001374:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <enableClk+0x54>)
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	4a0c      	ldr	r2, [pc, #48]	@ (80013ac <enableClk+0x54>)
 800137a:	f043 0303 	orr.w	r3, r3, #3
 800137e:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001380:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <enableClk+0x54>)
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	4a09      	ldr	r2, [pc, #36]	@ (80013ac <enableClk+0x54>)
 8001386:	f043 0302 	orr.w	r3, r3, #2
 800138a:	61d3      	str	r3, [r2, #28]
	RCC -> APB2ENR |= (1 << 9) | (1 << 10); // enable CLK for ADC1
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <enableClk+0x54>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a06      	ldr	r2, [pc, #24]	@ (80013ac <enableClk+0x54>)
 8001392:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8001396:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_I2C2EN; //enable I2C2 CLK
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <enableClk+0x54>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	4a03      	ldr	r2, [pc, #12]	@ (80013ac <enableClk+0x54>)
 800139e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013a2:	61d3      	str	r3, [r2, #28]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	40021000 	.word	0x40021000

080013b0 <turnON>:


void turnON(uint8_t i){
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]


	switch (i){
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d014      	beq.n	80013ea <turnON+0x3a>
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	dc19      	bgt.n	80013f8 <turnON+0x48>
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <turnON+0x1e>
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d007      	beq.n	80013dc <turnON+0x2c>

		case 0: GPIOA ->ODR |= (1 << 7);  return; // Blue indicates reached goal
		case 1: GPIOB ->ODR |= (1 << 10); return; // Red indicates still processing
		case 2: GPIOB ->ODR |= (1 << 13); return; // Green indicates CAL for first time

		default: break;
 80013cc:	e014      	b.n	80013f8 <turnON+0x48>
		case 0: GPIOA ->ODR |= (1 << 7);  return; // Blue indicates reached goal
 80013ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <turnON+0x54>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001404 <turnON+0x54>)
 80013d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013d8:	60d3      	str	r3, [r2, #12]
 80013da:	e00e      	b.n	80013fa <turnON+0x4a>
		case 1: GPIOB ->ODR |= (1 << 10); return; // Red indicates still processing
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <turnON+0x58>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	4a09      	ldr	r2, [pc, #36]	@ (8001408 <turnON+0x58>)
 80013e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013e6:	60d3      	str	r3, [r2, #12]
 80013e8:	e007      	b.n	80013fa <turnON+0x4a>
		case 2: GPIOB ->ODR |= (1 << 13); return; // Green indicates CAL for first time
 80013ea:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <turnON+0x58>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	4a06      	ldr	r2, [pc, #24]	@ (8001408 <turnON+0x58>)
 80013f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013f4:	60d3      	str	r3, [r2, #12]
 80013f6:	e000      	b.n	80013fa <turnON+0x4a>
		default: break;
 80013f8:	bf00      	nop
	}
}
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40010800 	.word	0x40010800
 8001408:	40010c00 	.word	0x40010c00

0800140c <turnOFF>:

void turnOFF(uint8_t i){
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]


	switch (i){
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d014      	beq.n	8001446 <turnOFF+0x3a>
 800141c:	2b02      	cmp	r3, #2
 800141e:	dc19      	bgt.n	8001454 <turnOFF+0x48>
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <turnOFF+0x1e>
 8001424:	2b01      	cmp	r3, #1
 8001426:	d007      	beq.n	8001438 <turnOFF+0x2c>

		case 0: GPIOA ->ODR &= ~(1 << 7);  return;
		case 1: GPIOB ->ODR &= ~(1 << 10); return;
		case 2: GPIOB ->ODR &= ~(1 << 13); return;

		default: break;
 8001428:	e014      	b.n	8001454 <turnOFF+0x48>
		case 0: GPIOA ->ODR &= ~(1 << 7);  return;
 800142a:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <turnOFF+0x54>)
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	4a0c      	ldr	r2, [pc, #48]	@ (8001460 <turnOFF+0x54>)
 8001430:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001434:	60d3      	str	r3, [r2, #12]
 8001436:	e00e      	b.n	8001456 <turnOFF+0x4a>
		case 1: GPIOB ->ODR &= ~(1 << 10); return;
 8001438:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <turnOFF+0x58>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4a09      	ldr	r2, [pc, #36]	@ (8001464 <turnOFF+0x58>)
 800143e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001442:	60d3      	str	r3, [r2, #12]
 8001444:	e007      	b.n	8001456 <turnOFF+0x4a>
		case 2: GPIOB ->ODR &= ~(1 << 13); return;
 8001446:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <turnOFF+0x58>)
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	4a06      	ldr	r2, [pc, #24]	@ (8001464 <turnOFF+0x58>)
 800144c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001450:	60d3      	str	r3, [r2, #12]
 8001452:	e000      	b.n	8001456 <turnOFF+0x4a>
		default: break;
 8001454:	bf00      	nop
	}
}
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40010800 	.word	0x40010800
 8001464:	40010c00 	.word	0x40010c00

08001468 <initADC2>:


void initADC2(){
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0

		ADC2->SQR1 = 0x00000000;  // Reset SQR1 (sequence length = 1 by default)
 800146e:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <initADC2+0xac>)
 8001470:	2200      	movs	r2, #0
 8001472:	62da      	str	r2, [r3, #44]	@ 0x2c
		ADC2->SQR3 = 2; // Channel 2
 8001474:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <initADC2+0xac>)
 8001476:	2202      	movs	r2, #2
 8001478:	635a      	str	r2, [r3, #52]	@ 0x34
		ADC2 -> SMPR2 &= 0; // reseting the sample time
 800147a:	4b26      	ldr	r3, [pc, #152]	@ (8001514 <initADC2+0xac>)
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	4b25      	ldr	r3, [pc, #148]	@ (8001514 <initADC2+0xac>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
		ADC2->SMPR2 |= (0b010 << 6); // Channel 2 7.5 cycles
 8001484:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <initADC2+0xac>)
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	4a22      	ldr	r2, [pc, #136]	@ (8001514 <initADC2+0xac>)
 800148a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800148e:	6113      	str	r3, [r2, #16]

		ADC2->CR2 |= ADC_CR2_ADON; // ADC on
 8001490:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <initADC2+0xac>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4a1f      	ldr	r2, [pc, #124]	@ (8001514 <initADC2+0xac>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6093      	str	r3, [r2, #8]
		for (volatile int i = 0; i < 10000; i++);  // Short delay
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	e002      	b.n	80014a8 <initADC2+0x40>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3301      	adds	r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f242 720f 	movw	r2, #9999	@ 0x270f
 80014ae:	4293      	cmp	r3, r2
 80014b0:	ddf7      	ble.n	80014a2 <initADC2+0x3a>

		ADC2->CR2 |= ADC_CR2_CAL;          // Start calibration
 80014b2:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <initADC2+0xac>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	4a17      	ldr	r2, [pc, #92]	@ (8001514 <initADC2+0xac>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	6093      	str	r3, [r2, #8]
		while (ADC2->CR2 & ADC_CR2_CAL);   // Wait for calibration to finish
 80014be:	bf00      	nop
 80014c0:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <initADC2+0xac>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f9      	bne.n	80014c0 <initADC2+0x58>

		ADC2->CR2 |= ADC_CR2_EXTTRIG;  // Enable external trigger
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <initADC2+0xac>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	4a10      	ldr	r2, [pc, #64]	@ (8001514 <initADC2+0xac>)
 80014d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014d6:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_EXTSEL;       // Clear EXTSEL bits
 80014d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <initADC2+0xac>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001514 <initADC2+0xac>)
 80014de:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 80014e2:	6093      	str	r3, [r2, #8]
		ADC2->CR2 |= (0b111 << 17);         // Set EXTSEL = 111 for SWSTART
 80014e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <initADC2+0xac>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <initADC2+0xac>)
 80014ea:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 80014ee:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_CONT;  // Clear CONT bit for single conversion mode
 80014f0:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <initADC2+0xac>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	4a07      	ldr	r2, [pc, #28]	@ (8001514 <initADC2+0xac>)
 80014f6:	f023 0302 	bic.w	r3, r3, #2
 80014fa:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_ALIGN;  // 0 = Right alignment (default)
 80014fc:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <initADC2+0xac>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a04      	ldr	r2, [pc, #16]	@ (8001514 <initADC2+0xac>)
 8001502:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001506:	6093      	str	r3, [r2, #8]

}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40012800 	.word	0x40012800

08001518 <delay>:


void delay(uint16_t t){
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]
	TIM3 ->PSC = 8000-1;
 8001522:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <delay+0x58>)
 8001524:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001528:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3 ->ARR = t-1;
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	1e5a      	subs	r2, r3, #1
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <delay+0x58>)
 8001530:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3 ->CR1 |= TIM_CR1_CEN;
 8001532:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <delay+0x58>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a0e      	ldr	r2, [pc, #56]	@ (8001570 <delay+0x58>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6013      	str	r3, [r2, #0]
	while(!(TIM3->SR & TIM_SR_UIF));
 800153e:	bf00      	nop
 8001540:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <delay+0x58>)
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f9      	beq.n	8001540 <delay+0x28>
	TIM3->SR &= ~TIM_SR_UIF;
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <delay+0x58>)
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	4a07      	ldr	r2, [pc, #28]	@ (8001570 <delay+0x58>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6113      	str	r3, [r2, #16]
	TIM3 ->CR1 &= ~(TIM_CR1_CEN);
 8001558:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <delay+0x58>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <delay+0x58>)
 800155e:	f023 0301 	bic.w	r3, r3, #1
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40000400 	.word	0x40000400

08001574 <getADCVal>:


uint16_t getADCVal(uint8_t i){
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	if (i ==0){
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d117      	bne.n	80015b4 <getADCVal+0x40>
		ADC1->CR2 |= ADC_CR2_SWSTART; // start conversion
 8001584:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <getADCVal+0x78>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	4a18      	ldr	r2, [pc, #96]	@ (80015ec <getADCVal+0x78>)
 800158a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800158e:	6093      	str	r3, [r2, #8]
			while (!(ADC1->SR & ADC_SR_EOC));     // Wait for conversion complete
 8001590:	bf00      	nop
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <getADCVal+0x78>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f9      	beq.n	8001592 <getADCVal+0x1e>
			ADC1->SR &= ~(ADC_SR_EOC);
 800159e:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <getADCVal+0x78>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <getADCVal+0x78>)
 80015a4:	f023 0302 	bic.w	r3, r3, #2
 80015a8:	6013      	str	r3, [r2, #0]
			uint16_t ADCVal = ADC1->DR;  // Read result (10-bit mask)
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <getADCVal+0x78>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ae:	81bb      	strh	r3, [r7, #12]
			return ADCVal;
 80015b0:	89bb      	ldrh	r3, [r7, #12]
 80015b2:	e016      	b.n	80015e2 <getADCVal+0x6e>
	}
	else {
		ADC2->CR2 |= ADC_CR2_SWSTART; // start conversion
 80015b4:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <getADCVal+0x7c>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	4a0d      	ldr	r2, [pc, #52]	@ (80015f0 <getADCVal+0x7c>)
 80015ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015be:	6093      	str	r3, [r2, #8]
		while (!(ADC2->SR & ADC_SR_EOC));     // Wait for conversion complete
 80015c0:	bf00      	nop
 80015c2:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <getADCVal+0x7c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f9      	beq.n	80015c2 <getADCVal+0x4e>
		ADC2->SR &= ~(ADC_SR_EOC);
 80015ce:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <getADCVal+0x7c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a07      	ldr	r2, [pc, #28]	@ (80015f0 <getADCVal+0x7c>)
 80015d4:	f023 0302 	bic.w	r3, r3, #2
 80015d8:	6013      	str	r3, [r2, #0]
		uint16_t ADCVal = ADC2->DR;  // Read result (10-bit mask)
 80015da:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <getADCVal+0x7c>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	81fb      	strh	r3, [r7, #14]
		return ADCVal;
 80015e0:	89fb      	ldrh	r3, [r7, #14]
	}


}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	40012400 	.word	0x40012400
 80015f0:	40012800 	.word	0x40012800

080015f4 <freeMotor>:
	GPIOB->ODR |= (1 << 7) | (1 << 8);

}


void freeMotor(){
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~((1 << 7) | (1 << 8));
 80015f8:	4b04      	ldr	r3, [pc, #16]	@ (800160c <freeMotor+0x18>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4a03      	ldr	r2, [pc, #12]	@ (800160c <freeMotor+0x18>)
 80015fe:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	40010c00 	.word	0x40010c00

08001610 <initPWM>:

void initPWM(){
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
	RCC ->APB1ENR |= RCC_APB1ENR_TIM2EN; //enable Timer
 8001614:	4b23      	ldr	r3, [pc, #140]	@ (80016a4 <initPWM+0x94>)
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	4a22      	ldr	r2, [pc, #136]	@ (80016a4 <initPWM+0x94>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	61d3      	str	r3, [r2, #28]

	TIM2 -> PSC = 8 - 1;
 8001620:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001624:	2207      	movs	r2, #7
 8001626:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2 -> ARR = 20000 - 1;
 8001628:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800162c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001630:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CCMR1 |= (6 << 12); // mode 1 for ch2
 8001632:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800163c:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001640:	6193      	str	r3, [r2, #24]

	TIM2 -> CCR2 = 0; //duty Cycle =0
 8001642:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001646:	2200      	movs	r2, #0
 8001648:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM2->CCMR1 |= TIM_CCMR1_OC1PE; // Enable preload
 800164a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001654:	f043 0308 	orr.w	r3, r3, #8
 8001658:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= TIM_CCER_CC2E;    // Enable output for CH1
 800165a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001664:	f043 0310 	orr.w	r3, r3, #16
 8001668:	6213      	str	r3, [r2, #32]

	TIM2->CR1 |= TIM_CR1_ARPE;   // Enable auto-reload Preload
 800166a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001678:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= TIM_EGR_UG;     // Force update to load registers
 800167a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6153      	str	r3, [r2, #20]

	TIM2->CR1 |= TIM_CR1_CEN;    // Enable timer
 800168a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6013      	str	r3, [r2, #0]

}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000

080016a8 <initI2C>:

	TIM2 -> CCR2 = (TIM2->ARR + 1) * dutyCycle / 100;

}

void initI2C(){
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

	//enabled RCC
	//Configured IO as AF OD

	I2C2-> CR1 &= ~I2C_CR1_PE; // Disable I2C1 before configuring
 80016ac:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <initI2C+0x5c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a14      	ldr	r2, [pc, #80]	@ (8001704 <initI2C+0x5c>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	6013      	str	r3, [r2, #0]

	// Reset I2C1 peripheral
	I2C2-> CR1 |= I2C_CR1_SWRST;
 80016b8:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <initI2C+0x5c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a11      	ldr	r2, [pc, #68]	@ (8001704 <initI2C+0x5c>)
 80016be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016c2:	6013      	str	r3, [r2, #0]
	I2C2-> CR1 &= ~I2C_CR1_SWRST;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <initI2C+0x5c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001704 <initI2C+0x5c>)
 80016ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80016ce:	6013      	str	r3, [r2, #0]

	I2C2 -> CR2 = 8 ; // set Freq.
 80016d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <initI2C+0x5c>)
 80016d2:	2208      	movs	r2, #8
 80016d4:	605a      	str	r2, [r3, #4]

	I2C2-> CCR &= ~I2C_CCR_FS;  // Standard mode
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <initI2C+0x5c>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <initI2C+0x5c>)
 80016dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80016e0:	61d3      	str	r3, [r2, #28]

	//I2C1->CCR &= ~I2C_CCR_DUTY; setting duty here is useless

	I2C2 -> CCR = 40;  // F/(2*speed) -> 8M / ( 2*100K )
 80016e2:	4b08      	ldr	r3, [pc, #32]	@ (8001704 <initI2C+0x5c>)
 80016e4:	2228      	movs	r2, #40	@ 0x28
 80016e6:	61da      	str	r2, [r3, #28]

	I2C2-> TRISE = 8 + 1 ;  // TRISE = Fpclk1(MHz) + 1 => 8 + 1
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <initI2C+0x5c>)
 80016ea:	2209      	movs	r2, #9
 80016ec:	621a      	str	r2, [r3, #32]

	I2C2-> CR1 |= I2C_CR1_PE; //Enable I2C1
 80016ee:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <initI2C+0x5c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a04      	ldr	r2, [pc, #16]	@ (8001704 <initI2C+0x5c>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6013      	str	r3, [r2, #0]


}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40005800 	.word	0x40005800

08001708 <initIMU>:
	}




void initIMU() {
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
    // Wake up the MPU6050
    I2C2->CR1 |= I2C_CR1_START;
 800170c:	4b20      	ldr	r3, [pc, #128]	@ (8001790 <initIMU+0x88>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a1f      	ldr	r2, [pc, #124]	@ (8001790 <initIMU+0x88>)
 8001712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001716:	6013      	str	r3, [r2, #0]
    while (!(I2C2->SR1 & I2C_SR1_SB));
 8001718:	bf00      	nop
 800171a:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <initIMU+0x88>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f9      	beq.n	800171a <initIMU+0x12>
    (void)I2C2->SR1;
 8001726:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <initIMU+0x88>)
 8001728:	695b      	ldr	r3, [r3, #20]

    I2C2->DR = MPU9050_ADDR << 1; // write
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <initIMU+0x88>)
 800172c:	22d0      	movs	r2, #208	@ 0xd0
 800172e:	611a      	str	r2, [r3, #16]
    while (!(I2C2->SR1 & I2C_SR1_ADDR));
 8001730:	bf00      	nop
 8001732:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <initIMU+0x88>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f9      	beq.n	8001732 <initIMU+0x2a>
    (void)I2C2->SR1;
 800173e:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <initIMU+0x88>)
 8001740:	695b      	ldr	r3, [r3, #20]
    (void)I2C2->SR2;
 8001742:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <initIMU+0x88>)
 8001744:	699b      	ldr	r3, [r3, #24]

    while (!(I2C2->SR1 & I2C_SR1_TXE));
 8001746:	bf00      	nop
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <initIMU+0x88>)
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f9      	beq.n	8001748 <initIMU+0x40>
    I2C2->DR = PWR_MGMT_1;
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <initIMU+0x88>)
 8001756:	226b      	movs	r2, #107	@ 0x6b
 8001758:	611a      	str	r2, [r3, #16]
    while (!(I2C2->SR1 & I2C_SR1_TXE));
 800175a:	bf00      	nop
 800175c:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <initIMU+0x88>)
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f9      	beq.n	800175c <initIMU+0x54>
    I2C2->DR = 0x00;
 8001768:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <initIMU+0x88>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
    while (!(I2C2->SR1 & I2C_SR1_BTF));
 800176e:	bf00      	nop
 8001770:	4b07      	ldr	r3, [pc, #28]	@ (8001790 <initIMU+0x88>)
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f9      	beq.n	8001770 <initIMU+0x68>
    I2C2->CR1 |= I2C_CR1_STOP;
 800177c:	4b04      	ldr	r3, [pc, #16]	@ (8001790 <initIMU+0x88>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a03      	ldr	r2, [pc, #12]	@ (8001790 <initIMU+0x88>)
 8001782:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	40005800 	.word	0x40005800

08001794 <readIMUData>:

void readIMUData(float* ax, float* ay, float* az,
                 float* gx, float* gy, float* gz) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b08e      	sub	sp, #56	@ 0x38
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
    uint8_t rawData[14];

    while (!(I2C2->SR1 & (1 << 1))); // check if it's not busy
 80017a2:	bf00      	nop
 80017a4:	4b8e      	ldr	r3, [pc, #568]	@ (80019e0 <readIMUData+0x24c>)
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f9      	beq.n	80017a4 <readIMUData+0x10>
    // Start communication
    I2C2->CR1 |= I2C_CR1_START;
 80017b0:	4b8b      	ldr	r3, [pc, #556]	@ (80019e0 <readIMUData+0x24c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a8a      	ldr	r2, [pc, #552]	@ (80019e0 <readIMUData+0x24c>)
 80017b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ba:	6013      	str	r3, [r2, #0]
    while (!(I2C2->SR1 & I2C_SR1_SB));
 80017bc:	bf00      	nop
 80017be:	4b88      	ldr	r3, [pc, #544]	@ (80019e0 <readIMUData+0x24c>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f9      	beq.n	80017be <readIMUData+0x2a>
    (void)I2C2->SR1;
 80017ca:	4b85      	ldr	r3, [pc, #532]	@ (80019e0 <readIMUData+0x24c>)
 80017cc:	695b      	ldr	r3, [r3, #20]

    for (volatile int i = 0; i <10000 ;i++);
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	e002      	b.n	80017da <readIMUData+0x46>
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80017e0:	4293      	cmp	r3, r2
 80017e2:	ddf7      	ble.n	80017d4 <readIMUData+0x40>

    I2C2->DR = MPU9050_ADDR << 1; // Write
 80017e4:	4b7e      	ldr	r3, [pc, #504]	@ (80019e0 <readIMUData+0x24c>)
 80017e6:	22d0      	movs	r2, #208	@ 0xd0
 80017e8:	611a      	str	r2, [r3, #16]
    while (!(I2C2->SR1 & I2C_SR1_ADDR));
 80017ea:	bf00      	nop
 80017ec:	4b7c      	ldr	r3, [pc, #496]	@ (80019e0 <readIMUData+0x24c>)
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f9      	beq.n	80017ec <readIMUData+0x58>
    (void)I2C2->SR1; (void)I2C2->SR2;
 80017f8:	4b79      	ldr	r3, [pc, #484]	@ (80019e0 <readIMUData+0x24c>)
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	4b78      	ldr	r3, [pc, #480]	@ (80019e0 <readIMUData+0x24c>)
 80017fe:	699b      	ldr	r3, [r3, #24]

    while (!(I2C2->SR1 & I2C_SR1_TXE));
 8001800:	bf00      	nop
 8001802:	4b77      	ldr	r3, [pc, #476]	@ (80019e0 <readIMUData+0x24c>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f9      	beq.n	8001802 <readIMUData+0x6e>
    I2C2->DR = ACCEL_XOUT_H;
 800180e:	4b74      	ldr	r3, [pc, #464]	@ (80019e0 <readIMUData+0x24c>)
 8001810:	223b      	movs	r2, #59	@ 0x3b
 8001812:	611a      	str	r2, [r3, #16]

    while (!(I2C2->SR1 & I2C_SR1_TXE));
 8001814:	bf00      	nop
 8001816:	4b72      	ldr	r3, [pc, #456]	@ (80019e0 <readIMUData+0x24c>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f9      	beq.n	8001816 <readIMUData+0x82>
    I2C2->CR1 |= I2C_CR1_START; // Repeated start
 8001822:	4b6f      	ldr	r3, [pc, #444]	@ (80019e0 <readIMUData+0x24c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a6e      	ldr	r2, [pc, #440]	@ (80019e0 <readIMUData+0x24c>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800182c:	6013      	str	r3, [r2, #0]
    while (!(I2C2->SR1 & I2C_SR1_SB));
 800182e:	bf00      	nop
 8001830:	4b6b      	ldr	r3, [pc, #428]	@ (80019e0 <readIMUData+0x24c>)
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f9      	beq.n	8001830 <readIMUData+0x9c>
    (void)I2C2->SR1;
 800183c:	4b68      	ldr	r3, [pc, #416]	@ (80019e0 <readIMUData+0x24c>)
 800183e:	695b      	ldr	r3, [r3, #20]

    I2C2->DR = (MPU9050_ADDR << 1) | 0x01; // Read
 8001840:	4b67      	ldr	r3, [pc, #412]	@ (80019e0 <readIMUData+0x24c>)
 8001842:	22d1      	movs	r2, #209	@ 0xd1
 8001844:	611a      	str	r2, [r3, #16]
    while (!(I2C2->SR1 & I2C_SR1_ADDR));
 8001846:	bf00      	nop
 8001848:	4b65      	ldr	r3, [pc, #404]	@ (80019e0 <readIMUData+0x24c>)
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f9      	beq.n	8001848 <readIMUData+0xb4>
    (void)I2C2->SR1; (void)I2C2->SR2;
 8001854:	4b62      	ldr	r3, [pc, #392]	@ (80019e0 <readIMUData+0x24c>)
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	4b61      	ldr	r3, [pc, #388]	@ (80019e0 <readIMUData+0x24c>)
 800185a:	699b      	ldr	r3, [r3, #24]

    for (int i = 0; i < 13; i++) {
 800185c:	2300      	movs	r3, #0
 800185e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001860:	e012      	b.n	8001888 <readIMUData+0xf4>
        while (!(I2C2->SR1 & I2C_SR1_RXNE));
 8001862:	bf00      	nop
 8001864:	4b5e      	ldr	r3, [pc, #376]	@ (80019e0 <readIMUData+0x24c>)
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f9      	beq.n	8001864 <readIMUData+0xd0>
        rawData[i] = I2C2->DR;
 8001870:	4b5b      	ldr	r3, [pc, #364]	@ (80019e0 <readIMUData+0x24c>)
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	b2d9      	uxtb	r1, r3
 8001876:	f107 0218 	add.w	r2, r7, #24
 800187a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800187c:	4413      	add	r3, r2
 800187e:	460a      	mov	r2, r1
 8001880:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 13; i++) {
 8001882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001884:	3301      	adds	r3, #1
 8001886:	637b      	str	r3, [r7, #52]	@ 0x34
 8001888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800188a:	2b0c      	cmp	r3, #12
 800188c:	dde9      	ble.n	8001862 <readIMUData+0xce>
    }

    I2C2->CR1 &= ~I2C_CR1_ACK; // NACK
 800188e:	4b54      	ldr	r3, [pc, #336]	@ (80019e0 <readIMUData+0x24c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a53      	ldr	r2, [pc, #332]	@ (80019e0 <readIMUData+0x24c>)
 8001894:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001898:	6013      	str	r3, [r2, #0]
    I2C2->CR1 |= I2C_CR1_STOP;
 800189a:	4b51      	ldr	r3, [pc, #324]	@ (80019e0 <readIMUData+0x24c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a50      	ldr	r2, [pc, #320]	@ (80019e0 <readIMUData+0x24c>)
 80018a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018a4:	6013      	str	r3, [r2, #0]
    while (!(I2C2->SR1 & I2C_SR1_RXNE));
 80018a6:	bf00      	nop
 80018a8:	4b4d      	ldr	r3, [pc, #308]	@ (80019e0 <readIMUData+0x24c>)
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f9      	beq.n	80018a8 <readIMUData+0x114>
    rawData[13] = I2C2->DR;
 80018b4:	4b4a      	ldr	r3, [pc, #296]	@ (80019e0 <readIMUData+0x24c>)
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    int16_t ax_raw = (rawData[0] << 8) | rawData[1];
 80018be:	7e3b      	ldrb	r3, [r7, #24]
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	b21a      	sxth	r2, r3
 80018c6:	7e7b      	ldrb	r3, [r7, #25]
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	4313      	orrs	r3, r2
 80018cc:	867b      	strh	r3, [r7, #50]	@ 0x32
    int16_t ay_raw = (rawData[2] << 8) | rawData[3];
 80018ce:	7ebb      	ldrb	r3, [r7, #26]
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	b21a      	sxth	r2, r3
 80018d6:	7efb      	ldrb	r3, [r7, #27]
 80018d8:	b21b      	sxth	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	863b      	strh	r3, [r7, #48]	@ 0x30
    int16_t az_raw = (rawData[4] << 8) | rawData[5];
 80018de:	7f3b      	ldrb	r3, [r7, #28]
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	b21a      	sxth	r2, r3
 80018e6:	7f7b      	ldrb	r3, [r7, #29]
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	4313      	orrs	r3, r2
 80018ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    int16_t gx_raw = (rawData[8] << 8) | rawData[9];
 80018ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	4313      	orrs	r3, r2
 8001900:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    int16_t gy_raw = (rawData[10] << 8) | rawData[11];
 8001902:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001906:	b21b      	sxth	r3, r3
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	b21a      	sxth	r2, r3
 800190c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001910:	b21b      	sxth	r3, r3
 8001912:	4313      	orrs	r3, r2
 8001914:	857b      	strh	r3, [r7, #42]	@ 0x2a
    int16_t gz_raw = (rawData[12] << 8) | rawData[13];
 8001916:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800191a:	b21b      	sxth	r3, r3
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	b21a      	sxth	r2, r3
 8001920:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001924:	b21b      	sxth	r3, r3
 8001926:	4313      	orrs	r3, r2
 8001928:	853b      	strh	r3, [r7, #40]	@ 0x28

    // Convert raw to physical units (example: depends on sensitivity settings)
    *ax = ax_raw / 16384.0f;  // Assuming ±2g
 800192a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe ffce 	bl	80008d0 <__aeabi_i2f>
 8001934:	4603      	mov	r3, r0
 8001936:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff f8d0 	bl	8000ae0 <__aeabi_fdiv>
 8001940:	4603      	mov	r3, r0
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	601a      	str	r2, [r3, #0]
    *ay = ay_raw / 16384.0f;
 8001948:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe ffbf 	bl	80008d0 <__aeabi_i2f>
 8001952:	4603      	mov	r3, r0
 8001954:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff f8c1 	bl	8000ae0 <__aeabi_fdiv>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	601a      	str	r2, [r3, #0]
    *az = az_raw / 16384.0f;
 8001966:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe ffb0 	bl	80008d0 <__aeabi_i2f>
 8001970:	4603      	mov	r3, r0
 8001972:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff f8b2 	bl	8000ae0 <__aeabi_fdiv>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	601a      	str	r2, [r3, #0]
    *gx = gx_raw / 131.0f;    // Assuming ±250°/s
 8001984:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe ffa1 	bl	80008d0 <__aeabi_i2f>
 800198e:	4603      	mov	r3, r0
 8001990:	4914      	ldr	r1, [pc, #80]	@ (80019e4 <readIMUData+0x250>)
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff f8a4 	bl	8000ae0 <__aeabi_fdiv>
 8001998:	4603      	mov	r3, r0
 800199a:	461a      	mov	r2, r3
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	601a      	str	r2, [r3, #0]
    *gy = gy_raw / 131.0f;
 80019a0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe ff93 	bl	80008d0 <__aeabi_i2f>
 80019aa:	4603      	mov	r3, r0
 80019ac:	490d      	ldr	r1, [pc, #52]	@ (80019e4 <readIMUData+0x250>)
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f896 	bl	8000ae0 <__aeabi_fdiv>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019ba:	601a      	str	r2, [r3, #0]
    *gz = gz_raw / 131.0f;
 80019bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe ff85 	bl	80008d0 <__aeabi_i2f>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4906      	ldr	r1, [pc, #24]	@ (80019e4 <readIMUData+0x250>)
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f888 	bl	8000ae0 <__aeabi_fdiv>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019d6:	601a      	str	r2, [r3, #0]
}
 80019d8:	bf00      	nop
 80019da:	3738      	adds	r7, #56	@ 0x38
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40005800 	.word	0x40005800
 80019e4:	43030000 	.word	0x43030000

080019e8 <setAngles>:


void setAngles(float ax, float ay, float az,
               float gx, float gy, float gz,
               float* roll, float* pitch) {
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]

    float accel_roll  = atan2f(ay, az) * RAD_TO_DEG;
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	68b8      	ldr	r0, [r7, #8]
 80019fa:	f000 f8d1 	bl	8001ba0 <atan2f>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4928      	ldr	r1, [pc, #160]	@ (8001aa4 <setAngles+0xbc>)
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe ffb8 	bl	8000978 <__aeabi_fmul>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	61fb      	str	r3, [r7, #28]
    float accel_pitch = atan2f(-ax, sqrtf(ay * ay + az * az)) * RAD_TO_DEG;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	68b8      	ldr	r0, [r7, #8]
 8001a16:	f7fe ffaf 	bl	8000978 <__aeabi_fmul>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461d      	mov	r5, r3
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7fe ffa9 	bl	8000978 <__aeabi_fmul>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	f7fe fe9c 	bl	8000768 <__addsf3>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f8b6 	bl	8001ba4 <sqrtf>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f000 f8af 	bl	8001ba0 <atan2f>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4917      	ldr	r1, [pc, #92]	@ (8001aa4 <setAngles+0xbc>)
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe ff96 	bl	8000978 <__aeabi_fmul>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	61bb      	str	r3, [r7, #24]

    static uint32_t lastTime = 0;
    uint32_t now = SysTick->VAL;
 8001a50:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <setAngles+0xc0>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	617b      	str	r3, [r7, #20]
    float dt = (now - lastTime) / 8000000.0f;
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <setAngles+0xc4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe ff32 	bl	80008c8 <__aeabi_ui2f>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4912      	ldr	r1, [pc, #72]	@ (8001ab0 <setAngles+0xc8>)
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff f839 	bl	8000ae0 <__aeabi_fdiv>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	613b      	str	r3, [r7, #16]
    lastTime = now;
 8001a72:	4a0e      	ldr	r2, [pc, #56]	@ (8001aac <setAngles+0xc4>)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	6013      	str	r3, [r2, #0]

    *roll = Kalman_getAngle(&kalmanRoll, accel_roll, gx, dt);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	69f9      	ldr	r1, [r7, #28]
 8001a7e:	480d      	ldr	r0, [pc, #52]	@ (8001ab4 <setAngles+0xcc>)
 8001a80:	f7ff f956 	bl	8000d30 <Kalman_getAngle>
 8001a84:	4602      	mov	r2, r0
 8001a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a88:	601a      	str	r2, [r3, #0]
    *pitch = Kalman_getAngle(&kalmanPitch, accel_pitch, gy, dt);
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a8e:	69b9      	ldr	r1, [r7, #24]
 8001a90:	4809      	ldr	r0, [pc, #36]	@ (8001ab8 <setAngles+0xd0>)
 8001a92:	f7ff f94d 	bl	8000d30 <Kalman_getAngle>
 8001a96:	4602      	mov	r2, r0
 8001a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a9a:	601a      	str	r2, [r3, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa4:	42652ee1 	.word	0x42652ee1
 8001aa8:	e000e010 	.word	0xe000e010
 8001aac:	200000e0 	.word	0x200000e0
 8001ab0:	4af42400 	.word	0x4af42400
 8001ab4:	20000070 	.word	0x20000070
 8001ab8:	2000008c 	.word	0x2000008c

08001abc <getcurrentPosition>:

uint16_t getcurrentPosition(){ return getADCVal(1);}
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7ff fd57 	bl	8001574 <getADCVal>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}

08001acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <NMI_Handler+0x4>

08001ad4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <HardFault_Handler+0x4>

08001adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <MemManage_Handler+0x4>

08001ae4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <BusFault_Handler+0x4>

08001aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <UsageFault_Handler+0x4>

08001af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1c:	f000 f82e 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b30:	f7ff fff8 	bl	8001b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b34:	480b      	ldr	r0, [pc, #44]	@ (8001b64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b36:	490c      	ldr	r1, [pc, #48]	@ (8001b68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b38:	4a0c      	ldr	r2, [pc, #48]	@ (8001b6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b3c:	e002      	b.n	8001b44 <LoopCopyDataInit>

08001b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b42:	3304      	adds	r3, #4

08001b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b48:	d3f9      	bcc.n	8001b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4a:	4a09      	ldr	r2, [pc, #36]	@ (8001b70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b4c:	4c09      	ldr	r4, [pc, #36]	@ (8001b74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b50:	e001      	b.n	8001b56 <LoopFillZerobss>

08001b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b54:	3204      	adds	r2, #4

08001b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b58:	d3fb      	bcc.n	8001b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b5a:	f000 fa4b 	bl	8001ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b5e:	f7ff f9f7 	bl	8000f50 <main>
  bx lr
 8001b62:	4770      	bx	lr
  ldr r0, =_sdata
 8001b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b68:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001b6c:	0800209c 	.word	0x0800209c
  ldr r2, =_sbss
 8001b70:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001b74:	20000220 	.word	0x20000220

08001b78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b78:	e7fe      	b.n	8001b78 <ADC1_2_IRQHandler>
	...

08001b7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b80:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <HAL_IncTick+0x1c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <HAL_IncTick+0x20>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a03      	ldr	r2, [pc, #12]	@ (8001b9c <HAL_IncTick+0x20>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	200000e4 	.word	0x200000e4

08001ba0 <atan2f>:
 8001ba0:	f000 b88a 	b.w	8001cb8 <__ieee754_atan2f>

08001ba4 <sqrtf>:
 8001ba4:	b538      	push	{r3, r4, r5, lr}
 8001ba6:	4605      	mov	r5, r0
 8001ba8:	f000 f816 	bl	8001bd8 <__ieee754_sqrtf>
 8001bac:	4629      	mov	r1, r5
 8001bae:	4604      	mov	r4, r0
 8001bb0:	4628      	mov	r0, r5
 8001bb2:	f7ff f8a7 	bl	8000d04 <__aeabi_fcmpun>
 8001bb6:	b968      	cbnz	r0, 8001bd4 <sqrtf+0x30>
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4628      	mov	r0, r5
 8001bbc:	f7ff f87a 	bl	8000cb4 <__aeabi_fcmplt>
 8001bc0:	b140      	cbz	r0, 8001bd4 <sqrtf+0x30>
 8001bc2:	f000 fa11 	bl	8001fe8 <__errno>
 8001bc6:	2321      	movs	r3, #33	@ 0x21
 8001bc8:	2100      	movs	r1, #0
 8001bca:	6003      	str	r3, [r0, #0]
 8001bcc:	4608      	mov	r0, r1
 8001bce:	f7fe ff87 	bl	8000ae0 <__aeabi_fdiv>
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	bd38      	pop	{r3, r4, r5, pc}

08001bd8 <__ieee754_sqrtf>:
 8001bd8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8001bdc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8001be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001be4:	4603      	mov	r3, r0
 8001be6:	4604      	mov	r4, r0
 8001be8:	d30a      	bcc.n	8001c00 <__ieee754_sqrtf+0x28>
 8001bea:	4601      	mov	r1, r0
 8001bec:	f7fe fec4 	bl	8000978 <__aeabi_fmul>
 8001bf0:	4601      	mov	r1, r0
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7fe fdb8 	bl	8000768 <__addsf3>
 8001bf8:	4604      	mov	r4, r0
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c00:	2a00      	cmp	r2, #0
 8001c02:	d0fa      	beq.n	8001bfa <__ieee754_sqrtf+0x22>
 8001c04:	2800      	cmp	r0, #0
 8001c06:	da06      	bge.n	8001c16 <__ieee754_sqrtf+0x3e>
 8001c08:	4601      	mov	r1, r0
 8001c0a:	f7fe fdab 	bl	8000764 <__aeabi_fsub>
 8001c0e:	4601      	mov	r1, r0
 8001c10:	f7fe ff66 	bl	8000ae0 <__aeabi_fdiv>
 8001c14:	e7f0      	b.n	8001bf8 <__ieee754_sqrtf+0x20>
 8001c16:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8001c1a:	d03c      	beq.n	8001c96 <__ieee754_sqrtf+0xbe>
 8001c1c:	15c2      	asrs	r2, r0, #23
 8001c1e:	2400      	movs	r4, #0
 8001c20:	2019      	movs	r0, #25
 8001c22:	4626      	mov	r6, r4
 8001c24:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001c28:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001c2c:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8001c30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c34:	07d2      	lsls	r2, r2, #31
 8001c36:	bf58      	it	pl
 8001c38:	005b      	lslpl	r3, r3, #1
 8001c3a:	106d      	asrs	r5, r5, #1
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	1872      	adds	r2, r6, r1
 8001c40:	429a      	cmp	r2, r3
 8001c42:	bfcf      	iteee	gt
 8001c44:	461a      	movgt	r2, r3
 8001c46:	1856      	addle	r6, r2, r1
 8001c48:	1864      	addle	r4, r4, r1
 8001c4a:	1a9a      	suble	r2, r3, r2
 8001c4c:	3801      	subs	r0, #1
 8001c4e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8001c52:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8001c56:	d1f2      	bne.n	8001c3e <__ieee754_sqrtf+0x66>
 8001c58:	b1ba      	cbz	r2, 8001c8a <__ieee754_sqrtf+0xb2>
 8001c5a:	4e15      	ldr	r6, [pc, #84]	@ (8001cb0 <__ieee754_sqrtf+0xd8>)
 8001c5c:	4f15      	ldr	r7, [pc, #84]	@ (8001cb4 <__ieee754_sqrtf+0xdc>)
 8001c5e:	6830      	ldr	r0, [r6, #0]
 8001c60:	6839      	ldr	r1, [r7, #0]
 8001c62:	f7fe fd7f 	bl	8000764 <__aeabi_fsub>
 8001c66:	f8d6 8000 	ldr.w	r8, [r6]
 8001c6a:	4601      	mov	r1, r0
 8001c6c:	4640      	mov	r0, r8
 8001c6e:	f7ff f82b 	bl	8000cc8 <__aeabi_fcmple>
 8001c72:	b150      	cbz	r0, 8001c8a <__ieee754_sqrtf+0xb2>
 8001c74:	6830      	ldr	r0, [r6, #0]
 8001c76:	6839      	ldr	r1, [r7, #0]
 8001c78:	f7fe fd76 	bl	8000768 <__addsf3>
 8001c7c:	6836      	ldr	r6, [r6, #0]
 8001c7e:	4601      	mov	r1, r0
 8001c80:	4630      	mov	r0, r6
 8001c82:	f7ff f817 	bl	8000cb4 <__aeabi_fcmplt>
 8001c86:	b170      	cbz	r0, 8001ca6 <__ieee754_sqrtf+0xce>
 8001c88:	3402      	adds	r4, #2
 8001c8a:	1064      	asrs	r4, r4, #1
 8001c8c:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8001c90:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8001c94:	e7b1      	b.n	8001bfa <__ieee754_sqrtf+0x22>
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	0218      	lsls	r0, r3, #8
 8001c9a:	460a      	mov	r2, r1
 8001c9c:	f101 0101 	add.w	r1, r1, #1
 8001ca0:	d5f9      	bpl.n	8001c96 <__ieee754_sqrtf+0xbe>
 8001ca2:	4252      	negs	r2, r2
 8001ca4:	e7bb      	b.n	8001c1e <__ieee754_sqrtf+0x46>
 8001ca6:	3401      	adds	r4, #1
 8001ca8:	f024 0401 	bic.w	r4, r4, #1
 8001cac:	e7ed      	b.n	8001c8a <__ieee754_sqrtf+0xb2>
 8001cae:	bf00      	nop
 8001cb0:	08002058 	.word	0x08002058
 8001cb4:	08002054 	.word	0x08002054

08001cb8 <__ieee754_atan2f>:
 8001cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cba:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8001cbe:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	d805      	bhi.n	8001cd2 <__ieee754_atan2f+0x1a>
 8001cc6:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8001cca:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8001cce:	4607      	mov	r7, r0
 8001cd0:	d904      	bls.n	8001cdc <__ieee754_atan2f+0x24>
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fd48 	bl	8000768 <__addsf3>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	e010      	b.n	8001cfe <__ieee754_atan2f+0x46>
 8001cdc:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8001ce0:	d103      	bne.n	8001cea <__ieee754_atan2f+0x32>
 8001ce2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001ce6:	f000 b86f 	b.w	8001dc8 <atanf>
 8001cea:	178c      	asrs	r4, r1, #30
 8001cec:	f004 0402 	and.w	r4, r4, #2
 8001cf0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8001cf4:	b92a      	cbnz	r2, 8001d02 <__ieee754_atan2f+0x4a>
 8001cf6:	2c02      	cmp	r4, #2
 8001cf8:	d04b      	beq.n	8001d92 <__ieee754_atan2f+0xda>
 8001cfa:	2c03      	cmp	r4, #3
 8001cfc:	d04b      	beq.n	8001d96 <__ieee754_atan2f+0xde>
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d02:	b91e      	cbnz	r6, 8001d0c <__ieee754_atan2f+0x54>
 8001d04:	2f00      	cmp	r7, #0
 8001d06:	db4c      	blt.n	8001da2 <__ieee754_atan2f+0xea>
 8001d08:	4b27      	ldr	r3, [pc, #156]	@ (8001da8 <__ieee754_atan2f+0xf0>)
 8001d0a:	e7f8      	b.n	8001cfe <__ieee754_atan2f+0x46>
 8001d0c:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8001d10:	d10e      	bne.n	8001d30 <__ieee754_atan2f+0x78>
 8001d12:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8001d16:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8001d1a:	d105      	bne.n	8001d28 <__ieee754_atan2f+0x70>
 8001d1c:	2c02      	cmp	r4, #2
 8001d1e:	d83c      	bhi.n	8001d9a <__ieee754_atan2f+0xe2>
 8001d20:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <__ieee754_atan2f+0xf4>)
 8001d22:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001d26:	e7ea      	b.n	8001cfe <__ieee754_atan2f+0x46>
 8001d28:	2c02      	cmp	r4, #2
 8001d2a:	d838      	bhi.n	8001d9e <__ieee754_atan2f+0xe6>
 8001d2c:	4b20      	ldr	r3, [pc, #128]	@ (8001db0 <__ieee754_atan2f+0xf8>)
 8001d2e:	e7f8      	b.n	8001d22 <__ieee754_atan2f+0x6a>
 8001d30:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8001d34:	d0e6      	beq.n	8001d04 <__ieee754_atan2f+0x4c>
 8001d36:	1b92      	subs	r2, r2, r6
 8001d38:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 8001d3c:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8001d40:	da17      	bge.n	8001d72 <__ieee754_atan2f+0xba>
 8001d42:	2900      	cmp	r1, #0
 8001d44:	da01      	bge.n	8001d4a <__ieee754_atan2f+0x92>
 8001d46:	303c      	adds	r0, #60	@ 0x3c
 8001d48:	db15      	blt.n	8001d76 <__ieee754_atan2f+0xbe>
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fec8 	bl	8000ae0 <__aeabi_fdiv>
 8001d50:	f000 f946 	bl	8001fe0 <fabsf>
 8001d54:	f000 f838 	bl	8001dc8 <atanf>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2c01      	cmp	r4, #1
 8001d5c:	d00d      	beq.n	8001d7a <__ieee754_atan2f+0xc2>
 8001d5e:	2c02      	cmp	r4, #2
 8001d60:	d00e      	beq.n	8001d80 <__ieee754_atan2f+0xc8>
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	d0cb      	beq.n	8001cfe <__ieee754_atan2f+0x46>
 8001d66:	4913      	ldr	r1, [pc, #76]	@ (8001db4 <__ieee754_atan2f+0xfc>)
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fcfd 	bl	8000768 <__addsf3>
 8001d6e:	4912      	ldr	r1, [pc, #72]	@ (8001db8 <__ieee754_atan2f+0x100>)
 8001d70:	e00c      	b.n	8001d8c <__ieee754_atan2f+0xd4>
 8001d72:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <__ieee754_atan2f+0xf0>)
 8001d74:	e7f1      	b.n	8001d5a <__ieee754_atan2f+0xa2>
 8001d76:	2300      	movs	r3, #0
 8001d78:	e7ef      	b.n	8001d5a <__ieee754_atan2f+0xa2>
 8001d7a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001d7e:	e7be      	b.n	8001cfe <__ieee754_atan2f+0x46>
 8001d80:	490c      	ldr	r1, [pc, #48]	@ (8001db4 <__ieee754_atan2f+0xfc>)
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fcf0 	bl	8000768 <__addsf3>
 8001d88:	4601      	mov	r1, r0
 8001d8a:	480b      	ldr	r0, [pc, #44]	@ (8001db8 <__ieee754_atan2f+0x100>)
 8001d8c:	f7fe fcea 	bl	8000764 <__aeabi_fsub>
 8001d90:	e7a2      	b.n	8001cd8 <__ieee754_atan2f+0x20>
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <__ieee754_atan2f+0x100>)
 8001d94:	e7b3      	b.n	8001cfe <__ieee754_atan2f+0x46>
 8001d96:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <__ieee754_atan2f+0x104>)
 8001d98:	e7b1      	b.n	8001cfe <__ieee754_atan2f+0x46>
 8001d9a:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <__ieee754_atan2f+0x108>)
 8001d9c:	e7af      	b.n	8001cfe <__ieee754_atan2f+0x46>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e7ad      	b.n	8001cfe <__ieee754_atan2f+0x46>
 8001da2:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <__ieee754_atan2f+0x10c>)
 8001da4:	e7ab      	b.n	8001cfe <__ieee754_atan2f+0x46>
 8001da6:	bf00      	nop
 8001da8:	3fc90fdb 	.word	0x3fc90fdb
 8001dac:	08002068 	.word	0x08002068
 8001db0:	0800205c 	.word	0x0800205c
 8001db4:	33bbbd2e 	.word	0x33bbbd2e
 8001db8:	40490fdb 	.word	0x40490fdb
 8001dbc:	c0490fdb 	.word	0xc0490fdb
 8001dc0:	3f490fdb 	.word	0x3f490fdb
 8001dc4:	bfc90fdb 	.word	0xbfc90fdb

08001dc8 <atanf>:
 8001dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dcc:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8001dd0:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	4680      	mov	r8, r0
 8001dd8:	d30e      	bcc.n	8001df8 <atanf+0x30>
 8001dda:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8001dde:	d904      	bls.n	8001dea <atanf+0x22>
 8001de0:	4601      	mov	r1, r0
 8001de2:	f7fe fcc1 	bl	8000768 <__addsf3>
 8001de6:	4604      	mov	r4, r0
 8001de8:	e003      	b.n	8001df2 <atanf+0x2a>
 8001dea:	2800      	cmp	r0, #0
 8001dec:	f340 80ce 	ble.w	8001f8c <atanf+0x1c4>
 8001df0:	4c67      	ldr	r4, [pc, #412]	@ (8001f90 <atanf+0x1c8>)
 8001df2:	4620      	mov	r0, r4
 8001df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001df8:	4b66      	ldr	r3, [pc, #408]	@ (8001f94 <atanf+0x1cc>)
 8001dfa:	429d      	cmp	r5, r3
 8001dfc:	d80e      	bhi.n	8001e1c <atanf+0x54>
 8001dfe:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 8001e02:	d208      	bcs.n	8001e16 <atanf+0x4e>
 8001e04:	4964      	ldr	r1, [pc, #400]	@ (8001f98 <atanf+0x1d0>)
 8001e06:	f7fe fcaf 	bl	8000768 <__addsf3>
 8001e0a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001e0e:	f7fe ff6f 	bl	8000cf0 <__aeabi_fcmpgt>
 8001e12:	2800      	cmp	r0, #0
 8001e14:	d1ed      	bne.n	8001df2 <atanf+0x2a>
 8001e16:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8001e1a:	e01c      	b.n	8001e56 <atanf+0x8e>
 8001e1c:	f000 f8e0 	bl	8001fe0 <fabsf>
 8001e20:	4b5e      	ldr	r3, [pc, #376]	@ (8001f9c <atanf+0x1d4>)
 8001e22:	4604      	mov	r4, r0
 8001e24:	429d      	cmp	r5, r3
 8001e26:	d87c      	bhi.n	8001f22 <atanf+0x15a>
 8001e28:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8001e2c:	429d      	cmp	r5, r3
 8001e2e:	d867      	bhi.n	8001f00 <atanf+0x138>
 8001e30:	4601      	mov	r1, r0
 8001e32:	f7fe fc99 	bl	8000768 <__addsf3>
 8001e36:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001e3a:	f7fe fc93 	bl	8000764 <__aeabi_fsub>
 8001e3e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e42:	4605      	mov	r5, r0
 8001e44:	4620      	mov	r0, r4
 8001e46:	f7fe fc8f 	bl	8000768 <__addsf3>
 8001e4a:	4601      	mov	r1, r0
 8001e4c:	4628      	mov	r0, r5
 8001e4e:	f7fe fe47 	bl	8000ae0 <__aeabi_fdiv>
 8001e52:	2600      	movs	r6, #0
 8001e54:	4604      	mov	r4, r0
 8001e56:	4621      	mov	r1, r4
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f7fe fd8d 	bl	8000978 <__aeabi_fmul>
 8001e5e:	4601      	mov	r1, r0
 8001e60:	4607      	mov	r7, r0
 8001e62:	f7fe fd89 	bl	8000978 <__aeabi_fmul>
 8001e66:	4605      	mov	r5, r0
 8001e68:	494d      	ldr	r1, [pc, #308]	@ (8001fa0 <atanf+0x1d8>)
 8001e6a:	f7fe fd85 	bl	8000978 <__aeabi_fmul>
 8001e6e:	494d      	ldr	r1, [pc, #308]	@ (8001fa4 <atanf+0x1dc>)
 8001e70:	f7fe fc7a 	bl	8000768 <__addsf3>
 8001e74:	4629      	mov	r1, r5
 8001e76:	f7fe fd7f 	bl	8000978 <__aeabi_fmul>
 8001e7a:	494b      	ldr	r1, [pc, #300]	@ (8001fa8 <atanf+0x1e0>)
 8001e7c:	f7fe fc74 	bl	8000768 <__addsf3>
 8001e80:	4629      	mov	r1, r5
 8001e82:	f7fe fd79 	bl	8000978 <__aeabi_fmul>
 8001e86:	4949      	ldr	r1, [pc, #292]	@ (8001fac <atanf+0x1e4>)
 8001e88:	f7fe fc6e 	bl	8000768 <__addsf3>
 8001e8c:	4629      	mov	r1, r5
 8001e8e:	f7fe fd73 	bl	8000978 <__aeabi_fmul>
 8001e92:	4947      	ldr	r1, [pc, #284]	@ (8001fb0 <atanf+0x1e8>)
 8001e94:	f7fe fc68 	bl	8000768 <__addsf3>
 8001e98:	4629      	mov	r1, r5
 8001e9a:	f7fe fd6d 	bl	8000978 <__aeabi_fmul>
 8001e9e:	4945      	ldr	r1, [pc, #276]	@ (8001fb4 <atanf+0x1ec>)
 8001ea0:	f7fe fc62 	bl	8000768 <__addsf3>
 8001ea4:	4639      	mov	r1, r7
 8001ea6:	f7fe fd67 	bl	8000978 <__aeabi_fmul>
 8001eaa:	4943      	ldr	r1, [pc, #268]	@ (8001fb8 <atanf+0x1f0>)
 8001eac:	4607      	mov	r7, r0
 8001eae:	4628      	mov	r0, r5
 8001eb0:	f7fe fd62 	bl	8000978 <__aeabi_fmul>
 8001eb4:	4941      	ldr	r1, [pc, #260]	@ (8001fbc <atanf+0x1f4>)
 8001eb6:	f7fe fc55 	bl	8000764 <__aeabi_fsub>
 8001eba:	4629      	mov	r1, r5
 8001ebc:	f7fe fd5c 	bl	8000978 <__aeabi_fmul>
 8001ec0:	493f      	ldr	r1, [pc, #252]	@ (8001fc0 <atanf+0x1f8>)
 8001ec2:	f7fe fc4f 	bl	8000764 <__aeabi_fsub>
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	f7fe fd56 	bl	8000978 <__aeabi_fmul>
 8001ecc:	493d      	ldr	r1, [pc, #244]	@ (8001fc4 <atanf+0x1fc>)
 8001ece:	f7fe fc49 	bl	8000764 <__aeabi_fsub>
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	f7fe fd50 	bl	8000978 <__aeabi_fmul>
 8001ed8:	493b      	ldr	r1, [pc, #236]	@ (8001fc8 <atanf+0x200>)
 8001eda:	f7fe fc43 	bl	8000764 <__aeabi_fsub>
 8001ede:	4629      	mov	r1, r5
 8001ee0:	f7fe fd4a 	bl	8000978 <__aeabi_fmul>
 8001ee4:	4601      	mov	r1, r0
 8001ee6:	4638      	mov	r0, r7
 8001ee8:	f7fe fc3e 	bl	8000768 <__addsf3>
 8001eec:	4621      	mov	r1, r4
 8001eee:	f7fe fd43 	bl	8000978 <__aeabi_fmul>
 8001ef2:	1c73      	adds	r3, r6, #1
 8001ef4:	4601      	mov	r1, r0
 8001ef6:	d133      	bne.n	8001f60 <atanf+0x198>
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f7fe fc33 	bl	8000764 <__aeabi_fsub>
 8001efe:	e772      	b.n	8001de6 <atanf+0x1e>
 8001f00:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001f04:	f7fe fc2e 	bl	8000764 <__aeabi_fsub>
 8001f08:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001f0c:	4605      	mov	r5, r0
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f7fe fc2a 	bl	8000768 <__addsf3>
 8001f14:	4601      	mov	r1, r0
 8001f16:	4628      	mov	r0, r5
 8001f18:	f7fe fde2 	bl	8000ae0 <__aeabi_fdiv>
 8001f1c:	2601      	movs	r6, #1
 8001f1e:	4604      	mov	r4, r0
 8001f20:	e799      	b.n	8001e56 <atanf+0x8e>
 8001f22:	4b2a      	ldr	r3, [pc, #168]	@ (8001fcc <atanf+0x204>)
 8001f24:	429d      	cmp	r5, r3
 8001f26:	d814      	bhi.n	8001f52 <atanf+0x18a>
 8001f28:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8001f2c:	f7fe fc1a 	bl	8000764 <__aeabi_fsub>
 8001f30:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8001f34:	4605      	mov	r5, r0
 8001f36:	4620      	mov	r0, r4
 8001f38:	f7fe fd1e 	bl	8000978 <__aeabi_fmul>
 8001f3c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001f40:	f7fe fc12 	bl	8000768 <__addsf3>
 8001f44:	4601      	mov	r1, r0
 8001f46:	4628      	mov	r0, r5
 8001f48:	f7fe fdca 	bl	8000ae0 <__aeabi_fdiv>
 8001f4c:	2602      	movs	r6, #2
 8001f4e:	4604      	mov	r4, r0
 8001f50:	e781      	b.n	8001e56 <atanf+0x8e>
 8001f52:	4601      	mov	r1, r0
 8001f54:	481e      	ldr	r0, [pc, #120]	@ (8001fd0 <atanf+0x208>)
 8001f56:	f7fe fdc3 	bl	8000ae0 <__aeabi_fdiv>
 8001f5a:	2603      	movs	r6, #3
 8001f5c:	4604      	mov	r4, r0
 8001f5e:	e77a      	b.n	8001e56 <atanf+0x8e>
 8001f60:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd4 <atanf+0x20c>)
 8001f62:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8001f66:	f7fe fbfd 	bl	8000764 <__aeabi_fsub>
 8001f6a:	4621      	mov	r1, r4
 8001f6c:	f7fe fbfa 	bl	8000764 <__aeabi_fsub>
 8001f70:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <atanf+0x210>)
 8001f72:	4601      	mov	r1, r0
 8001f74:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8001f78:	f7fe fbf4 	bl	8000764 <__aeabi_fsub>
 8001f7c:	f1b8 0f00 	cmp.w	r8, #0
 8001f80:	4604      	mov	r4, r0
 8001f82:	f6bf af36 	bge.w	8001df2 <atanf+0x2a>
 8001f86:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8001f8a:	e732      	b.n	8001df2 <atanf+0x2a>
 8001f8c:	4c13      	ldr	r4, [pc, #76]	@ (8001fdc <atanf+0x214>)
 8001f8e:	e730      	b.n	8001df2 <atanf+0x2a>
 8001f90:	3fc90fdb 	.word	0x3fc90fdb
 8001f94:	3edfffff 	.word	0x3edfffff
 8001f98:	7149f2ca 	.word	0x7149f2ca
 8001f9c:	3f97ffff 	.word	0x3f97ffff
 8001fa0:	3c8569d7 	.word	0x3c8569d7
 8001fa4:	3d4bda59 	.word	0x3d4bda59
 8001fa8:	3d886b35 	.word	0x3d886b35
 8001fac:	3dba2e6e 	.word	0x3dba2e6e
 8001fb0:	3e124925 	.word	0x3e124925
 8001fb4:	3eaaaaab 	.word	0x3eaaaaab
 8001fb8:	bd15a221 	.word	0xbd15a221
 8001fbc:	3d6ef16b 	.word	0x3d6ef16b
 8001fc0:	3d9d8795 	.word	0x3d9d8795
 8001fc4:	3de38e38 	.word	0x3de38e38
 8001fc8:	3e4ccccd 	.word	0x3e4ccccd
 8001fcc:	401bffff 	.word	0x401bffff
 8001fd0:	bf800000 	.word	0xbf800000
 8001fd4:	08002074 	.word	0x08002074
 8001fd8:	08002084 	.word	0x08002084
 8001fdc:	bfc90fdb 	.word	0xbfc90fdb

08001fe0 <fabsf>:
 8001fe0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001fe4:	4770      	bx	lr
	...

08001fe8 <__errno>:
 8001fe8:	4b01      	ldr	r3, [pc, #4]	@ (8001ff0 <__errno+0x8>)
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <__libc_init_array>:
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	2600      	movs	r6, #0
 8001ff8:	4d0c      	ldr	r5, [pc, #48]	@ (800202c <__libc_init_array+0x38>)
 8001ffa:	4c0d      	ldr	r4, [pc, #52]	@ (8002030 <__libc_init_array+0x3c>)
 8001ffc:	1b64      	subs	r4, r4, r5
 8001ffe:	10a4      	asrs	r4, r4, #2
 8002000:	42a6      	cmp	r6, r4
 8002002:	d109      	bne.n	8002018 <__libc_init_array+0x24>
 8002004:	f000 f81a 	bl	800203c <_init>
 8002008:	2600      	movs	r6, #0
 800200a:	4d0a      	ldr	r5, [pc, #40]	@ (8002034 <__libc_init_array+0x40>)
 800200c:	4c0a      	ldr	r4, [pc, #40]	@ (8002038 <__libc_init_array+0x44>)
 800200e:	1b64      	subs	r4, r4, r5
 8002010:	10a4      	asrs	r4, r4, #2
 8002012:	42a6      	cmp	r6, r4
 8002014:	d105      	bne.n	8002022 <__libc_init_array+0x2e>
 8002016:	bd70      	pop	{r4, r5, r6, pc}
 8002018:	f855 3b04 	ldr.w	r3, [r5], #4
 800201c:	4798      	blx	r3
 800201e:	3601      	adds	r6, #1
 8002020:	e7ee      	b.n	8002000 <__libc_init_array+0xc>
 8002022:	f855 3b04 	ldr.w	r3, [r5], #4
 8002026:	4798      	blx	r3
 8002028:	3601      	adds	r6, #1
 800202a:	e7f2      	b.n	8002012 <__libc_init_array+0x1e>
 800202c:	08002094 	.word	0x08002094
 8002030:	08002094 	.word	0x08002094
 8002034:	08002094 	.word	0x08002094
 8002038:	08002098 	.word	0x08002098

0800203c <_init>:
 800203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203e:	bf00      	nop
 8002040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002042:	bc08      	pop	{r3}
 8002044:	469e      	mov	lr, r3
 8002046:	4770      	bx	lr

08002048 <_fini>:
 8002048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204a:	bf00      	nop
 800204c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800204e:	bc08      	pop	{r3}
 8002050:	469e      	mov	lr, r3
 8002052:	4770      	bx	lr
