
IMUReadingI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000478  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000584  08000584  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000584  08000584  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000584  08000584  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000584  08000584  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000584  08000584  00001584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000588  08000588  00001588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800058c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000590  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000590  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000107d  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000595  00000000  00000000  000030aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  00003640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000184  00000000  00000000  00003860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000152bb  00000000  00000000  000039e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020cc  00000000  00000000  00018c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b3a1  00000000  00000000  0001ad6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009610c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006e8  00000000  00000000  00096150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00096838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800056c 	.word	0x0800056c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800056c 	.word	0x0800056c

0800014c <main>:
void writePWM (float dutyCycle);
void initI2C();



int main(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	enableClk();
 8000150:	f000 f826 	bl	80001a0 <enableClk>
	configureIO();
 8000154:	f000 f80a 	bl	800016c <configureIO>


	initADC1();
 8000158:	f000 f84e 	bl	80001f8 <initADC1>
	initADC2();
 800015c:	f000 f8a4 	bl	80002a8 <initADC2>
	initPWM();
 8000160:	f000 f8fa 	bl	8000358 <initPWM>
	initI2C();
 8000164:	f000 f944 	bl	80003f0 <initI2C>



while (1) {
 8000168:	bf00      	nop
 800016a:	e7fd      	b.n	8000168 <main+0x1c>

0800016c <configureIO>:

}



void configureIO(){
 800016c:	b480      	push	{r7}
 800016e:	af00      	add	r7, sp, #0
	 * SDA -> B11
	 * SCL -> B10
	 *
	 * */

	GPIOA -> CRL = 0x444444A4;
 8000170:	4b06      	ldr	r3, [pc, #24]	@ (800018c <configureIO+0x20>)
 8000172:	4a07      	ldr	r2, [pc, #28]	@ (8000190 <configureIO+0x24>)
 8000174:	601a      	str	r2, [r3, #0]
	GPIOB -> CRL = 0x24444444;
 8000176:	4b07      	ldr	r3, [pc, #28]	@ (8000194 <configureIO+0x28>)
 8000178:	4a07      	ldr	r2, [pc, #28]	@ (8000198 <configureIO+0x2c>)
 800017a:	601a      	str	r2, [r3, #0]
	GPIOB -> CRH = 0x4424AA44;
 800017c:	4b05      	ldr	r3, [pc, #20]	@ (8000194 <configureIO+0x28>)
 800017e:	4a07      	ldr	r2, [pc, #28]	@ (800019c <configureIO+0x30>)
 8000180:	605a      	str	r2, [r3, #4]


}
 8000182:	bf00      	nop
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
 800018a:	bf00      	nop
 800018c:	40010800 	.word	0x40010800
 8000190:	444444a4 	.word	0x444444a4
 8000194:	40010c00 	.word	0x40010c00
 8000198:	24444444 	.word	0x24444444
 800019c:	4424aa44 	.word	0x4424aa44

080001a0 <enableClk>:

void enableClk(){
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= RCC_APB2ENR_IOPAEN;
 80001a4:	4b13      	ldr	r3, [pc, #76]	@ (80001f4 <enableClk+0x54>)
 80001a6:	699b      	ldr	r3, [r3, #24]
 80001a8:	4a12      	ldr	r2, [pc, #72]	@ (80001f4 <enableClk+0x54>)
 80001aa:	f043 0304 	orr.w	r3, r3, #4
 80001ae:	6193      	str	r3, [r2, #24]
	RCC -> APB2ENR |= RCC_APB2ENR_IOPBEN;
 80001b0:	4b10      	ldr	r3, [pc, #64]	@ (80001f4 <enableClk+0x54>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a0f      	ldr	r2, [pc, #60]	@ (80001f4 <enableClk+0x54>)
 80001b6:	f043 0308 	orr.w	r3, r3, #8
 80001ba:	6193      	str	r3, [r2, #24]
	RCC -> APB1ENR |= 0b11; //enable TIM2 & TIM3
 80001bc:	4b0d      	ldr	r3, [pc, #52]	@ (80001f4 <enableClk+0x54>)
 80001be:	69db      	ldr	r3, [r3, #28]
 80001c0:	4a0c      	ldr	r2, [pc, #48]	@ (80001f4 <enableClk+0x54>)
 80001c2:	f043 0303 	orr.w	r3, r3, #3
 80001c6:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80001c8:	4b0a      	ldr	r3, [pc, #40]	@ (80001f4 <enableClk+0x54>)
 80001ca:	69db      	ldr	r3, [r3, #28]
 80001cc:	4a09      	ldr	r2, [pc, #36]	@ (80001f4 <enableClk+0x54>)
 80001ce:	f043 0302 	orr.w	r3, r3, #2
 80001d2:	61d3      	str	r3, [r2, #28]
	RCC -> APB2ENR |= (1 << 9) | (1 << 10); // enable CLK for ADC1
 80001d4:	4b07      	ldr	r3, [pc, #28]	@ (80001f4 <enableClk+0x54>)
 80001d6:	699b      	ldr	r3, [r3, #24]
 80001d8:	4a06      	ldr	r2, [pc, #24]	@ (80001f4 <enableClk+0x54>)
 80001da:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80001de:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_I2C2EN; //enable I2C2 CLK
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <enableClk+0x54>)
 80001e2:	69db      	ldr	r3, [r3, #28]
 80001e4:	4a03      	ldr	r2, [pc, #12]	@ (80001f4 <enableClk+0x54>)
 80001e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80001ea:	61d3      	str	r3, [r2, #28]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <initADC1>:


void initADC1(){
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0

		ADC1->SQR1 = 0x00000000;  // Reset SQR1 (sequence length = 1 by default)
 80001fe:	4b29      	ldr	r3, [pc, #164]	@ (80002a4 <initADC1+0xac>)
 8000200:	2200      	movs	r2, #0
 8000202:	62da      	str	r2, [r3, #44]	@ 0x2c
		ADC1->SQR3 = 0; // Channel 0 first in the sequence
 8000204:	4b27      	ldr	r3, [pc, #156]	@ (80002a4 <initADC1+0xac>)
 8000206:	2200      	movs	r2, #0
 8000208:	635a      	str	r2, [r3, #52]	@ 0x34
		ADC1 -> SMPR2 &= 0; // reseting the sample time
 800020a:	4b26      	ldr	r3, [pc, #152]	@ (80002a4 <initADC1+0xac>)
 800020c:	691b      	ldr	r3, [r3, #16]
 800020e:	4b25      	ldr	r3, [pc, #148]	@ (80002a4 <initADC1+0xac>)
 8000210:	2200      	movs	r2, #0
 8000212:	611a      	str	r2, [r3, #16]
		ADC1->SMPR2 |= (0b010 << 0); // Channel 0 7.5 cycles
 8000214:	4b23      	ldr	r3, [pc, #140]	@ (80002a4 <initADC1+0xac>)
 8000216:	691b      	ldr	r3, [r3, #16]
 8000218:	4a22      	ldr	r2, [pc, #136]	@ (80002a4 <initADC1+0xac>)
 800021a:	f043 0302 	orr.w	r3, r3, #2
 800021e:	6113      	str	r3, [r2, #16]

		ADC1->CR2 |= ADC_CR2_ADON; // ADC on
 8000220:	4b20      	ldr	r3, [pc, #128]	@ (80002a4 <initADC1+0xac>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	4a1f      	ldr	r2, [pc, #124]	@ (80002a4 <initADC1+0xac>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6093      	str	r3, [r2, #8]
		for (volatile int i = 0; i < 10000; i++);  // Short delay
 800022c:	2300      	movs	r3, #0
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	e002      	b.n	8000238 <initADC1+0x40>
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	3301      	adds	r3, #1
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800023e:	4293      	cmp	r3, r2
 8000240:	ddf7      	ble.n	8000232 <initADC1+0x3a>

		ADC1->CR2 |= ADC_CR2_CAL;          // Start calibration
 8000242:	4b18      	ldr	r3, [pc, #96]	@ (80002a4 <initADC1+0xac>)
 8000244:	689b      	ldr	r3, [r3, #8]
 8000246:	4a17      	ldr	r2, [pc, #92]	@ (80002a4 <initADC1+0xac>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6093      	str	r3, [r2, #8]
		while (ADC1->CR2 & ADC_CR2_CAL);   // Wait for calibration to finish
 800024e:	bf00      	nop
 8000250:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <initADC1+0xac>)
 8000252:	689b      	ldr	r3, [r3, #8]
 8000254:	f003 0304 	and.w	r3, r3, #4
 8000258:	2b00      	cmp	r3, #0
 800025a:	d1f9      	bne.n	8000250 <initADC1+0x58>

		ADC1->CR2 |= ADC_CR2_EXTTRIG;  // Enable external trigger
 800025c:	4b11      	ldr	r3, [pc, #68]	@ (80002a4 <initADC1+0xac>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	4a10      	ldr	r2, [pc, #64]	@ (80002a4 <initADC1+0xac>)
 8000262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000266:	6093      	str	r3, [r2, #8]

		ADC1->CR2 &= ~ADC_CR2_EXTSEL;       // Clear EXTSEL bits
 8000268:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <initADC1+0xac>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	4a0d      	ldr	r2, [pc, #52]	@ (80002a4 <initADC1+0xac>)
 800026e:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8000272:	6093      	str	r3, [r2, #8]
		ADC1->CR2 |= (0b111 << 17);         // Set EXTSEL = 111 for SWSTART
 8000274:	4b0b      	ldr	r3, [pc, #44]	@ (80002a4 <initADC1+0xac>)
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	4a0a      	ldr	r2, [pc, #40]	@ (80002a4 <initADC1+0xac>)
 800027a:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 800027e:	6093      	str	r3, [r2, #8]

		ADC1->CR2 &= ~ADC_CR2_CONT;  // Clear CONT bit for single conversion mode
 8000280:	4b08      	ldr	r3, [pc, #32]	@ (80002a4 <initADC1+0xac>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	4a07      	ldr	r2, [pc, #28]	@ (80002a4 <initADC1+0xac>)
 8000286:	f023 0302 	bic.w	r3, r3, #2
 800028a:	6093      	str	r3, [r2, #8]

		ADC1->CR2 &= ~ADC_CR2_ALIGN;  // 0 = Right alignment (default)
 800028c:	4b05      	ldr	r3, [pc, #20]	@ (80002a4 <initADC1+0xac>)
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	4a04      	ldr	r2, [pc, #16]	@ (80002a4 <initADC1+0xac>)
 8000292:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000296:	6093      	str	r3, [r2, #8]

}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	bc80      	pop	{r7}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40012400 	.word	0x40012400

080002a8 <initADC2>:


void initADC2(){
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0

		ADC2->SQR1 = 0x00000000;  // Reset SQR1 (sequence length = 1 by default)
 80002ae:	4b29      	ldr	r3, [pc, #164]	@ (8000354 <initADC2+0xac>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	62da      	str	r2, [r3, #44]	@ 0x2c
		ADC2->SQR3 = 2; // Channel 2
 80002b4:	4b27      	ldr	r3, [pc, #156]	@ (8000354 <initADC2+0xac>)
 80002b6:	2202      	movs	r2, #2
 80002b8:	635a      	str	r2, [r3, #52]	@ 0x34
		ADC2 -> SMPR2 &= 0; // reseting the sample time
 80002ba:	4b26      	ldr	r3, [pc, #152]	@ (8000354 <initADC2+0xac>)
 80002bc:	691b      	ldr	r3, [r3, #16]
 80002be:	4b25      	ldr	r3, [pc, #148]	@ (8000354 <initADC2+0xac>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
		ADC2->SMPR2 |= (0b010 << 6); // Channel 2 7.5 cycles
 80002c4:	4b23      	ldr	r3, [pc, #140]	@ (8000354 <initADC2+0xac>)
 80002c6:	691b      	ldr	r3, [r3, #16]
 80002c8:	4a22      	ldr	r2, [pc, #136]	@ (8000354 <initADC2+0xac>)
 80002ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002ce:	6113      	str	r3, [r2, #16]

		ADC2->CR2 |= ADC_CR2_ADON; // ADC on
 80002d0:	4b20      	ldr	r3, [pc, #128]	@ (8000354 <initADC2+0xac>)
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	4a1f      	ldr	r2, [pc, #124]	@ (8000354 <initADC2+0xac>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	6093      	str	r3, [r2, #8]
		for (volatile int i = 0; i < 10000; i++);  // Short delay
 80002dc:	2300      	movs	r3, #0
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	e002      	b.n	80002e8 <initADC2+0x40>
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3301      	adds	r3, #1
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002ee:	4293      	cmp	r3, r2
 80002f0:	ddf7      	ble.n	80002e2 <initADC2+0x3a>

		ADC2->CR2 |= ADC_CR2_CAL;          // Start calibration
 80002f2:	4b18      	ldr	r3, [pc, #96]	@ (8000354 <initADC2+0xac>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	4a17      	ldr	r2, [pc, #92]	@ (8000354 <initADC2+0xac>)
 80002f8:	f043 0304 	orr.w	r3, r3, #4
 80002fc:	6093      	str	r3, [r2, #8]
		while (ADC2->CR2 & ADC_CR2_CAL);   // Wait for calibration to finish
 80002fe:	bf00      	nop
 8000300:	4b14      	ldr	r3, [pc, #80]	@ (8000354 <initADC2+0xac>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	2b00      	cmp	r3, #0
 800030a:	d1f9      	bne.n	8000300 <initADC2+0x58>

		ADC2->CR2 |= ADC_CR2_EXTTRIG;  // Enable external trigger
 800030c:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <initADC2+0xac>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	4a10      	ldr	r2, [pc, #64]	@ (8000354 <initADC2+0xac>)
 8000312:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000316:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_EXTSEL;       // Clear EXTSEL bits
 8000318:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <initADC2+0xac>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <initADC2+0xac>)
 800031e:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8000322:	6093      	str	r3, [r2, #8]
		ADC2->CR2 |= (0b111 << 17);         // Set EXTSEL = 111 for SWSTART
 8000324:	4b0b      	ldr	r3, [pc, #44]	@ (8000354 <initADC2+0xac>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	4a0a      	ldr	r2, [pc, #40]	@ (8000354 <initADC2+0xac>)
 800032a:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 800032e:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_CONT;  // Clear CONT bit for single conversion mode
 8000330:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <initADC2+0xac>)
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	4a07      	ldr	r2, [pc, #28]	@ (8000354 <initADC2+0xac>)
 8000336:	f023 0302 	bic.w	r3, r3, #2
 800033a:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_ALIGN;  // 0 = Right alignment (default)
 800033c:	4b05      	ldr	r3, [pc, #20]	@ (8000354 <initADC2+0xac>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	4a04      	ldr	r2, [pc, #16]	@ (8000354 <initADC2+0xac>)
 8000342:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000346:	6093      	str	r3, [r2, #8]

}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40012800 	.word	0x40012800

08000358 <initPWM>:

void freeMotor(){
	GPIOB->ODR &= ~((1 << 7) | (1 << 8));
}

void initPWM(){
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
	RCC ->APB1ENR |= RCC_APB1ENR_TIM2EN; //enable Timer
 800035c:	4b23      	ldr	r3, [pc, #140]	@ (80003ec <initPWM+0x94>)
 800035e:	69db      	ldr	r3, [r3, #28]
 8000360:	4a22      	ldr	r2, [pc, #136]	@ (80003ec <initPWM+0x94>)
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	61d3      	str	r3, [r2, #28]

	TIM2 -> PSC = 8 - 1;
 8000368:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800036c:	2207      	movs	r2, #7
 800036e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2 -> ARR = 1000 - 1;
 8000370:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000374:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000378:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CCMR1 |= (6 << 12); // mode 1 for ch2
 800037a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000384:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000388:	6193      	str	r3, [r2, #24]

	TIM2 -> CCR2 = 0; //duty Cycle =0
 800038a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800038e:	2200      	movs	r2, #0
 8000390:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM2->CCMR1 |= TIM_CCMR1_OC1PE; // Enable preload
 8000392:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800039c:	f043 0308 	orr.w	r3, r3, #8
 80003a0:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= TIM_CCER_CC2E;    // Enable output for CH1
 80003a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003a6:	6a1b      	ldr	r3, [r3, #32]
 80003a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003ac:	f043 0310 	orr.w	r3, r3, #16
 80003b0:	6213      	str	r3, [r2, #32]

	TIM2->CR1 |= TIM_CR1_ARPE;   // Enable auto-reload Preload
 80003b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003c0:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= TIM_EGR_UG;     // Force update to load registers
 80003c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6153      	str	r3, [r2, #20]

	TIM2->CR1 |= TIM_CR1_CEN;    // Enable timer
 80003d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6013      	str	r3, [r2, #0]

}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000

080003f0 <initI2C>:

	TIM2 -> CCR2 = (TIM2->ARR + 1) * dutyCycle / 100;

}

void initI2C(){
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0

	//enabled RCC
	//Configured IO as AF OD

	I2C2-> CR1 &= ~I2C_CR1_PE; // Disable I2C1 before configuring
 80003f4:	4b15      	ldr	r3, [pc, #84]	@ (800044c <initI2C+0x5c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a14      	ldr	r2, [pc, #80]	@ (800044c <initI2C+0x5c>)
 80003fa:	f023 0301 	bic.w	r3, r3, #1
 80003fe:	6013      	str	r3, [r2, #0]

	// Reset I2C1 peripheral
	I2C2-> CR1 |= I2C_CR1_SWRST;
 8000400:	4b12      	ldr	r3, [pc, #72]	@ (800044c <initI2C+0x5c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a11      	ldr	r2, [pc, #68]	@ (800044c <initI2C+0x5c>)
 8000406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800040a:	6013      	str	r3, [r2, #0]
	I2C2-> CR1 &= ~I2C_CR1_SWRST;
 800040c:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <initI2C+0x5c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a0e      	ldr	r2, [pc, #56]	@ (800044c <initI2C+0x5c>)
 8000412:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000416:	6013      	str	r3, [r2, #0]

	I2C2 -> CR2 = 8 ; // set Freq.
 8000418:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <initI2C+0x5c>)
 800041a:	2208      	movs	r2, #8
 800041c:	605a      	str	r2, [r3, #4]

	I2C2-> CCR &= ~I2C_CCR_FS;  // Standard mode
 800041e:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <initI2C+0x5c>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	4a0a      	ldr	r2, [pc, #40]	@ (800044c <initI2C+0x5c>)
 8000424:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000428:	61d3      	str	r3, [r2, #28]

	//I2C1->CCR &= ~I2C_CCR_DUTY; setting duty here is useless

	I2C2 -> CCR = 40;  // F/(2*speed) -> 8M / ( 2*100K )
 800042a:	4b08      	ldr	r3, [pc, #32]	@ (800044c <initI2C+0x5c>)
 800042c:	2228      	movs	r2, #40	@ 0x28
 800042e:	61da      	str	r2, [r3, #28]

	I2C2-> TRISE = 8 + 1 ;  // TRISE = Fpclk1(MHz) + 1 => 8 + 1
 8000430:	4b06      	ldr	r3, [pc, #24]	@ (800044c <initI2C+0x5c>)
 8000432:	2209      	movs	r2, #9
 8000434:	621a      	str	r2, [r3, #32]

	I2C2-> CR1 |= I2C_CR1_PE; //Enable I2C1
 8000436:	4b05      	ldr	r3, [pc, #20]	@ (800044c <initI2C+0x5c>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a04      	ldr	r2, [pc, #16]	@ (800044c <initI2C+0x5c>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6013      	str	r3, [r2, #0]


}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40005800 	.word	0x40005800

08000450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <NMI_Handler+0x4>

08000458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <HardFault_Handler+0x4>

08000460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <MemManage_Handler+0x4>

08000468 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <BusFault_Handler+0x4>

08000470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <UsageFault_Handler+0x4>

08000478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a0:	f000 f82e 	bl	8000500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004b4:	f7ff fff8 	bl	80004a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b8:	480b      	ldr	r0, [pc, #44]	@ (80004e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004ba:	490c      	ldr	r1, [pc, #48]	@ (80004ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004bc:	4a0c      	ldr	r2, [pc, #48]	@ (80004f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c0:	e002      	b.n	80004c8 <LoopCopyDataInit>

080004c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004c6:	3304      	adds	r3, #4

080004c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004cc:	d3f9      	bcc.n	80004c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ce:	4a09      	ldr	r2, [pc, #36]	@ (80004f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004d0:	4c09      	ldr	r4, [pc, #36]	@ (80004f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d4:	e001      	b.n	80004da <LoopFillZerobss>

080004d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d8:	3204      	adds	r2, #4

080004da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004dc:	d3fb      	bcc.n	80004d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004de:	f000 f821 	bl	8000524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004e2:	f7ff fe33 	bl	800014c <main>
  bx lr
 80004e6:	4770      	bx	lr
  ldr r0, =_sdata
 80004e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004f0:	0800058c 	.word	0x0800058c
  ldr r2, =_sbss
 80004f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004f8:	20000024 	.word	0x20000024

080004fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004fc:	e7fe      	b.n	80004fc <ADC1_2_IRQHandler>
	...

08000500 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <HAL_IncTick+0x1c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	461a      	mov	r2, r3
 800050a:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <HAL_IncTick+0x20>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4413      	add	r3, r2
 8000510:	4a03      	ldr	r2, [pc, #12]	@ (8000520 <HAL_IncTick+0x20>)
 8000512:	6013      	str	r3, [r2, #0]
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	20000000 	.word	0x20000000
 8000520:	20000020 	.word	0x20000020

08000524 <__libc_init_array>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	2600      	movs	r6, #0
 8000528:	4d0c      	ldr	r5, [pc, #48]	@ (800055c <__libc_init_array+0x38>)
 800052a:	4c0d      	ldr	r4, [pc, #52]	@ (8000560 <__libc_init_array+0x3c>)
 800052c:	1b64      	subs	r4, r4, r5
 800052e:	10a4      	asrs	r4, r4, #2
 8000530:	42a6      	cmp	r6, r4
 8000532:	d109      	bne.n	8000548 <__libc_init_array+0x24>
 8000534:	f000 f81a 	bl	800056c <_init>
 8000538:	2600      	movs	r6, #0
 800053a:	4d0a      	ldr	r5, [pc, #40]	@ (8000564 <__libc_init_array+0x40>)
 800053c:	4c0a      	ldr	r4, [pc, #40]	@ (8000568 <__libc_init_array+0x44>)
 800053e:	1b64      	subs	r4, r4, r5
 8000540:	10a4      	asrs	r4, r4, #2
 8000542:	42a6      	cmp	r6, r4
 8000544:	d105      	bne.n	8000552 <__libc_init_array+0x2e>
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	f855 3b04 	ldr.w	r3, [r5], #4
 800054c:	4798      	blx	r3
 800054e:	3601      	adds	r6, #1
 8000550:	e7ee      	b.n	8000530 <__libc_init_array+0xc>
 8000552:	f855 3b04 	ldr.w	r3, [r5], #4
 8000556:	4798      	blx	r3
 8000558:	3601      	adds	r6, #1
 800055a:	e7f2      	b.n	8000542 <__libc_init_array+0x1e>
 800055c:	08000584 	.word	0x08000584
 8000560:	08000584 	.word	0x08000584
 8000564:	08000584 	.word	0x08000584
 8000568:	08000588 	.word	0x08000588

0800056c <_init>:
 800056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056e:	bf00      	nop
 8000570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000572:	bc08      	pop	{r3}
 8000574:	469e      	mov	lr, r3
 8000576:	4770      	bx	lr

08000578 <_fini>:
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057a:	bf00      	nop
 800057c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057e:	bc08      	pop	{r3}
 8000580:	469e      	mov	lr, r3
 8000582:	4770      	bx	lr
