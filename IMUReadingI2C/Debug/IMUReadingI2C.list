
IMUReadingI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001594  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080016a0  080016a0  000026a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016e0  080016e0  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080016e0  080016e0  00003054  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080016e0  080016e0  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016e0  080016e0  000026e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080016e4  080016e4  000026e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080016e8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000054  0800173c  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  0800173c  000031e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001475  00000000  00000000  0000307d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000073a  00000000  00000000  000044f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  00004c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001a5  00000000  00000000  00004e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015da4  00000000  00000000  00005025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002688  00000000  00000000  0001adc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ee4f  00000000  00000000  0001d451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c2a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b6c  00000000  00000000  0009c2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0009ce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08001688 	.word	0x08001688

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08001688 	.word	0x08001688

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpun>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000700:	d102      	bne.n	8000708 <__aeabi_fcmpun+0x14>
 8000702:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000706:	d108      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000708:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800070c:	d102      	bne.n	8000714 <__aeabi_fcmpun+0x20>
 800070e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000712:	d102      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	4770      	bx	lr
 800071a:	f04f 0001 	mov.w	r0, #1
 800071e:	4770      	bx	lr

08000720 <__aeabi_f2uiz>:
 8000720:	0042      	lsls	r2, r0, #1
 8000722:	d20e      	bcs.n	8000742 <__aeabi_f2uiz+0x22>
 8000724:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000728:	d30b      	bcc.n	8000742 <__aeabi_f2uiz+0x22>
 800072a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800072e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000732:	d409      	bmi.n	8000748 <__aeabi_f2uiz+0x28>
 8000734:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000738:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073c:	fa23 f002 	lsr.w	r0, r3, r2
 8000740:	4770      	bx	lr
 8000742:	f04f 0000 	mov.w	r0, #0
 8000746:	4770      	bx	lr
 8000748:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800074c:	d101      	bne.n	8000752 <__aeabi_f2uiz+0x32>
 800074e:	0242      	lsls	r2, r0, #9
 8000750:	d102      	bne.n	8000758 <__aeabi_f2uiz+0x38>
 8000752:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000756:	4770      	bx	lr
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop

08000760 <Kalman_getAngle>:
    kf->P[0][1] = 0;
    kf->P[1][0] = 0;
    kf->P[1][1] = 0;
}

float Kalman_getAngle(Kalman_t *kf, float newAngle, float newRate, float dt) {
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b08b      	sub	sp, #44	@ 0x2c
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
 800076c:	603b      	str	r3, [r7, #0]
    // Predict
    kf->rate = newRate - kf->bias;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	4619      	mov	r1, r3
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff fced 	bl	8000154 <__aeabi_fsub>
 800077a:	4603      	mov	r3, r0
 800077c:	461a      	mov	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	609a      	str	r2, [r3, #8]
    kf->angle += dt * kf->rate;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	681c      	ldr	r4, [r3, #0]
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	6839      	ldr	r1, [r7, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fdeb 	bl	8000368 <__aeabi_fmul>
 8000792:	4603      	mov	r3, r0
 8000794:	4619      	mov	r1, r3
 8000796:	4620      	mov	r0, r4
 8000798:	f7ff fcde 	bl	8000158 <__addsf3>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	601a      	str	r2, [r3, #0]

    kf->P[0][0] += dt * (dt*kf->P[1][1] - kf->P[0][1] - kf->P[1][0] + Q_angle);
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	68dc      	ldr	r4, [r3, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	6839      	ldr	r1, [r7, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fdda 	bl	8000368 <__aeabi_fmul>
 80007b4:	4603      	mov	r3, r0
 80007b6:	461a      	mov	r2, r3
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	691b      	ldr	r3, [r3, #16]
 80007bc:	4619      	mov	r1, r3
 80007be:	4610      	mov	r0, r2
 80007c0:	f7ff fcc8 	bl	8000154 <__aeabi_fsub>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	695b      	ldr	r3, [r3, #20]
 80007cc:	4619      	mov	r1, r3
 80007ce:	4610      	mov	r0, r2
 80007d0:	f7ff fcc0 	bl	8000154 <__aeabi_fsub>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4967      	ldr	r1, [pc, #412]	@ (8000974 <Kalman_getAngle+0x214>)
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fcbd 	bl	8000158 <__addsf3>
 80007de:	4603      	mov	r3, r0
 80007e0:	6839      	ldr	r1, [r7, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fdc0 	bl	8000368 <__aeabi_fmul>
 80007e8:	4603      	mov	r3, r0
 80007ea:	4619      	mov	r1, r3
 80007ec:	4620      	mov	r0, r4
 80007ee:	f7ff fcb3 	bl	8000158 <__addsf3>
 80007f2:	4603      	mov	r3, r0
 80007f4:	461a      	mov	r2, r3
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	60da      	str	r2, [r3, #12]
    kf->P[0][1] -= dt * kf->P[1][1];
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	691c      	ldr	r4, [r3, #16]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	6839      	ldr	r1, [r7, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fdaf 	bl	8000368 <__aeabi_fmul>
 800080a:	4603      	mov	r3, r0
 800080c:	4619      	mov	r1, r3
 800080e:	4620      	mov	r0, r4
 8000810:	f7ff fca0 	bl	8000154 <__aeabi_fsub>
 8000814:	4603      	mov	r3, r0
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	611a      	str	r2, [r3, #16]
    kf->P[1][0] -= dt * kf->P[1][1];
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	695c      	ldr	r4, [r3, #20]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	6839      	ldr	r1, [r7, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fd9e 	bl	8000368 <__aeabi_fmul>
 800082c:	4603      	mov	r3, r0
 800082e:	4619      	mov	r1, r3
 8000830:	4620      	mov	r0, r4
 8000832:	f7ff fc8f 	bl	8000154 <__aeabi_fsub>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	615a      	str	r2, [r3, #20]
    kf->P[1][1] += Q_bias * dt;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	699c      	ldr	r4, [r3, #24]
 8000842:	494d      	ldr	r1, [pc, #308]	@ (8000978 <Kalman_getAngle+0x218>)
 8000844:	6838      	ldr	r0, [r7, #0]
 8000846:	f7ff fd8f 	bl	8000368 <__aeabi_fmul>
 800084a:	4603      	mov	r3, r0
 800084c:	4619      	mov	r1, r3
 800084e:	4620      	mov	r0, r4
 8000850:	f7ff fc82 	bl	8000158 <__addsf3>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	619a      	str	r2, [r3, #24]

    // Update
    float S = kf->P[0][0] + R_measure;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	4946      	ldr	r1, [pc, #280]	@ (800097c <Kalman_getAngle+0x21c>)
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fc78 	bl	8000158 <__addsf3>
 8000868:	4603      	mov	r3, r0
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
    float K[2];
    K[0] = kf->P[0][0] / S;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fe2c 	bl	80004d0 <__aeabi_fdiv>
 8000878:	4603      	mov	r3, r0
 800087a:	613b      	str	r3, [r7, #16]
    K[1] = kf->P[1][0] / S;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fe24 	bl	80004d0 <__aeabi_fdiv>
 8000888:	4603      	mov	r3, r0
 800088a:	617b      	str	r3, [r7, #20]

    float y = newAngle - kf->angle;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	68b8      	ldr	r0, [r7, #8]
 8000894:	f7ff fc5e 	bl	8000154 <__aeabi_fsub>
 8000898:	4603      	mov	r3, r0
 800089a:	623b      	str	r3, [r7, #32]

    kf->angle += K[0] * y;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	681c      	ldr	r4, [r3, #0]
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	6a39      	ldr	r1, [r7, #32]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fd5f 	bl	8000368 <__aeabi_fmul>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4619      	mov	r1, r3
 80008ae:	4620      	mov	r0, r4
 80008b0:	f7ff fc52 	bl	8000158 <__addsf3>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	601a      	str	r2, [r3, #0]
    kf->bias += K[1] * y;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	685c      	ldr	r4, [r3, #4]
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	6a39      	ldr	r1, [r7, #32]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fd4f 	bl	8000368 <__aeabi_fmul>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4619      	mov	r1, r3
 80008ce:	4620      	mov	r0, r4
 80008d0:	f7ff fc42 	bl	8000158 <__addsf3>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	605a      	str	r2, [r3, #4]

    float P00_temp = kf->P[0][0];
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	61fb      	str	r3, [r7, #28]
    float P01_temp = kf->P[0][1];
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	691b      	ldr	r3, [r3, #16]
 80008e6:	61bb      	str	r3, [r7, #24]

    kf->P[0][0] -= K[0] * P00_temp;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	68dc      	ldr	r4, [r3, #12]
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	69f9      	ldr	r1, [r7, #28]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fd39 	bl	8000368 <__aeabi_fmul>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4619      	mov	r1, r3
 80008fa:	4620      	mov	r0, r4
 80008fc:	f7ff fc2a 	bl	8000154 <__aeabi_fsub>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	60da      	str	r2, [r3, #12]
    kf->P[0][1] -= K[0] * P01_temp;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	691c      	ldr	r4, [r3, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	69b9      	ldr	r1, [r7, #24]
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fd29 	bl	8000368 <__aeabi_fmul>
 8000916:	4603      	mov	r3, r0
 8000918:	4619      	mov	r1, r3
 800091a:	4620      	mov	r0, r4
 800091c:	f7ff fc1a 	bl	8000154 <__aeabi_fsub>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	611a      	str	r2, [r3, #16]
    kf->P[1][0] -= K[1] * P00_temp;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	695c      	ldr	r4, [r3, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	69f9      	ldr	r1, [r7, #28]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fd19 	bl	8000368 <__aeabi_fmul>
 8000936:	4603      	mov	r3, r0
 8000938:	4619      	mov	r1, r3
 800093a:	4620      	mov	r0, r4
 800093c:	f7ff fc0a 	bl	8000154 <__aeabi_fsub>
 8000940:	4603      	mov	r3, r0
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	615a      	str	r2, [r3, #20]
    kf->P[1][1] -= K[1] * P01_temp;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	699c      	ldr	r4, [r3, #24]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	69b9      	ldr	r1, [r7, #24]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fd09 	bl	8000368 <__aeabi_fmul>
 8000956:	4603      	mov	r3, r0
 8000958:	4619      	mov	r1, r3
 800095a:	4620      	mov	r0, r4
 800095c:	f7ff fbfa 	bl	8000154 <__aeabi_fsub>
 8000960:	4603      	mov	r3, r0
 8000962:	461a      	mov	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	619a      	str	r2, [r3, #24]

    return kf->angle;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	372c      	adds	r7, #44	@ 0x2c
 8000970:	46bd      	mov	sp, r7
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	3a83126f 	.word	0x3a83126f
 8000978:	3b449ba6 	.word	0x3b449ba6
 800097c:	3cf5c28f 	.word	0x3cf5c28f

08000980 <main>:
#define GYRO_XOUT_H  0x43
#define DT 0.01f  // 10ms loop time = 100Hz



int main(void){
 8000980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000982:	b08f      	sub	sp, #60	@ 0x3c
 8000984:	af04      	add	r7, sp, #16
	enableClk();
 8000986:	f000 f8f9 	bl	8000b7c <enableClk>
	configureIO();
 800098a:	f000 f8dd 	bl	8000b48 <configureIO>


	initPWM();
 800098e:	f000 f96b 	bl	8000c68 <initPWM>
	initI2C();
 8000992:	f000 f9e1 	bl	8000d58 <initI2C>

	float roll = 0;   // X
 8000996:	f04f 0300 	mov.w	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
	float pitch = 0;  // Y
 800099c:	f04f 0300 	mov.w	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
	float yaw = 0;    // Z
 80009a2:	f04f 0300 	mov.w	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24



while (1) {

	freeMotor();
 80009a8:	f000 f950 	bl	8000c4c <freeMotor>
	setAngles(ax,  ay,  az,
 80009ac:	69b8      	ldr	r0, [r7, #24]
 80009ae:	697c      	ldr	r4, [r7, #20]
 80009b0:	693d      	ldr	r5, [r7, #16]
 80009b2:	68fe      	ldr	r6, [r7, #12]
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	f107 011c 	add.w	r1, r7, #28
 80009bc:	9103      	str	r1, [sp, #12]
 80009be:	f107 0120 	add.w	r1, r7, #32
 80009c2:	9102      	str	r1, [sp, #8]
 80009c4:	9201      	str	r2, [sp, #4]
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	4633      	mov	r3, r6
 80009ca:	462a      	mov	r2, r5
 80009cc:	4621      	mov	r1, r4
 80009ce:	f000 fb39 	bl	8001044 <setAngles>
              gx,  gy,  gz,
              &roll, &pitch);

	readIMUData(&ax, &ay, &az, &gx, &gy, &gz);
 80009d2:	f107 040c 	add.w	r4, r7, #12
 80009d6:	f107 0210 	add.w	r2, r7, #16
 80009da:	f107 0114 	add.w	r1, r7, #20
 80009de:	f107 0018 	add.w	r0, r7, #24
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	4623      	mov	r3, r4
 80009ee:	f000 fa17 	bl	8000e20 <readIMUData>

	setAngles(ax, ay, az, gx, gy, gz, &roll, &pitch);
 80009f2:	69b8      	ldr	r0, [r7, #24]
 80009f4:	697c      	ldr	r4, [r7, #20]
 80009f6:	693d      	ldr	r5, [r7, #16]
 80009f8:	68fe      	ldr	r6, [r7, #12]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	f107 011c 	add.w	r1, r7, #28
 8000a02:	9103      	str	r1, [sp, #12]
 8000a04:	f107 0120 	add.w	r1, r7, #32
 8000a08:	9102      	str	r1, [sp, #8]
 8000a0a:	9201      	str	r2, [sp, #4]
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	4633      	mov	r3, r6
 8000a10:	462a      	mov	r2, r5
 8000a12:	4621      	mov	r1, r4
 8000a14:	f000 fb16 	bl	8001044 <setAngles>

	yaw += gz * DT;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4948      	ldr	r1, [pc, #288]	@ (8000b3c <main+0x1bc>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fca3 	bl	8000368 <__aeabi_fmul>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4619      	mov	r1, r3
 8000a26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000a28:	f7ff fb96 	bl	8000158 <__addsf3>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24

	if (yaw >= 360.0f) yaw -= 360.0f;
 8000a30:	4943      	ldr	r1, [pc, #268]	@ (8000b40 <main+0x1c0>)
 8000a32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000a34:	f7ff fe4a 	bl	80006cc <__aeabi_fcmpge>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d005      	beq.n	8000a4a <main+0xca>
 8000a3e:	4940      	ldr	r1, [pc, #256]	@ (8000b40 <main+0x1c0>)
 8000a40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000a42:	f7ff fb87 	bl	8000154 <__aeabi_fsub>
 8000a46:	4603      	mov	r3, r0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
	if (yaw < 0.0f) yaw += 360.0f;
 8000a4a:	f04f 0100 	mov.w	r1, #0
 8000a4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000a50:	f7ff fe28 	bl	80006a4 <__aeabi_fcmplt>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d005      	beq.n	8000a66 <main+0xe6>
 8000a5a:	4939      	ldr	r1, [pc, #228]	@ (8000b40 <main+0x1c0>)
 8000a5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000a5e:	f7ff fb7b 	bl	8000158 <__addsf3>
 8000a62:	4603      	mov	r3, r0
 8000a64:	627b      	str	r3, [r7, #36]	@ 0x24
	if (roll >= 360.0f) roll -= 360.0f;
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	4935      	ldr	r1, [pc, #212]	@ (8000b40 <main+0x1c0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fe2e 	bl	80006cc <__aeabi_fcmpge>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d006      	beq.n	8000a84 <main+0x104>
 8000a76:	6a3b      	ldr	r3, [r7, #32]
 8000a78:	4931      	ldr	r1, [pc, #196]	@ (8000b40 <main+0x1c0>)
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fb6a 	bl	8000154 <__aeabi_fsub>
 8000a80:	4603      	mov	r3, r0
 8000a82:	623b      	str	r3, [r7, #32]
	if (roll < 0.0f) roll += 360.0f;
 8000a84:	6a3b      	ldr	r3, [r7, #32]
 8000a86:	f04f 0100 	mov.w	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fe0a 	bl	80006a4 <__aeabi_fcmplt>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d006      	beq.n	8000aa4 <main+0x124>
 8000a96:	6a3b      	ldr	r3, [r7, #32]
 8000a98:	4929      	ldr	r1, [pc, #164]	@ (8000b40 <main+0x1c0>)
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fb5c 	bl	8000158 <__addsf3>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	623b      	str	r3, [r7, #32]
	if (pitch >= 360.0f) pitch -= 360.0f;
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	4926      	ldr	r1, [pc, #152]	@ (8000b40 <main+0x1c0>)
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fe0f 	bl	80006cc <__aeabi_fcmpge>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d006      	beq.n	8000ac2 <main+0x142>
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	4922      	ldr	r1, [pc, #136]	@ (8000b40 <main+0x1c0>)
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fb4b 	bl	8000154 <__aeabi_fsub>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	61fb      	str	r3, [r7, #28]
	if (pitch < 0.0f) pitch += 360.0f;
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	f04f 0100 	mov.w	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fdeb 	bl	80006a4 <__aeabi_fcmplt>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d006      	beq.n	8000ae2 <main+0x162>
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	491a      	ldr	r1, [pc, #104]	@ (8000b40 <main+0x1c0>)
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fb3d 	bl	8000158 <__addsf3>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	61fb      	str	r3, [r7, #28]

	if (fabs(roll) > STABILITY_TOLERANCE){
 8000ae2:	6a3b      	ldr	r3, [r7, #32]
 8000ae4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ae8:	4916      	ldr	r1, [pc, #88]	@ (8000b44 <main+0x1c4>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fdf8 	bl	80006e0 <__aeabi_fcmpgt>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <main+0x17e>
		controlMotor(roll);
 8000af6:	6a3b      	ldr	r3, [r7, #32]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 f95d 	bl	8000db8 <controlMotor>
	}
	if (fabs(pitch) > STABILITY_TOLERANCE){
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000b04:	490f      	ldr	r1, [pc, #60]	@ (8000b44 <main+0x1c4>)
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fdea 	bl	80006e0 <__aeabi_fcmpgt>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <main+0x19a>
		controlMotor(pitch);
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 f94f 	bl	8000db8 <controlMotor>
	}
	if (fabs(yaw) > STABILITY_TOLERANCE){
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000b20:	4908      	ldr	r1, [pc, #32]	@ (8000b44 <main+0x1c4>)
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fddc 	bl	80006e0 <__aeabi_fcmpgt>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d002      	beq.n	8000b34 <main+0x1b4>
		controlMotor(yaw);
 8000b2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b30:	f000 f942 	bl	8000db8 <controlMotor>
	}

	delay(10);
 8000b34:	200a      	movs	r0, #10
 8000b36:	f000 f84d 	bl	8000bd4 <delay>
	freeMotor();
 8000b3a:	e735      	b.n	80009a8 <main+0x28>
 8000b3c:	3c23d70a 	.word	0x3c23d70a
 8000b40:	43b40000 	.word	0x43b40000
 8000b44:	41200000 	.word	0x41200000

08000b48 <configureIO>:


}


void configureIO(){
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	 * SDA -> B11
	 * SCL -> B10
	 *
	 * */

	GPIOA -> CRL = 0x444444A4;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <configureIO+0x20>)
 8000b4e:	4a07      	ldr	r2, [pc, #28]	@ (8000b6c <configureIO+0x24>)
 8000b50:	601a      	str	r2, [r3, #0]
	GPIOB -> CRL = 0x24444444;
 8000b52:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <configureIO+0x28>)
 8000b54:	4a07      	ldr	r2, [pc, #28]	@ (8000b74 <configureIO+0x2c>)
 8000b56:	601a      	str	r2, [r3, #0]
	GPIOB -> CRH = 0x4424AA44;
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <configureIO+0x28>)
 8000b5a:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <configureIO+0x30>)
 8000b5c:	605a      	str	r2, [r3, #4]


}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40010800 	.word	0x40010800
 8000b6c:	444444a4 	.word	0x444444a4
 8000b70:	40010c00 	.word	0x40010c00
 8000b74:	24444444 	.word	0x24444444
 8000b78:	4424aa44 	.word	0x4424aa44

08000b7c <enableClk>:

void enableClk(){
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000b80:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <enableClk+0x54>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a12      	ldr	r2, [pc, #72]	@ (8000bd0 <enableClk+0x54>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	6193      	str	r3, [r2, #24]
	RCC -> APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000b8c:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <enableClk+0x54>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd0 <enableClk+0x54>)
 8000b92:	f043 0308 	orr.w	r3, r3, #8
 8000b96:	6193      	str	r3, [r2, #24]
	RCC -> APB1ENR |= 0b11; //enable TIM2 & TIM3
 8000b98:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <enableClk+0x54>)
 8000b9a:	69db      	ldr	r3, [r3, #28]
 8000b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd0 <enableClk+0x54>)
 8000b9e:	f043 0303 	orr.w	r3, r3, #3
 8000ba2:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <enableClk+0x54>)
 8000ba6:	69db      	ldr	r3, [r3, #28]
 8000ba8:	4a09      	ldr	r2, [pc, #36]	@ (8000bd0 <enableClk+0x54>)
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	61d3      	str	r3, [r2, #28]
	RCC -> APB2ENR |= (1 << 9) | (1 << 10); // enable CLK for ADC1
 8000bb0:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <enableClk+0x54>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a06      	ldr	r2, [pc, #24]	@ (8000bd0 <enableClk+0x54>)
 8000bb6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8000bba:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_I2C2EN; //enable I2C2 CLK
 8000bbc:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <enableClk+0x54>)
 8000bbe:	69db      	ldr	r3, [r3, #28]
 8000bc0:	4a03      	ldr	r2, [pc, #12]	@ (8000bd0 <enableClk+0x54>)
 8000bc2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bc6:	61d3      	str	r3, [r2, #28]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <delay>:
	}
}



void delay(uint16_t t){
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
	TIM3 ->PSC = 8000-1;
 8000bde:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <delay+0x58>)
 8000be0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000be4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3 ->ARR = t-1;
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	1e5a      	subs	r2, r3, #1
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <delay+0x58>)
 8000bec:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3 ->CR1 |= TIM_CR1_CEN;
 8000bee:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <delay+0x58>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c2c <delay+0x58>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6013      	str	r3, [r2, #0]
	while(!(TIM3->SR & TIM_SR_UIF));
 8000bfa:	bf00      	nop
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <delay+0x58>)
 8000bfe:	691b      	ldr	r3, [r3, #16]
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0f9      	beq.n	8000bfc <delay+0x28>
	TIM3->SR &= ~TIM_SR_UIF;
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <delay+0x58>)
 8000c0a:	691b      	ldr	r3, [r3, #16]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	@ (8000c2c <delay+0x58>)
 8000c0e:	f023 0301 	bic.w	r3, r3, #1
 8000c12:	6113      	str	r3, [r2, #16]
	TIM3 ->CR1 &= ~(TIM_CR1_CEN);
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <delay+0x58>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a04      	ldr	r2, [pc, #16]	@ (8000c2c <delay+0x58>)
 8000c1a:	f023 0301 	bic.w	r3, r3, #1
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40000400 	.word	0x40000400

08000c30 <pressBreak>:
		default: break;
	}
}


void pressBreak(){
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
	GPIOB->ODR |= (1 << 7) | (1 << 8);
 8000c34:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <pressBreak+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	4a03      	ldr	r2, [pc, #12]	@ (8000c48 <pressBreak+0x18>)
 8000c3a:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8000c3e:	60d3      	str	r3, [r2, #12]

}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	40010c00 	.word	0x40010c00

08000c4c <freeMotor>:


void freeMotor(){
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~((1 << 7) | (1 << 8));
 8000c50:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <freeMotor+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	4a03      	ldr	r2, [pc, #12]	@ (8000c64 <freeMotor+0x18>)
 8000c56:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	40010c00 	.word	0x40010c00

08000c68 <initPWM>:

void initPWM(){
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
	RCC ->APB1ENR |= RCC_APB1ENR_TIM2EN; //enable Timer
 8000c6c:	4b23      	ldr	r3, [pc, #140]	@ (8000cfc <initPWM+0x94>)
 8000c6e:	69db      	ldr	r3, [r3, #28]
 8000c70:	4a22      	ldr	r2, [pc, #136]	@ (8000cfc <initPWM+0x94>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	61d3      	str	r3, [r2, #28]

	TIM2 -> PSC = 8 - 1;
 8000c78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2 -> ARR = 1000 - 1;
 8000c80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c88:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CCMR1 |= (6 << 12); // mode 1 for ch2
 8000c8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c94:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000c98:	6193      	str	r3, [r2, #24]

	TIM2 -> CCR2 = 0; //duty Cycle =0
 8000c9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM2->CCMR1 |= TIM_CCMR1_OC1PE; // Enable preload
 8000ca2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= TIM_CCER_CC2E;    // Enable output for CH1
 8000cb2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cb6:	6a1b      	ldr	r3, [r3, #32]
 8000cb8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cbc:	f043 0310 	orr.w	r3, r3, #16
 8000cc0:	6213      	str	r3, [r2, #32]

	TIM2->CR1 |= TIM_CR1_ARPE;   // Enable auto-reload Preload
 8000cc2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd0:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= TIM_EGR_UG;     // Force update to load registers
 8000cd2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6153      	str	r3, [r2, #20]

	TIM2->CR1 |= TIM_CR1_CEN;    // Enable timer
 8000ce2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6013      	str	r3, [r2, #0]

}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40021000 	.word	0x40021000

08000d00 <writePWM>:

void writePWM (float dutyCycle){
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	if (dutyCycle > 100){
 8000d08:	4912      	ldr	r1, [pc, #72]	@ (8000d54 <writePWM+0x54>)
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff fce8 	bl	80006e0 <__aeabi_fcmpgt>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <writePWM+0x1a>
		dutyCycle = 100;
 8000d16:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <writePWM+0x54>)
 8000d18:	607b      	str	r3, [r7, #4]
	}

	TIM2 -> CCR2 = (TIM2->ARR + 1) * dutyCycle / 100;
 8000d1a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d20:	3301      	adds	r3, #1
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fac8 	bl	80002b8 <__aeabi_ui2f>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fb1b 	bl	8000368 <__aeabi_fmul>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4907      	ldr	r1, [pc, #28]	@ (8000d54 <writePWM+0x54>)
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fbca 	bl	80004d0 <__aeabi_fdiv>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fcec 	bl	8000720 <__aeabi_f2uiz>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	63a3      	str	r3, [r4, #56]	@ 0x38

}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	42c80000 	.word	0x42c80000

08000d58 <initI2C>:

void initI2C(){
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

	//enabled RCC
	//Configured IO as AF OD

	I2C2-> CR1 &= ~I2C_CR1_PE; // Disable I2C1 before configuring
 8000d5c:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <initI2C+0x5c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a14      	ldr	r2, [pc, #80]	@ (8000db4 <initI2C+0x5c>)
 8000d62:	f023 0301 	bic.w	r3, r3, #1
 8000d66:	6013      	str	r3, [r2, #0]

	// Reset I2C1 peripheral
	I2C2-> CR1 |= I2C_CR1_SWRST;
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <initI2C+0x5c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a11      	ldr	r2, [pc, #68]	@ (8000db4 <initI2C+0x5c>)
 8000d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d72:	6013      	str	r3, [r2, #0]
	I2C2-> CR1 &= ~I2C_CR1_SWRST;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <initI2C+0x5c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0e      	ldr	r2, [pc, #56]	@ (8000db4 <initI2C+0x5c>)
 8000d7a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000d7e:	6013      	str	r3, [r2, #0]

	I2C2 -> CR2 = 8 ; // set Freq.
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <initI2C+0x5c>)
 8000d82:	2208      	movs	r2, #8
 8000d84:	605a      	str	r2, [r3, #4]

	I2C2-> CCR &= ~I2C_CCR_FS;  // Standard mode
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <initI2C+0x5c>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <initI2C+0x5c>)
 8000d8c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000d90:	61d3      	str	r3, [r2, #28]

	//I2C1->CCR &= ~I2C_CCR_DUTY; setting duty here is useless

	I2C2 -> CCR = 40;  // F/(2*speed) -> 8M / ( 2*100K )
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <initI2C+0x5c>)
 8000d94:	2228      	movs	r2, #40	@ 0x28
 8000d96:	61da      	str	r2, [r3, #28]

	I2C2-> TRISE = 8 + 1 ;  // TRISE = Fpclk1(MHz) + 1 => 8 + 1
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <initI2C+0x5c>)
 8000d9a:	2209      	movs	r2, #9
 8000d9c:	621a      	str	r2, [r3, #32]

	I2C2-> CR1 |= I2C_CR1_PE; //Enable I2C1
 8000d9e:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <initI2C+0x5c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <initI2C+0x5c>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6013      	str	r3, [r2, #0]


}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40005800 	.word	0x40005800

08000db8 <controlMotor>:

void controlMotor(float angle) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
    if (fabsf(angle) < STABILITY_TOLERANCE) {
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000dc6:	4913      	ldr	r1, [pc, #76]	@ (8000e14 <controlMotor+0x5c>)
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fc6b 	bl	80006a4 <__aeabi_fcmplt>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <controlMotor+0x22>
        pressBreak();
 8000dd4:	f7ff ff2c 	bl	8000c30 <pressBreak>
        return;
 8000dd8:	e019      	b.n	8000e0e <controlMotor+0x56>
    }

    //uint8_t dir = (angle > 0) ? 0 : 1;
    //setRotationDir(dir);

    float dutyCycle = fabsf(angle) / 90.0f * 100.0f;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000de0:	490d      	ldr	r1, [pc, #52]	@ (8000e18 <controlMotor+0x60>)
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fb74 	bl	80004d0 <__aeabi_fdiv>
 8000de8:	4603      	mov	r3, r0
 8000dea:	490c      	ldr	r1, [pc, #48]	@ (8000e1c <controlMotor+0x64>)
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fabb 	bl	8000368 <__aeabi_fmul>
 8000df2:	4603      	mov	r3, r0
 8000df4:	60fb      	str	r3, [r7, #12]
    if (dutyCycle > 100.0f) dutyCycle = 100.0f;
 8000df6:	4909      	ldr	r1, [pc, #36]	@ (8000e1c <controlMotor+0x64>)
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f7ff fc71 	bl	80006e0 <__aeabi_fcmpgt>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <controlMotor+0x50>
 8000e04:	4b05      	ldr	r3, [pc, #20]	@ (8000e1c <controlMotor+0x64>)
 8000e06:	60fb      	str	r3, [r7, #12]

    writePWM(dutyCycle);
 8000e08:	68f8      	ldr	r0, [r7, #12]
 8000e0a:	f7ff ff79 	bl	8000d00 <writePWM>
}
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	41200000 	.word	0x41200000
 8000e18:	42b40000 	.word	0x42b40000
 8000e1c:	42c80000 	.word	0x42c80000

08000e20 <readIMUData>:
    while (!(I2C2->SR1 & I2C_SR1_BTF));
    I2C2->CR1 |= I2C_CR1_STOP;
}

void readIMUData(float* ax, float* ay, float* az,
                 float* gx, float* gy, float* gz) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	@ 0x30
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	603b      	str	r3, [r7, #0]
    uint8_t rawData[14];

    // Start communication
    I2C2->CR1 |= I2C_CR1_START;
 8000e2e:	4b83      	ldr	r3, [pc, #524]	@ (800103c <readIMUData+0x21c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a82      	ldr	r2, [pc, #520]	@ (800103c <readIMUData+0x21c>)
 8000e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e38:	6013      	str	r3, [r2, #0]
    while (!(I2C2->SR1 & I2C_SR1_SB));
 8000e3a:	bf00      	nop
 8000e3c:	4b7f      	ldr	r3, [pc, #508]	@ (800103c <readIMUData+0x21c>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0f9      	beq.n	8000e3c <readIMUData+0x1c>
    (void)I2C2->SR1;
 8000e48:	4b7c      	ldr	r3, [pc, #496]	@ (800103c <readIMUData+0x21c>)
 8000e4a:	695b      	ldr	r3, [r3, #20]

    I2C2->DR = MPU6050_ADDR << 1; // Write
 8000e4c:	4b7b      	ldr	r3, [pc, #492]	@ (800103c <readIMUData+0x21c>)
 8000e4e:	22d0      	movs	r2, #208	@ 0xd0
 8000e50:	611a      	str	r2, [r3, #16]
    while (!(I2C2->SR1 & I2C_SR1_ADDR));
 8000e52:	bf00      	nop
 8000e54:	4b79      	ldr	r3, [pc, #484]	@ (800103c <readIMUData+0x21c>)
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0f9      	beq.n	8000e54 <readIMUData+0x34>
    (void)I2C2->SR1; (void)I2C2->SR2;
 8000e60:	4b76      	ldr	r3, [pc, #472]	@ (800103c <readIMUData+0x21c>)
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	4b75      	ldr	r3, [pc, #468]	@ (800103c <readIMUData+0x21c>)
 8000e66:	699b      	ldr	r3, [r3, #24]

    while (!(I2C2->SR1 & I2C_SR1_TXE));
 8000e68:	bf00      	nop
 8000e6a:	4b74      	ldr	r3, [pc, #464]	@ (800103c <readIMUData+0x21c>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f9      	beq.n	8000e6a <readIMUData+0x4a>
    I2C2->DR = ACCEL_XOUT_H;
 8000e76:	4b71      	ldr	r3, [pc, #452]	@ (800103c <readIMUData+0x21c>)
 8000e78:	223b      	movs	r2, #59	@ 0x3b
 8000e7a:	611a      	str	r2, [r3, #16]

    while (!(I2C2->SR1 & I2C_SR1_TXE));
 8000e7c:	bf00      	nop
 8000e7e:	4b6f      	ldr	r3, [pc, #444]	@ (800103c <readIMUData+0x21c>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0f9      	beq.n	8000e7e <readIMUData+0x5e>
    I2C2->CR1 |= I2C_CR1_START; // Repeated start
 8000e8a:	4b6c      	ldr	r3, [pc, #432]	@ (800103c <readIMUData+0x21c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a6b      	ldr	r2, [pc, #428]	@ (800103c <readIMUData+0x21c>)
 8000e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e94:	6013      	str	r3, [r2, #0]
    while (!(I2C2->SR1 & I2C_SR1_SB));
 8000e96:	bf00      	nop
 8000e98:	4b68      	ldr	r3, [pc, #416]	@ (800103c <readIMUData+0x21c>)
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0f9      	beq.n	8000e98 <readIMUData+0x78>
    (void)I2C2->SR1;
 8000ea4:	4b65      	ldr	r3, [pc, #404]	@ (800103c <readIMUData+0x21c>)
 8000ea6:	695b      	ldr	r3, [r3, #20]

    I2C2->DR = (MPU6050_ADDR << 1) | 0x01; // Read
 8000ea8:	4b64      	ldr	r3, [pc, #400]	@ (800103c <readIMUData+0x21c>)
 8000eaa:	22d1      	movs	r2, #209	@ 0xd1
 8000eac:	611a      	str	r2, [r3, #16]
    while (!(I2C2->SR1 & I2C_SR1_ADDR));
 8000eae:	bf00      	nop
 8000eb0:	4b62      	ldr	r3, [pc, #392]	@ (800103c <readIMUData+0x21c>)
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f9      	beq.n	8000eb0 <readIMUData+0x90>
    (void)I2C2->SR1; (void)I2C2->SR2;
 8000ebc:	4b5f      	ldr	r3, [pc, #380]	@ (800103c <readIMUData+0x21c>)
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	4b5e      	ldr	r3, [pc, #376]	@ (800103c <readIMUData+0x21c>)
 8000ec2:	699b      	ldr	r3, [r3, #24]

    for (int i = 0; i < 13; i++) {
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ec8:	e012      	b.n	8000ef0 <readIMUData+0xd0>
        while (!(I2C2->SR1 & I2C_SR1_RXNE));
 8000eca:	bf00      	nop
 8000ecc:	4b5b      	ldr	r3, [pc, #364]	@ (800103c <readIMUData+0x21c>)
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0f9      	beq.n	8000ecc <readIMUData+0xac>
        rawData[i] = I2C2->DR;
 8000ed8:	4b58      	ldr	r3, [pc, #352]	@ (800103c <readIMUData+0x21c>)
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	b2d9      	uxtb	r1, r3
 8000ede:	f107 0210 	add.w	r2, r7, #16
 8000ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee4:	4413      	add	r3, r2
 8000ee6:	460a      	mov	r2, r1
 8000ee8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 13; i++) {
 8000eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eec:	3301      	adds	r3, #1
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ef2:	2b0c      	cmp	r3, #12
 8000ef4:	dde9      	ble.n	8000eca <readIMUData+0xaa>
    }

    I2C2->CR1 &= ~I2C_CR1_ACK; // NACK
 8000ef6:	4b51      	ldr	r3, [pc, #324]	@ (800103c <readIMUData+0x21c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a50      	ldr	r2, [pc, #320]	@ (800103c <readIMUData+0x21c>)
 8000efc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000f00:	6013      	str	r3, [r2, #0]
    I2C2->CR1 |= I2C_CR1_STOP;
 8000f02:	4b4e      	ldr	r3, [pc, #312]	@ (800103c <readIMUData+0x21c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a4d      	ldr	r2, [pc, #308]	@ (800103c <readIMUData+0x21c>)
 8000f08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f0c:	6013      	str	r3, [r2, #0]
    while (!(I2C2->SR1 & I2C_SR1_RXNE));
 8000f0e:	bf00      	nop
 8000f10:	4b4a      	ldr	r3, [pc, #296]	@ (800103c <readIMUData+0x21c>)
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0f9      	beq.n	8000f10 <readIMUData+0xf0>
    rawData[13] = I2C2->DR;
 8000f1c:	4b47      	ldr	r3, [pc, #284]	@ (800103c <readIMUData+0x21c>)
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	777b      	strb	r3, [r7, #29]

    int16_t ax_raw = (rawData[0] << 8) | rawData[1];
 8000f24:	7c3b      	ldrb	r3, [r7, #16]
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	7c7b      	ldrb	r3, [r7, #17]
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	857b      	strh	r3, [r7, #42]	@ 0x2a
    int16_t ay_raw = (rawData[2] << 8) | rawData[3];
 8000f34:	7cbb      	ldrb	r3, [r7, #18]
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	021b      	lsls	r3, r3, #8
 8000f3a:	b21a      	sxth	r2, r3
 8000f3c:	7cfb      	ldrb	r3, [r7, #19]
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	4313      	orrs	r3, r2
 8000f42:	853b      	strh	r3, [r7, #40]	@ 0x28
    int16_t az_raw = (rawData[4] << 8) | rawData[5];
 8000f44:	7d3b      	ldrb	r3, [r7, #20]
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	7d7b      	ldrb	r3, [r7, #21]
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	84fb      	strh	r3, [r7, #38]	@ 0x26
    int16_t gx_raw = (rawData[8] << 8) | rawData[9];
 8000f54:	7e3b      	ldrb	r3, [r7, #24]
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	7e7b      	ldrb	r3, [r7, #25]
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	4313      	orrs	r3, r2
 8000f62:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int16_t gy_raw = (rawData[10] << 8) | rawData[11];
 8000f64:	7ebb      	ldrb	r3, [r7, #26]
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	b21a      	sxth	r2, r3
 8000f6c:	7efb      	ldrb	r3, [r7, #27]
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	4313      	orrs	r3, r2
 8000f72:	847b      	strh	r3, [r7, #34]	@ 0x22
    int16_t gz_raw = (rawData[12] << 8) | rawData[13];
 8000f74:	7f3b      	ldrb	r3, [r7, #28]
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	7f7b      	ldrb	r3, [r7, #29]
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	843b      	strh	r3, [r7, #32]

    // Convert raw to physical units (example: depends on sensitivity settings)
    *ax = ax_raw / 16384.0f;  // Assuming ±2g
 8000f84:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff f999 	bl	80002c0 <__aeabi_i2f>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fa9b 	bl	80004d0 <__aeabi_fdiv>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	601a      	str	r2, [r3, #0]
    *ay = ay_raw / 16384.0f;
 8000fa2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff f98a 	bl	80002c0 <__aeabi_i2f>
 8000fac:	4603      	mov	r3, r0
 8000fae:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fa8c 	bl	80004d0 <__aeabi_fdiv>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	601a      	str	r2, [r3, #0]
    *az = az_raw / 16384.0f;
 8000fc0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff f97b 	bl	80002c0 <__aeabi_i2f>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa7d 	bl	80004d0 <__aeabi_fdiv>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	601a      	str	r2, [r3, #0]
    *gx = gx_raw / 131.0f;    // Assuming ±250°/s
 8000fde:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff f96c 	bl	80002c0 <__aeabi_i2f>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4915      	ldr	r1, [pc, #84]	@ (8001040 <readIMUData+0x220>)
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fa6f 	bl	80004d0 <__aeabi_fdiv>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	601a      	str	r2, [r3, #0]
    *gy = gy_raw / 131.0f;
 8000ffa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff f95e 	bl	80002c0 <__aeabi_i2f>
 8001004:	4603      	mov	r3, r0
 8001006:	490e      	ldr	r1, [pc, #56]	@ (8001040 <readIMUData+0x220>)
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa61 	bl	80004d0 <__aeabi_fdiv>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001014:	601a      	str	r2, [r3, #0]
    *gz = gz_raw / 131.0f;
 8001016:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff f950 	bl	80002c0 <__aeabi_i2f>
 8001020:	4603      	mov	r3, r0
 8001022:	4907      	ldr	r1, [pc, #28]	@ (8001040 <readIMUData+0x220>)
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fa53 	bl	80004d0 <__aeabi_fdiv>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001030:	601a      	str	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	3730      	adds	r7, #48	@ 0x30
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40005800 	.word	0x40005800
 8001040:	43030000 	.word	0x43030000

08001044 <setAngles>:


void setAngles(float ax, float ay, float az,
               float gx, float gy, float gz,
               float* roll, float* pitch) {
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	603b      	str	r3, [r7, #0]

    float accel_roll  = atan2f(ay, az) * RAD_TO_DEG;
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	68b8      	ldr	r0, [r7, #8]
 8001056:	f000 f8c9 	bl	80011ec <atan2f>
 800105a:	4603      	mov	r3, r0
 800105c:	4928      	ldr	r1, [pc, #160]	@ (8001100 <setAngles+0xbc>)
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f982 	bl	8000368 <__aeabi_fmul>
 8001064:	4603      	mov	r3, r0
 8001066:	61fb      	str	r3, [r7, #28]
    float accel_pitch = atan2f(-ax, sqrtf(ay * ay + az * az)) * RAD_TO_DEG;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 800106e:	68b9      	ldr	r1, [r7, #8]
 8001070:	68b8      	ldr	r0, [r7, #8]
 8001072:	f7ff f979 	bl	8000368 <__aeabi_fmul>
 8001076:	4603      	mov	r3, r0
 8001078:	461d      	mov	r5, r3
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff f973 	bl	8000368 <__aeabi_fmul>
 8001082:	4603      	mov	r3, r0
 8001084:	4619      	mov	r1, r3
 8001086:	4628      	mov	r0, r5
 8001088:	f7ff f866 	bl	8000158 <__addsf3>
 800108c:	4603      	mov	r3, r0
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f8ae 	bl	80011f0 <sqrtf>
 8001094:	4603      	mov	r3, r0
 8001096:	4619      	mov	r1, r3
 8001098:	4620      	mov	r0, r4
 800109a:	f000 f8a7 	bl	80011ec <atan2f>
 800109e:	4603      	mov	r3, r0
 80010a0:	4917      	ldr	r1, [pc, #92]	@ (8001100 <setAngles+0xbc>)
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff f960 	bl	8000368 <__aeabi_fmul>
 80010a8:	4603      	mov	r3, r0
 80010aa:	61bb      	str	r3, [r7, #24]

    static uint32_t lastTime = 0;
    uint32_t now = SysTick->VAL;
 80010ac:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <setAngles+0xc0>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	617b      	str	r3, [r7, #20]
    float dt = (now - lastTime) / 8000000.0f;
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <setAngles+0xc4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f8fc 	bl	80002b8 <__aeabi_ui2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4912      	ldr	r1, [pc, #72]	@ (800110c <setAngles+0xc8>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fa03 	bl	80004d0 <__aeabi_fdiv>
 80010ca:	4603      	mov	r3, r0
 80010cc:	613b      	str	r3, [r7, #16]
    lastTime = now;
 80010ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001108 <setAngles+0xc4>)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	6013      	str	r3, [r2, #0]

    *roll = Kalman_getAngle(&kalmanRoll, accel_roll, gx, dt);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	69f9      	ldr	r1, [r7, #28]
 80010da:	480d      	ldr	r0, [pc, #52]	@ (8001110 <setAngles+0xcc>)
 80010dc:	f7ff fb40 	bl	8000760 <Kalman_getAngle>
 80010e0:	4602      	mov	r2, r0
 80010e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010e4:	601a      	str	r2, [r3, #0]
    *pitch = Kalman_getAngle(&kalmanPitch, accel_pitch, gy, dt);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010ea:	69b9      	ldr	r1, [r7, #24]
 80010ec:	4809      	ldr	r0, [pc, #36]	@ (8001114 <setAngles+0xd0>)
 80010ee:	f7ff fb37 	bl	8000760 <Kalman_getAngle>
 80010f2:	4602      	mov	r2, r0
 80010f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010f6:	601a      	str	r2, [r3, #0]
}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001100:	42652ee1 	.word	0x42652ee1
 8001104:	e000e010 	.word	0xe000e010
 8001108:	200000a8 	.word	0x200000a8
 800110c:	4af42400 	.word	0x4af42400
 8001110:	20000070 	.word	0x20000070
 8001114:	2000008c 	.word	0x2000008c

08001118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <NMI_Handler+0x4>

08001120 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <MemManage_Handler+0x4>

08001130 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <UsageFault_Handler+0x4>

08001140 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001168:	f000 f82e 	bl	80011c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800117c:	f7ff fff8 	bl	8001170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001180:	480b      	ldr	r0, [pc, #44]	@ (80011b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001182:	490c      	ldr	r1, [pc, #48]	@ (80011b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001184:	4a0c      	ldr	r2, [pc, #48]	@ (80011b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a09      	ldr	r2, [pc, #36]	@ (80011bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001198:	4c09      	ldr	r4, [pc, #36]	@ (80011c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a6:	f000 fa4b 	bl	8001640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011aa:	f7ff fbe9 	bl	8000980 <main>
  bx lr
 80011ae:	4770      	bx	lr
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80011b8:	080016e8 	.word	0x080016e8
  ldr r2, =_sbss
 80011bc:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80011c0:	200001e8 	.word	0x200001e8

080011c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC1_2_IRQHandler>
	...

080011c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <HAL_IncTick+0x1c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <HAL_IncTick+0x20>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a03      	ldr	r2, [pc, #12]	@ (80011e8 <HAL_IncTick+0x20>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	20000000 	.word	0x20000000
 80011e8:	200000ac 	.word	0x200000ac

080011ec <atan2f>:
 80011ec:	f000 b88a 	b.w	8001304 <__ieee754_atan2f>

080011f0 <sqrtf>:
 80011f0:	b538      	push	{r3, r4, r5, lr}
 80011f2:	4605      	mov	r5, r0
 80011f4:	f000 f816 	bl	8001224 <__ieee754_sqrtf>
 80011f8:	4629      	mov	r1, r5
 80011fa:	4604      	mov	r4, r0
 80011fc:	4628      	mov	r0, r5
 80011fe:	f7ff fa79 	bl	80006f4 <__aeabi_fcmpun>
 8001202:	b968      	cbnz	r0, 8001220 <sqrtf+0x30>
 8001204:	2100      	movs	r1, #0
 8001206:	4628      	mov	r0, r5
 8001208:	f7ff fa4c 	bl	80006a4 <__aeabi_fcmplt>
 800120c:	b140      	cbz	r0, 8001220 <sqrtf+0x30>
 800120e:	f000 fa11 	bl	8001634 <__errno>
 8001212:	2321      	movs	r3, #33	@ 0x21
 8001214:	2100      	movs	r1, #0
 8001216:	6003      	str	r3, [r0, #0]
 8001218:	4608      	mov	r0, r1
 800121a:	f7ff f959 	bl	80004d0 <__aeabi_fdiv>
 800121e:	4604      	mov	r4, r0
 8001220:	4620      	mov	r0, r4
 8001222:	bd38      	pop	{r3, r4, r5, pc}

08001224 <__ieee754_sqrtf>:
 8001224:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8001228:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800122c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001230:	4603      	mov	r3, r0
 8001232:	4604      	mov	r4, r0
 8001234:	d30a      	bcc.n	800124c <__ieee754_sqrtf+0x28>
 8001236:	4601      	mov	r1, r0
 8001238:	f7ff f896 	bl	8000368 <__aeabi_fmul>
 800123c:	4601      	mov	r1, r0
 800123e:	4620      	mov	r0, r4
 8001240:	f7fe ff8a 	bl	8000158 <__addsf3>
 8001244:	4604      	mov	r4, r0
 8001246:	4620      	mov	r0, r4
 8001248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800124c:	2a00      	cmp	r2, #0
 800124e:	d0fa      	beq.n	8001246 <__ieee754_sqrtf+0x22>
 8001250:	2800      	cmp	r0, #0
 8001252:	da06      	bge.n	8001262 <__ieee754_sqrtf+0x3e>
 8001254:	4601      	mov	r1, r0
 8001256:	f7fe ff7d 	bl	8000154 <__aeabi_fsub>
 800125a:	4601      	mov	r1, r0
 800125c:	f7ff f938 	bl	80004d0 <__aeabi_fdiv>
 8001260:	e7f0      	b.n	8001244 <__ieee754_sqrtf+0x20>
 8001262:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8001266:	d03c      	beq.n	80012e2 <__ieee754_sqrtf+0xbe>
 8001268:	15c2      	asrs	r2, r0, #23
 800126a:	2400      	movs	r4, #0
 800126c:	2019      	movs	r0, #25
 800126e:	4626      	mov	r6, r4
 8001270:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001274:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001278:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800127c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001280:	07d2      	lsls	r2, r2, #31
 8001282:	bf58      	it	pl
 8001284:	005b      	lslpl	r3, r3, #1
 8001286:	106d      	asrs	r5, r5, #1
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	1872      	adds	r2, r6, r1
 800128c:	429a      	cmp	r2, r3
 800128e:	bfcf      	iteee	gt
 8001290:	461a      	movgt	r2, r3
 8001292:	1856      	addle	r6, r2, r1
 8001294:	1864      	addle	r4, r4, r1
 8001296:	1a9a      	suble	r2, r3, r2
 8001298:	3801      	subs	r0, #1
 800129a:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800129e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80012a2:	d1f2      	bne.n	800128a <__ieee754_sqrtf+0x66>
 80012a4:	b1ba      	cbz	r2, 80012d6 <__ieee754_sqrtf+0xb2>
 80012a6:	4e15      	ldr	r6, [pc, #84]	@ (80012fc <__ieee754_sqrtf+0xd8>)
 80012a8:	4f15      	ldr	r7, [pc, #84]	@ (8001300 <__ieee754_sqrtf+0xdc>)
 80012aa:	6830      	ldr	r0, [r6, #0]
 80012ac:	6839      	ldr	r1, [r7, #0]
 80012ae:	f7fe ff51 	bl	8000154 <__aeabi_fsub>
 80012b2:	f8d6 8000 	ldr.w	r8, [r6]
 80012b6:	4601      	mov	r1, r0
 80012b8:	4640      	mov	r0, r8
 80012ba:	f7ff f9fd 	bl	80006b8 <__aeabi_fcmple>
 80012be:	b150      	cbz	r0, 80012d6 <__ieee754_sqrtf+0xb2>
 80012c0:	6830      	ldr	r0, [r6, #0]
 80012c2:	6839      	ldr	r1, [r7, #0]
 80012c4:	f7fe ff48 	bl	8000158 <__addsf3>
 80012c8:	6836      	ldr	r6, [r6, #0]
 80012ca:	4601      	mov	r1, r0
 80012cc:	4630      	mov	r0, r6
 80012ce:	f7ff f9e9 	bl	80006a4 <__aeabi_fcmplt>
 80012d2:	b170      	cbz	r0, 80012f2 <__ieee754_sqrtf+0xce>
 80012d4:	3402      	adds	r4, #2
 80012d6:	1064      	asrs	r4, r4, #1
 80012d8:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 80012dc:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 80012e0:	e7b1      	b.n	8001246 <__ieee754_sqrtf+0x22>
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	0218      	lsls	r0, r3, #8
 80012e6:	460a      	mov	r2, r1
 80012e8:	f101 0101 	add.w	r1, r1, #1
 80012ec:	d5f9      	bpl.n	80012e2 <__ieee754_sqrtf+0xbe>
 80012ee:	4252      	negs	r2, r2
 80012f0:	e7bb      	b.n	800126a <__ieee754_sqrtf+0x46>
 80012f2:	3401      	adds	r4, #1
 80012f4:	f024 0401 	bic.w	r4, r4, #1
 80012f8:	e7ed      	b.n	80012d6 <__ieee754_sqrtf+0xb2>
 80012fa:	bf00      	nop
 80012fc:	080016a4 	.word	0x080016a4
 8001300:	080016a0 	.word	0x080016a0

08001304 <__ieee754_atan2f>:
 8001304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001306:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800130a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800130e:	4603      	mov	r3, r0
 8001310:	d805      	bhi.n	800131e <__ieee754_atan2f+0x1a>
 8001312:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8001316:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800131a:	4607      	mov	r7, r0
 800131c:	d904      	bls.n	8001328 <__ieee754_atan2f+0x24>
 800131e:	4618      	mov	r0, r3
 8001320:	f7fe ff1a 	bl	8000158 <__addsf3>
 8001324:	4603      	mov	r3, r0
 8001326:	e010      	b.n	800134a <__ieee754_atan2f+0x46>
 8001328:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800132c:	d103      	bne.n	8001336 <__ieee754_atan2f+0x32>
 800132e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001332:	f000 b86f 	b.w	8001414 <atanf>
 8001336:	178c      	asrs	r4, r1, #30
 8001338:	f004 0402 	and.w	r4, r4, #2
 800133c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8001340:	b92a      	cbnz	r2, 800134e <__ieee754_atan2f+0x4a>
 8001342:	2c02      	cmp	r4, #2
 8001344:	d04b      	beq.n	80013de <__ieee754_atan2f+0xda>
 8001346:	2c03      	cmp	r4, #3
 8001348:	d04b      	beq.n	80013e2 <__ieee754_atan2f+0xde>
 800134a:	4618      	mov	r0, r3
 800134c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800134e:	b91e      	cbnz	r6, 8001358 <__ieee754_atan2f+0x54>
 8001350:	2f00      	cmp	r7, #0
 8001352:	db4c      	blt.n	80013ee <__ieee754_atan2f+0xea>
 8001354:	4b27      	ldr	r3, [pc, #156]	@ (80013f4 <__ieee754_atan2f+0xf0>)
 8001356:	e7f8      	b.n	800134a <__ieee754_atan2f+0x46>
 8001358:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800135c:	d10e      	bne.n	800137c <__ieee754_atan2f+0x78>
 800135e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8001362:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8001366:	d105      	bne.n	8001374 <__ieee754_atan2f+0x70>
 8001368:	2c02      	cmp	r4, #2
 800136a:	d83c      	bhi.n	80013e6 <__ieee754_atan2f+0xe2>
 800136c:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <__ieee754_atan2f+0xf4>)
 800136e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001372:	e7ea      	b.n	800134a <__ieee754_atan2f+0x46>
 8001374:	2c02      	cmp	r4, #2
 8001376:	d838      	bhi.n	80013ea <__ieee754_atan2f+0xe6>
 8001378:	4b20      	ldr	r3, [pc, #128]	@ (80013fc <__ieee754_atan2f+0xf8>)
 800137a:	e7f8      	b.n	800136e <__ieee754_atan2f+0x6a>
 800137c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8001380:	d0e6      	beq.n	8001350 <__ieee754_atan2f+0x4c>
 8001382:	1b92      	subs	r2, r2, r6
 8001384:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 8001388:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800138c:	da17      	bge.n	80013be <__ieee754_atan2f+0xba>
 800138e:	2900      	cmp	r1, #0
 8001390:	da01      	bge.n	8001396 <__ieee754_atan2f+0x92>
 8001392:	303c      	adds	r0, #60	@ 0x3c
 8001394:	db15      	blt.n	80013c2 <__ieee754_atan2f+0xbe>
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f89a 	bl	80004d0 <__aeabi_fdiv>
 800139c:	f000 f946 	bl	800162c <fabsf>
 80013a0:	f000 f838 	bl	8001414 <atanf>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2c01      	cmp	r4, #1
 80013a8:	d00d      	beq.n	80013c6 <__ieee754_atan2f+0xc2>
 80013aa:	2c02      	cmp	r4, #2
 80013ac:	d00e      	beq.n	80013cc <__ieee754_atan2f+0xc8>
 80013ae:	2c00      	cmp	r4, #0
 80013b0:	d0cb      	beq.n	800134a <__ieee754_atan2f+0x46>
 80013b2:	4913      	ldr	r1, [pc, #76]	@ (8001400 <__ieee754_atan2f+0xfc>)
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7fe fecf 	bl	8000158 <__addsf3>
 80013ba:	4912      	ldr	r1, [pc, #72]	@ (8001404 <__ieee754_atan2f+0x100>)
 80013bc:	e00c      	b.n	80013d8 <__ieee754_atan2f+0xd4>
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <__ieee754_atan2f+0xf0>)
 80013c0:	e7f1      	b.n	80013a6 <__ieee754_atan2f+0xa2>
 80013c2:	2300      	movs	r3, #0
 80013c4:	e7ef      	b.n	80013a6 <__ieee754_atan2f+0xa2>
 80013c6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80013ca:	e7be      	b.n	800134a <__ieee754_atan2f+0x46>
 80013cc:	490c      	ldr	r1, [pc, #48]	@ (8001400 <__ieee754_atan2f+0xfc>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7fe fec2 	bl	8000158 <__addsf3>
 80013d4:	4601      	mov	r1, r0
 80013d6:	480b      	ldr	r0, [pc, #44]	@ (8001404 <__ieee754_atan2f+0x100>)
 80013d8:	f7fe febc 	bl	8000154 <__aeabi_fsub>
 80013dc:	e7a2      	b.n	8001324 <__ieee754_atan2f+0x20>
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <__ieee754_atan2f+0x100>)
 80013e0:	e7b3      	b.n	800134a <__ieee754_atan2f+0x46>
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <__ieee754_atan2f+0x104>)
 80013e4:	e7b1      	b.n	800134a <__ieee754_atan2f+0x46>
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <__ieee754_atan2f+0x108>)
 80013e8:	e7af      	b.n	800134a <__ieee754_atan2f+0x46>
 80013ea:	2300      	movs	r3, #0
 80013ec:	e7ad      	b.n	800134a <__ieee754_atan2f+0x46>
 80013ee:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <__ieee754_atan2f+0x10c>)
 80013f0:	e7ab      	b.n	800134a <__ieee754_atan2f+0x46>
 80013f2:	bf00      	nop
 80013f4:	3fc90fdb 	.word	0x3fc90fdb
 80013f8:	080016b4 	.word	0x080016b4
 80013fc:	080016a8 	.word	0x080016a8
 8001400:	33bbbd2e 	.word	0x33bbbd2e
 8001404:	40490fdb 	.word	0x40490fdb
 8001408:	c0490fdb 	.word	0xc0490fdb
 800140c:	3f490fdb 	.word	0x3f490fdb
 8001410:	bfc90fdb 	.word	0xbfc90fdb

08001414 <atanf>:
 8001414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001418:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800141c:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 8001420:	4604      	mov	r4, r0
 8001422:	4680      	mov	r8, r0
 8001424:	d30e      	bcc.n	8001444 <atanf+0x30>
 8001426:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800142a:	d904      	bls.n	8001436 <atanf+0x22>
 800142c:	4601      	mov	r1, r0
 800142e:	f7fe fe93 	bl	8000158 <__addsf3>
 8001432:	4604      	mov	r4, r0
 8001434:	e003      	b.n	800143e <atanf+0x2a>
 8001436:	2800      	cmp	r0, #0
 8001438:	f340 80ce 	ble.w	80015d8 <atanf+0x1c4>
 800143c:	4c67      	ldr	r4, [pc, #412]	@ (80015dc <atanf+0x1c8>)
 800143e:	4620      	mov	r0, r4
 8001440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001444:	4b66      	ldr	r3, [pc, #408]	@ (80015e0 <atanf+0x1cc>)
 8001446:	429d      	cmp	r5, r3
 8001448:	d80e      	bhi.n	8001468 <atanf+0x54>
 800144a:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800144e:	d208      	bcs.n	8001462 <atanf+0x4e>
 8001450:	4964      	ldr	r1, [pc, #400]	@ (80015e4 <atanf+0x1d0>)
 8001452:	f7fe fe81 	bl	8000158 <__addsf3>
 8001456:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800145a:	f7ff f941 	bl	80006e0 <__aeabi_fcmpgt>
 800145e:	2800      	cmp	r0, #0
 8001460:	d1ed      	bne.n	800143e <atanf+0x2a>
 8001462:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8001466:	e01c      	b.n	80014a2 <atanf+0x8e>
 8001468:	f000 f8e0 	bl	800162c <fabsf>
 800146c:	4b5e      	ldr	r3, [pc, #376]	@ (80015e8 <atanf+0x1d4>)
 800146e:	4604      	mov	r4, r0
 8001470:	429d      	cmp	r5, r3
 8001472:	d87c      	bhi.n	800156e <atanf+0x15a>
 8001474:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8001478:	429d      	cmp	r5, r3
 800147a:	d867      	bhi.n	800154c <atanf+0x138>
 800147c:	4601      	mov	r1, r0
 800147e:	f7fe fe6b 	bl	8000158 <__addsf3>
 8001482:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001486:	f7fe fe65 	bl	8000154 <__aeabi_fsub>
 800148a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800148e:	4605      	mov	r5, r0
 8001490:	4620      	mov	r0, r4
 8001492:	f7fe fe61 	bl	8000158 <__addsf3>
 8001496:	4601      	mov	r1, r0
 8001498:	4628      	mov	r0, r5
 800149a:	f7ff f819 	bl	80004d0 <__aeabi_fdiv>
 800149e:	2600      	movs	r6, #0
 80014a0:	4604      	mov	r4, r0
 80014a2:	4621      	mov	r1, r4
 80014a4:	4620      	mov	r0, r4
 80014a6:	f7fe ff5f 	bl	8000368 <__aeabi_fmul>
 80014aa:	4601      	mov	r1, r0
 80014ac:	4607      	mov	r7, r0
 80014ae:	f7fe ff5b 	bl	8000368 <__aeabi_fmul>
 80014b2:	4605      	mov	r5, r0
 80014b4:	494d      	ldr	r1, [pc, #308]	@ (80015ec <atanf+0x1d8>)
 80014b6:	f7fe ff57 	bl	8000368 <__aeabi_fmul>
 80014ba:	494d      	ldr	r1, [pc, #308]	@ (80015f0 <atanf+0x1dc>)
 80014bc:	f7fe fe4c 	bl	8000158 <__addsf3>
 80014c0:	4629      	mov	r1, r5
 80014c2:	f7fe ff51 	bl	8000368 <__aeabi_fmul>
 80014c6:	494b      	ldr	r1, [pc, #300]	@ (80015f4 <atanf+0x1e0>)
 80014c8:	f7fe fe46 	bl	8000158 <__addsf3>
 80014cc:	4629      	mov	r1, r5
 80014ce:	f7fe ff4b 	bl	8000368 <__aeabi_fmul>
 80014d2:	4949      	ldr	r1, [pc, #292]	@ (80015f8 <atanf+0x1e4>)
 80014d4:	f7fe fe40 	bl	8000158 <__addsf3>
 80014d8:	4629      	mov	r1, r5
 80014da:	f7fe ff45 	bl	8000368 <__aeabi_fmul>
 80014de:	4947      	ldr	r1, [pc, #284]	@ (80015fc <atanf+0x1e8>)
 80014e0:	f7fe fe3a 	bl	8000158 <__addsf3>
 80014e4:	4629      	mov	r1, r5
 80014e6:	f7fe ff3f 	bl	8000368 <__aeabi_fmul>
 80014ea:	4945      	ldr	r1, [pc, #276]	@ (8001600 <atanf+0x1ec>)
 80014ec:	f7fe fe34 	bl	8000158 <__addsf3>
 80014f0:	4639      	mov	r1, r7
 80014f2:	f7fe ff39 	bl	8000368 <__aeabi_fmul>
 80014f6:	4943      	ldr	r1, [pc, #268]	@ (8001604 <atanf+0x1f0>)
 80014f8:	4607      	mov	r7, r0
 80014fa:	4628      	mov	r0, r5
 80014fc:	f7fe ff34 	bl	8000368 <__aeabi_fmul>
 8001500:	4941      	ldr	r1, [pc, #260]	@ (8001608 <atanf+0x1f4>)
 8001502:	f7fe fe27 	bl	8000154 <__aeabi_fsub>
 8001506:	4629      	mov	r1, r5
 8001508:	f7fe ff2e 	bl	8000368 <__aeabi_fmul>
 800150c:	493f      	ldr	r1, [pc, #252]	@ (800160c <atanf+0x1f8>)
 800150e:	f7fe fe21 	bl	8000154 <__aeabi_fsub>
 8001512:	4629      	mov	r1, r5
 8001514:	f7fe ff28 	bl	8000368 <__aeabi_fmul>
 8001518:	493d      	ldr	r1, [pc, #244]	@ (8001610 <atanf+0x1fc>)
 800151a:	f7fe fe1b 	bl	8000154 <__aeabi_fsub>
 800151e:	4629      	mov	r1, r5
 8001520:	f7fe ff22 	bl	8000368 <__aeabi_fmul>
 8001524:	493b      	ldr	r1, [pc, #236]	@ (8001614 <atanf+0x200>)
 8001526:	f7fe fe15 	bl	8000154 <__aeabi_fsub>
 800152a:	4629      	mov	r1, r5
 800152c:	f7fe ff1c 	bl	8000368 <__aeabi_fmul>
 8001530:	4601      	mov	r1, r0
 8001532:	4638      	mov	r0, r7
 8001534:	f7fe fe10 	bl	8000158 <__addsf3>
 8001538:	4621      	mov	r1, r4
 800153a:	f7fe ff15 	bl	8000368 <__aeabi_fmul>
 800153e:	1c73      	adds	r3, r6, #1
 8001540:	4601      	mov	r1, r0
 8001542:	d133      	bne.n	80015ac <atanf+0x198>
 8001544:	4620      	mov	r0, r4
 8001546:	f7fe fe05 	bl	8000154 <__aeabi_fsub>
 800154a:	e772      	b.n	8001432 <atanf+0x1e>
 800154c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001550:	f7fe fe00 	bl	8000154 <__aeabi_fsub>
 8001554:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001558:	4605      	mov	r5, r0
 800155a:	4620      	mov	r0, r4
 800155c:	f7fe fdfc 	bl	8000158 <__addsf3>
 8001560:	4601      	mov	r1, r0
 8001562:	4628      	mov	r0, r5
 8001564:	f7fe ffb4 	bl	80004d0 <__aeabi_fdiv>
 8001568:	2601      	movs	r6, #1
 800156a:	4604      	mov	r4, r0
 800156c:	e799      	b.n	80014a2 <atanf+0x8e>
 800156e:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <atanf+0x204>)
 8001570:	429d      	cmp	r5, r3
 8001572:	d814      	bhi.n	800159e <atanf+0x18a>
 8001574:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8001578:	f7fe fdec 	bl	8000154 <__aeabi_fsub>
 800157c:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8001580:	4605      	mov	r5, r0
 8001582:	4620      	mov	r0, r4
 8001584:	f7fe fef0 	bl	8000368 <__aeabi_fmul>
 8001588:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800158c:	f7fe fde4 	bl	8000158 <__addsf3>
 8001590:	4601      	mov	r1, r0
 8001592:	4628      	mov	r0, r5
 8001594:	f7fe ff9c 	bl	80004d0 <__aeabi_fdiv>
 8001598:	2602      	movs	r6, #2
 800159a:	4604      	mov	r4, r0
 800159c:	e781      	b.n	80014a2 <atanf+0x8e>
 800159e:	4601      	mov	r1, r0
 80015a0:	481e      	ldr	r0, [pc, #120]	@ (800161c <atanf+0x208>)
 80015a2:	f7fe ff95 	bl	80004d0 <__aeabi_fdiv>
 80015a6:	2603      	movs	r6, #3
 80015a8:	4604      	mov	r4, r0
 80015aa:	e77a      	b.n	80014a2 <atanf+0x8e>
 80015ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <atanf+0x20c>)
 80015ae:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80015b2:	f7fe fdcf 	bl	8000154 <__aeabi_fsub>
 80015b6:	4621      	mov	r1, r4
 80015b8:	f7fe fdcc 	bl	8000154 <__aeabi_fsub>
 80015bc:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <atanf+0x210>)
 80015be:	4601      	mov	r1, r0
 80015c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80015c4:	f7fe fdc6 	bl	8000154 <__aeabi_fsub>
 80015c8:	f1b8 0f00 	cmp.w	r8, #0
 80015cc:	4604      	mov	r4, r0
 80015ce:	f6bf af36 	bge.w	800143e <atanf+0x2a>
 80015d2:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80015d6:	e732      	b.n	800143e <atanf+0x2a>
 80015d8:	4c13      	ldr	r4, [pc, #76]	@ (8001628 <atanf+0x214>)
 80015da:	e730      	b.n	800143e <atanf+0x2a>
 80015dc:	3fc90fdb 	.word	0x3fc90fdb
 80015e0:	3edfffff 	.word	0x3edfffff
 80015e4:	7149f2ca 	.word	0x7149f2ca
 80015e8:	3f97ffff 	.word	0x3f97ffff
 80015ec:	3c8569d7 	.word	0x3c8569d7
 80015f0:	3d4bda59 	.word	0x3d4bda59
 80015f4:	3d886b35 	.word	0x3d886b35
 80015f8:	3dba2e6e 	.word	0x3dba2e6e
 80015fc:	3e124925 	.word	0x3e124925
 8001600:	3eaaaaab 	.word	0x3eaaaaab
 8001604:	bd15a221 	.word	0xbd15a221
 8001608:	3d6ef16b 	.word	0x3d6ef16b
 800160c:	3d9d8795 	.word	0x3d9d8795
 8001610:	3de38e38 	.word	0x3de38e38
 8001614:	3e4ccccd 	.word	0x3e4ccccd
 8001618:	401bffff 	.word	0x401bffff
 800161c:	bf800000 	.word	0xbf800000
 8001620:	080016c0 	.word	0x080016c0
 8001624:	080016d0 	.word	0x080016d0
 8001628:	bfc90fdb 	.word	0xbfc90fdb

0800162c <fabsf>:
 800162c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001630:	4770      	bx	lr
	...

08001634 <__errno>:
 8001634:	4b01      	ldr	r3, [pc, #4]	@ (800163c <__errno+0x8>)
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000004 	.word	0x20000004

08001640 <__libc_init_array>:
 8001640:	b570      	push	{r4, r5, r6, lr}
 8001642:	2600      	movs	r6, #0
 8001644:	4d0c      	ldr	r5, [pc, #48]	@ (8001678 <__libc_init_array+0x38>)
 8001646:	4c0d      	ldr	r4, [pc, #52]	@ (800167c <__libc_init_array+0x3c>)
 8001648:	1b64      	subs	r4, r4, r5
 800164a:	10a4      	asrs	r4, r4, #2
 800164c:	42a6      	cmp	r6, r4
 800164e:	d109      	bne.n	8001664 <__libc_init_array+0x24>
 8001650:	f000 f81a 	bl	8001688 <_init>
 8001654:	2600      	movs	r6, #0
 8001656:	4d0a      	ldr	r5, [pc, #40]	@ (8001680 <__libc_init_array+0x40>)
 8001658:	4c0a      	ldr	r4, [pc, #40]	@ (8001684 <__libc_init_array+0x44>)
 800165a:	1b64      	subs	r4, r4, r5
 800165c:	10a4      	asrs	r4, r4, #2
 800165e:	42a6      	cmp	r6, r4
 8001660:	d105      	bne.n	800166e <__libc_init_array+0x2e>
 8001662:	bd70      	pop	{r4, r5, r6, pc}
 8001664:	f855 3b04 	ldr.w	r3, [r5], #4
 8001668:	4798      	blx	r3
 800166a:	3601      	adds	r6, #1
 800166c:	e7ee      	b.n	800164c <__libc_init_array+0xc>
 800166e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001672:	4798      	blx	r3
 8001674:	3601      	adds	r6, #1
 8001676:	e7f2      	b.n	800165e <__libc_init_array+0x1e>
 8001678:	080016e0 	.word	0x080016e0
 800167c:	080016e0 	.word	0x080016e0
 8001680:	080016e0 	.word	0x080016e0
 8001684:	080016e4 	.word	0x080016e4

08001688 <_init>:
 8001688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168a:	bf00      	nop
 800168c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800168e:	bc08      	pop	{r3}
 8001690:	469e      	mov	lr, r3
 8001692:	4770      	bx	lr

08001694 <_fini>:
 8001694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001696:	bf00      	nop
 8001698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800169a:	bc08      	pop	{r3}
 800169c:	469e      	mov	lr, r3
 800169e:	4770      	bx	lr
