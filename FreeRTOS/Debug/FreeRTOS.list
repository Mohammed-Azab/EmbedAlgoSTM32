
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001368  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08001478  08001478  00002478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001484  08001484  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001484  08001484  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001484  08001484  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001484  08001484  00002484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001488  08001488  00002488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800148c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc8  2000000c  08001498  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fd4  08001498  00003fd4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003724  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e7e  00000000  00000000  00006759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000490  00000000  00000000  000075d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000035c  00000000  00000000  00007a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a48  00000000  00000000  00007dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005649  00000000  00000000  0001e80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008641b  00000000  00000000  00023e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001028  00000000  00000000  000aa2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000ab2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08001460 	.word	0x08001460

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08001460 	.word	0x08001460

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000028 	.word	0x20000028
 800017c:	2000007c 	.word	0x2000007c

08000180 <main>:
#include "stm32f1xx.h"

void Task1(void* arg);


int main(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af02      	add	r7, sp, #8

	xTaskCreate(Task1,"T1",128,NULL, 1 , NULL);
 8000186:	2300      	movs	r3, #0
 8000188:	9301      	str	r3, [sp, #4]
 800018a:	2301      	movs	r3, #1
 800018c:	9300      	str	r3, [sp, #0]
 800018e:	2300      	movs	r3, #0
 8000190:	2280      	movs	r2, #128	@ 0x80
 8000192:	4905      	ldr	r1, [pc, #20]	@ (80001a8 <main+0x28>)
 8000194:	4805      	ldr	r0, [pc, #20]	@ (80001ac <main+0x2c>)
 8000196:	f000 f950 	bl	800043a <xTaskCreate>
	vTaskStartScheduler();
 800019a:	f000 fa85 	bl	80006a8 <vTaskStartScheduler>
 800019e:	2300      	movs	r3, #0

}
 80001a0:	4618      	mov	r0, r3
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	08001478 	.word	0x08001478
 80001ac:	080001b1 	.word	0x080001b1

080001b0 <Task1>:





void Task1(void* arg){
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]

}
 80001b8:	bf00      	nop
 80001ba:	370c      	adds	r7, #12
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr

080001c2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001c2:	b480      	push	{r7}
 80001c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80001c6:	bf00      	nop
 80001c8:	e7fd      	b.n	80001c6 <NMI_Handler+0x4>

080001ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001ca:	b480      	push	{r7}
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001ce:	bf00      	nop
 80001d0:	e7fd      	b.n	80001ce <HardFault_Handler+0x4>

080001d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001d2:	b480      	push	{r7}
 80001d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001d6:	bf00      	nop
 80001d8:	e7fd      	b.n	80001d6 <MemManage_Handler+0x4>

080001da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001da:	b480      	push	{r7}
 80001dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001de:	bf00      	nop
 80001e0:	e7fd      	b.n	80001de <BusFault_Handler+0x4>

080001e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001e2:	b480      	push	{r7}
 80001e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001e6:	bf00      	nop
 80001e8:	e7fd      	b.n	80001e6 <UsageFault_Handler+0x4>

080001ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001ea:	b480      	push	{r7}
 80001ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001ee:	bf00      	nop
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr

080001f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001f6:	b580      	push	{r7, lr}
 80001f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001fa:	f000 f835 	bl	8000268 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80001fe:	f000 fd4d 	bl	8000c9c <xTaskGetSchedulerState>
 8000202:	4603      	mov	r3, r0
 8000204:	2b01      	cmp	r3, #1
 8000206:	d001      	beq.n	800020c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000208:	f000 fed6 	bl	8000fb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}

08000210 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr

0800021c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800021c:	f7ff fff8 	bl	8000210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000220:	480b      	ldr	r0, [pc, #44]	@ (8000250 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000222:	490c      	ldr	r1, [pc, #48]	@ (8000254 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000224:	4a0c      	ldr	r2, [pc, #48]	@ (8000258 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000228:	e002      	b.n	8000230 <LoopCopyDataInit>

0800022a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800022a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800022c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022e:	3304      	adds	r3, #4

08000230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000234:	d3f9      	bcc.n	800022a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000236:	4a09      	ldr	r2, [pc, #36]	@ (800025c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000238:	4c09      	ldr	r4, [pc, #36]	@ (8000260 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800023a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800023c:	e001      	b.n	8000242 <LoopFillZerobss>

0800023e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000240:	3204      	adds	r2, #4

08000242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000244:	d3fb      	bcc.n	800023e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000246:	f001 f8e7 	bl	8001418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800024a:	f7ff ff99 	bl	8000180 <main>
  bx lr
 800024e:	4770      	bx	lr
  ldr r0, =_sdata
 8000250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000254:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000258:	0800148c 	.word	0x0800148c
  ldr r2, =_sbss
 800025c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000260:	20000fd4 	.word	0x20000fd4

08000264 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000264:	e7fe      	b.n	8000264 <ADC1_2_IRQHandler>
	...

08000268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800026c:	4b05      	ldr	r3, [pc, #20]	@ (8000284 <HAL_IncTick+0x1c>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	461a      	mov	r2, r3
 8000272:	4b05      	ldr	r3, [pc, #20]	@ (8000288 <HAL_IncTick+0x20>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4413      	add	r3, r2
 8000278:	4a03      	ldr	r2, [pc, #12]	@ (8000288 <HAL_IncTick+0x20>)
 800027a:	6013      	str	r3, [r2, #0]
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	20000004 	.word	0x20000004
 8000288:	2000027c 	.word	0x2000027c

0800028c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f103 0208 	add.w	r2, r3, #8
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80002a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f103 0208 	add.w	r2, r3, #8
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f103 0208 	add.w	r2, r3, #8
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr

080002ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80002ca:	b480      	push	{r7}
 80002cc:	b083      	sub	sp, #12
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2200      	movs	r2, #0
 80002d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80002d8:	bf00      	nop
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr

080002e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80002e2:	b480      	push	{r7}
 80002e4:	b085      	sub	sp, #20
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	6078      	str	r0, [r7, #4]
 80002ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	689a      	ldr	r2, [r3, #8]
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	683a      	ldr	r2, [r7, #0]
 8000306:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	1c5a      	adds	r2, r3, #1
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	601a      	str	r2, [r3, #0]
}
 800031e:	bf00      	nop
 8000320:	3714      	adds	r7, #20
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr

08000328 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	691b      	ldr	r3, [r3, #16]
 8000334:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	6892      	ldr	r2, [r2, #8]
 800033e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	6852      	ldr	r2, [r2, #4]
 8000348:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	429a      	cmp	r2, r3
 8000352:	d103      	bne.n	800035c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	689a      	ldr	r2, [r3, #8]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	1e5a      	subs	r2, r3, #1
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	681b      	ldr	r3, [r3, #0]
}
 8000370:	4618      	mov	r0, r3
 8000372:	3714      	adds	r7, #20
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr

0800037a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800037a:	b580      	push	{r7, lr}
 800037c:	b08e      	sub	sp, #56	@ 0x38
 800037e:	af04      	add	r7, sp, #16
 8000380:	60f8      	str	r0, [r7, #12]
 8000382:	60b9      	str	r1, [r7, #8]
 8000384:	607a      	str	r2, [r7, #4]
 8000386:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8000388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800038a:	2b00      	cmp	r3, #0
 800038c:	d10b      	bne.n	80003a6 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800038e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000392:	f383 8811 	msr	BASEPRI, r3
 8000396:	f3bf 8f6f 	isb	sy
 800039a:	f3bf 8f4f 	dsb	sy
 800039e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80003a0:	bf00      	nop
 80003a2:	bf00      	nop
 80003a4:	e7fd      	b.n	80003a2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80003a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d10b      	bne.n	80003c4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80003ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80003b0:	f383 8811 	msr	BASEPRI, r3
 80003b4:	f3bf 8f6f 	isb	sy
 80003b8:	f3bf 8f4f 	dsb	sy
 80003bc:	61fb      	str	r3, [r7, #28]
}
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80003c4:	2354      	movs	r3, #84	@ 0x54
 80003c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	2b54      	cmp	r3, #84	@ 0x54
 80003cc:	d00b      	beq.n	80003e6 <xTaskCreateStatic+0x6c>
	__asm volatile
 80003ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80003d2:	f383 8811 	msr	BASEPRI, r3
 80003d6:	f3bf 8f6f 	isb	sy
 80003da:	f3bf 8f4f 	dsb	sy
 80003de:	61bb      	str	r3, [r7, #24]
}
 80003e0:	bf00      	nop
 80003e2:	bf00      	nop
 80003e4:	e7fd      	b.n	80003e2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80003e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80003e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d01e      	beq.n	800042c <xTaskCreateStatic+0xb2>
 80003ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d01b      	beq.n	800042c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80003f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80003f6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80003f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80003fc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80003fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000400:	2202      	movs	r2, #2
 8000402:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8000406:	2300      	movs	r3, #0
 8000408:	9303      	str	r3, [sp, #12]
 800040a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800040c:	9302      	str	r3, [sp, #8]
 800040e:	f107 0314 	add.w	r3, r7, #20
 8000412:	9301      	str	r3, [sp, #4]
 8000414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000416:	9300      	str	r3, [sp, #0]
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	68f8      	ldr	r0, [r7, #12]
 8000420:	f000 f850 	bl	80004c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000424:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000426:	f000 f8d5 	bl	80005d4 <prvAddNewTaskToReadyList>
 800042a:	e001      	b.n	8000430 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8000430:	697b      	ldr	r3, [r7, #20]
	}
 8000432:	4618      	mov	r0, r3
 8000434:	3728      	adds	r7, #40	@ 0x28
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800043a:	b580      	push	{r7, lr}
 800043c:	b08c      	sub	sp, #48	@ 0x30
 800043e:	af04      	add	r7, sp, #16
 8000440:	60f8      	str	r0, [r7, #12]
 8000442:	60b9      	str	r1, [r7, #8]
 8000444:	603b      	str	r3, [r7, #0]
 8000446:	4613      	mov	r3, r2
 8000448:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800044a:	88fb      	ldrh	r3, [r7, #6]
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	4618      	mov	r0, r3
 8000450:	f000 fdf6 	bl	8001040 <pvPortMalloc>
 8000454:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d00e      	beq.n	800047a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800045c:	2054      	movs	r0, #84	@ 0x54
 800045e:	f000 fdef 	bl	8001040 <pvPortMalloc>
 8000462:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000464:	69fb      	ldr	r3, [r7, #28]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d003      	beq.n	8000472 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	697a      	ldr	r2, [r7, #20]
 800046e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000470:	e005      	b.n	800047e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000472:	6978      	ldr	r0, [r7, #20]
 8000474:	f000 feb2 	bl	80011dc <vPortFree>
 8000478:	e001      	b.n	800047e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800047e:	69fb      	ldr	r3, [r7, #28]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d017      	beq.n	80004b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8000484:	69fb      	ldr	r3, [r7, #28]
 8000486:	2200      	movs	r2, #0
 8000488:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800048c:	88fa      	ldrh	r2, [r7, #6]
 800048e:	2300      	movs	r3, #0
 8000490:	9303      	str	r3, [sp, #12]
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	9302      	str	r3, [sp, #8]
 8000496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	68b9      	ldr	r1, [r7, #8]
 80004a2:	68f8      	ldr	r0, [r7, #12]
 80004a4:	f000 f80e 	bl	80004c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80004a8:	69f8      	ldr	r0, [r7, #28]
 80004aa:	f000 f893 	bl	80005d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80004ae:	2301      	movs	r3, #1
 80004b0:	61bb      	str	r3, [r7, #24]
 80004b2:	e002      	b.n	80004ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80004ba:	69bb      	ldr	r3, [r7, #24]
	}
 80004bc:	4618      	mov	r0, r3
 80004be:	3720      	adds	r7, #32
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
 80004d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80004d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80004dc:	3b01      	subs	r3, #1
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	4413      	add	r3, r2
 80004e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80004e4:	69bb      	ldr	r3, [r7, #24]
 80004e6:	f023 0307 	bic.w	r3, r3, #7
 80004ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80004ec:	69bb      	ldr	r3, [r7, #24]
 80004ee:	f003 0307 	and.w	r3, r3, #7
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d00b      	beq.n	800050e <prvInitialiseNewTask+0x4a>
	__asm volatile
 80004f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80004fa:	f383 8811 	msr	BASEPRI, r3
 80004fe:	f3bf 8f6f 	isb	sy
 8000502:	f3bf 8f4f 	dsb	sy
 8000506:	617b      	str	r3, [r7, #20]
}
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	e7fd      	b.n	800050a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d01f      	beq.n	8000554 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000514:	2300      	movs	r3, #0
 8000516:	61fb      	str	r3, [r7, #28]
 8000518:	e012      	b.n	8000540 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800051a:	68ba      	ldr	r2, [r7, #8]
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	4413      	add	r3, r2
 8000520:	7819      	ldrb	r1, [r3, #0]
 8000522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000524:	69fb      	ldr	r3, [r7, #28]
 8000526:	4413      	add	r3, r2
 8000528:	3334      	adds	r3, #52	@ 0x34
 800052a:	460a      	mov	r2, r1
 800052c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800052e:	68ba      	ldr	r2, [r7, #8]
 8000530:	69fb      	ldr	r3, [r7, #28]
 8000532:	4413      	add	r3, r2
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d006      	beq.n	8000548 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	3301      	adds	r3, #1
 800053e:	61fb      	str	r3, [r7, #28]
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	2b0f      	cmp	r3, #15
 8000544:	d9e9      	bls.n	800051a <prvInitialiseNewTask+0x56>
 8000546:	e000      	b.n	800054a <prvInitialiseNewTask+0x86>
			{
				break;
 8000548:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800054a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800054c:	2200      	movs	r2, #0
 800054e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8000552:	e003      	b.n	800055c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000556:	2200      	movs	r2, #0
 8000558:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800055c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800055e:	2b06      	cmp	r3, #6
 8000560:	d901      	bls.n	8000566 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000562:	2306      	movs	r3, #6
 8000564:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800056a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800056c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800056e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000570:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8000572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000574:	2200      	movs	r2, #0
 8000576:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800057a:	3304      	adds	r3, #4
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff fea4 	bl	80002ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000584:	3318      	adds	r3, #24
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff fe9f 	bl	80002ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800058c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800058e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000590:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000594:	f1c3 0207 	rsb	r2, r3, #7
 8000598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800059a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800059c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800059e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80005a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80005a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005a4:	2200      	movs	r2, #0
 80005a6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80005a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005aa:	2200      	movs	r2, #0
 80005ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	68f9      	ldr	r1, [r7, #12]
 80005b4:	69b8      	ldr	r0, [r7, #24]
 80005b6:	f000 fb8f 	bl	8000cd8 <pxPortInitialiseStack>
 80005ba:	4602      	mov	r2, r0
 80005bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80005c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d002      	beq.n	80005cc <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80005c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80005ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80005cc:	bf00      	nop
 80005ce:	3720      	adds	r7, #32
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80005dc:	f000 fc6e 	bl	8000ebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80005e0:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <prvAddNewTaskToReadyList+0xb8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	4a29      	ldr	r2, [pc, #164]	@ (800068c <prvAddNewTaskToReadyList+0xb8>)
 80005e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80005ea:	4b29      	ldr	r3, [pc, #164]	@ (8000690 <prvAddNewTaskToReadyList+0xbc>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d109      	bne.n	8000606 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80005f2:	4a27      	ldr	r2, [pc, #156]	@ (8000690 <prvAddNewTaskToReadyList+0xbc>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80005f8:	4b24      	ldr	r3, [pc, #144]	@ (800068c <prvAddNewTaskToReadyList+0xb8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d110      	bne.n	8000622 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000600:	f000 fa8e 	bl	8000b20 <prvInitialiseTaskLists>
 8000604:	e00d      	b.n	8000622 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000606:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <prvAddNewTaskToReadyList+0xc0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d109      	bne.n	8000622 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800060e:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <prvAddNewTaskToReadyList+0xbc>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000618:	429a      	cmp	r2, r3
 800061a:	d802      	bhi.n	8000622 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800061c:	4a1c      	ldr	r2, [pc, #112]	@ (8000690 <prvAddNewTaskToReadyList+0xbc>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000622:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <prvAddNewTaskToReadyList+0xc4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	4a1b      	ldr	r2, [pc, #108]	@ (8000698 <prvAddNewTaskToReadyList+0xc4>)
 800062a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000630:	2201      	movs	r2, #1
 8000632:	409a      	lsls	r2, r3
 8000634:	4b19      	ldr	r3, [pc, #100]	@ (800069c <prvAddNewTaskToReadyList+0xc8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4313      	orrs	r3, r2
 800063a:	4a18      	ldr	r2, [pc, #96]	@ (800069c <prvAddNewTaskToReadyList+0xc8>)
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000642:	4613      	mov	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4a15      	ldr	r2, [pc, #84]	@ (80006a0 <prvAddNewTaskToReadyList+0xcc>)
 800064c:	441a      	add	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3304      	adds	r3, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4610      	mov	r0, r2
 8000656:	f7ff fe44 	bl	80002e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800065a:	f000 fc5f 	bl	8000f1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800065e:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <prvAddNewTaskToReadyList+0xc0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d00e      	beq.n	8000684 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000666:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <prvAddNewTaskToReadyList+0xbc>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000670:	429a      	cmp	r2, r3
 8000672:	d207      	bcs.n	8000684 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000674:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <prvAddNewTaskToReadyList+0xd0>)
 8000676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	f3bf 8f4f 	dsb	sy
 8000680:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000380 	.word	0x20000380
 8000690:	20000280 	.word	0x20000280
 8000694:	2000038c 	.word	0x2000038c
 8000698:	2000039c 	.word	0x2000039c
 800069c:	20000388 	.word	0x20000388
 80006a0:	20000284 	.word	0x20000284
 80006a4:	e000ed04 	.word	0xe000ed04

080006a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	@ 0x28
 80006ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80006b6:	463a      	mov	r2, r7
 80006b8:	1d39      	adds	r1, r7, #4
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fd46 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80006c4:	6839      	ldr	r1, [r7, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	68ba      	ldr	r2, [r7, #8]
 80006ca:	9202      	str	r2, [sp, #8]
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	2300      	movs	r3, #0
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2300      	movs	r3, #0
 80006d4:	460a      	mov	r2, r1
 80006d6:	491f      	ldr	r1, [pc, #124]	@ (8000754 <vTaskStartScheduler+0xac>)
 80006d8:	481f      	ldr	r0, [pc, #124]	@ (8000758 <vTaskStartScheduler+0xb0>)
 80006da:	f7ff fe4e 	bl	800037a <xTaskCreateStatic>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a1e      	ldr	r2, [pc, #120]	@ (800075c <vTaskStartScheduler+0xb4>)
 80006e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80006e4:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <vTaskStartScheduler+0xb4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d002      	beq.n	80006f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80006ec:	2301      	movs	r3, #1
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	e001      	b.n	80006f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d116      	bne.n	800072a <vTaskStartScheduler+0x82>
	__asm volatile
 80006fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000700:	f383 8811 	msr	BASEPRI, r3
 8000704:	f3bf 8f6f 	isb	sy
 8000708:	f3bf 8f4f 	dsb	sy
 800070c:	613b      	str	r3, [r7, #16]
}
 800070e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000710:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <vTaskStartScheduler+0xb8>)
 8000712:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000716:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <vTaskStartScheduler+0xbc>)
 800071a:	2201      	movs	r2, #1
 800071c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <vTaskStartScheduler+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000724:	f000 fb58 	bl	8000dd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000728:	e00f      	b.n	800074a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000730:	d10b      	bne.n	800074a <vTaskStartScheduler+0xa2>
	__asm volatile
 8000732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000736:	f383 8811 	msr	BASEPRI, r3
 800073a:	f3bf 8f6f 	isb	sy
 800073e:	f3bf 8f4f 	dsb	sy
 8000742:	60fb      	str	r3, [r7, #12]
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	e7fd      	b.n	8000746 <vTaskStartScheduler+0x9e>
}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	0800147c 	.word	0x0800147c
 8000758:	08000af1 	.word	0x08000af1
 800075c:	200003a4 	.word	0x200003a4
 8000760:	200003a0 	.word	0x200003a0
 8000764:	2000038c 	.word	0x2000038c
 8000768:	20000384 	.word	0x20000384

0800076c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8000770:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <vTaskSuspendAll+0x18>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	4a03      	ldr	r2, [pc, #12]	@ (8000784 <vTaskSuspendAll+0x18>)
 8000778:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	200003a8 	.word	0x200003a8

08000788 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000796:	4b42      	ldr	r3, [pc, #264]	@ (80008a0 <xTaskResumeAll+0x118>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10b      	bne.n	80007b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800079e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007a2:	f383 8811 	msr	BASEPRI, r3
 80007a6:	f3bf 8f6f 	isb	sy
 80007aa:	f3bf 8f4f 	dsb	sy
 80007ae:	603b      	str	r3, [r7, #0]
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	e7fd      	b.n	80007b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80007b6:	f000 fb81 	bl	8000ebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80007ba:	4b39      	ldr	r3, [pc, #228]	@ (80008a0 <xTaskResumeAll+0x118>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	3b01      	subs	r3, #1
 80007c0:	4a37      	ldr	r2, [pc, #220]	@ (80008a0 <xTaskResumeAll+0x118>)
 80007c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80007c4:	4b36      	ldr	r3, [pc, #216]	@ (80008a0 <xTaskResumeAll+0x118>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d161      	bne.n	8000890 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80007cc:	4b35      	ldr	r3, [pc, #212]	@ (80008a4 <xTaskResumeAll+0x11c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d05d      	beq.n	8000890 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80007d4:	e02e      	b.n	8000834 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80007d6:	4b34      	ldr	r3, [pc, #208]	@ (80008a8 <xTaskResumeAll+0x120>)
 80007d8:	68db      	ldr	r3, [r3, #12]
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	3318      	adds	r3, #24
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fda0 	bl	8000328 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3304      	adds	r3, #4
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fd9b 	bl	8000328 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007f6:	2201      	movs	r2, #1
 80007f8:	409a      	lsls	r2, r3
 80007fa:	4b2c      	ldr	r3, [pc, #176]	@ (80008ac <xTaskResumeAll+0x124>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4313      	orrs	r3, r2
 8000800:	4a2a      	ldr	r2, [pc, #168]	@ (80008ac <xTaskResumeAll+0x124>)
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000808:	4613      	mov	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4a27      	ldr	r2, [pc, #156]	@ (80008b0 <xTaskResumeAll+0x128>)
 8000812:	441a      	add	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3304      	adds	r3, #4
 8000818:	4619      	mov	r1, r3
 800081a:	4610      	mov	r0, r2
 800081c:	f7ff fd61 	bl	80002e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000824:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <xTaskResumeAll+0x12c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800082a:	429a      	cmp	r2, r3
 800082c:	d302      	bcc.n	8000834 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800082e:	4b22      	ldr	r3, [pc, #136]	@ (80008b8 <xTaskResumeAll+0x130>)
 8000830:	2201      	movs	r2, #1
 8000832:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000834:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <xTaskResumeAll+0x120>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1cc      	bne.n	80007d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000842:	f000 fa0b 	bl	8000c5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000846:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <xTaskResumeAll+0x134>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d010      	beq.n	8000874 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000852:	f000 f837 	bl	80008c4 <xTaskIncrementTick>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800085c:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <xTaskResumeAll+0x130>)
 800085e:	2201      	movs	r2, #1
 8000860:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3b01      	subs	r3, #1
 8000866:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f1      	bne.n	8000852 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <xTaskResumeAll+0x134>)
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000874:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <xTaskResumeAll+0x130>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d009      	beq.n	8000890 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800087c:	2301      	movs	r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <xTaskResumeAll+0x138>)
 8000882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	f3bf 8f4f 	dsb	sy
 800088c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000890:	f000 fb44 	bl	8000f1c <vPortExitCritical>

	return xAlreadyYielded;
 8000894:	68bb      	ldr	r3, [r7, #8]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200003a8 	.word	0x200003a8
 80008a4:	20000380 	.word	0x20000380
 80008a8:	20000340 	.word	0x20000340
 80008ac:	20000388 	.word	0x20000388
 80008b0:	20000284 	.word	0x20000284
 80008b4:	20000280 	.word	0x20000280
 80008b8:	20000394 	.word	0x20000394
 80008bc:	20000390 	.word	0x20000390
 80008c0:	e000ed04 	.word	0xe000ed04

080008c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80008ce:	4b4f      	ldr	r3, [pc, #316]	@ (8000a0c <xTaskIncrementTick+0x148>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f040 808f 	bne.w	80009f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80008d8:	4b4d      	ldr	r3, [pc, #308]	@ (8000a10 <xTaskIncrementTick+0x14c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	3301      	adds	r3, #1
 80008de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80008e0:	4a4b      	ldr	r2, [pc, #300]	@ (8000a10 <xTaskIncrementTick+0x14c>)
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d121      	bne.n	8000930 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80008ec:	4b49      	ldr	r3, [pc, #292]	@ (8000a14 <xTaskIncrementTick+0x150>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00b      	beq.n	800090e <xTaskIncrementTick+0x4a>
	__asm volatile
 80008f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008fa:	f383 8811 	msr	BASEPRI, r3
 80008fe:	f3bf 8f6f 	isb	sy
 8000902:	f3bf 8f4f 	dsb	sy
 8000906:	603b      	str	r3, [r7, #0]
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	e7fd      	b.n	800090a <xTaskIncrementTick+0x46>
 800090e:	4b41      	ldr	r3, [pc, #260]	@ (8000a14 <xTaskIncrementTick+0x150>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	4b40      	ldr	r3, [pc, #256]	@ (8000a18 <xTaskIncrementTick+0x154>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a3e      	ldr	r2, [pc, #248]	@ (8000a14 <xTaskIncrementTick+0x150>)
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	4a3e      	ldr	r2, [pc, #248]	@ (8000a18 <xTaskIncrementTick+0x154>)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	6013      	str	r3, [r2, #0]
 8000922:	4b3e      	ldr	r3, [pc, #248]	@ (8000a1c <xTaskIncrementTick+0x158>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	4a3c      	ldr	r2, [pc, #240]	@ (8000a1c <xTaskIncrementTick+0x158>)
 800092a:	6013      	str	r3, [r2, #0]
 800092c:	f000 f996 	bl	8000c5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000930:	4b3b      	ldr	r3, [pc, #236]	@ (8000a20 <xTaskIncrementTick+0x15c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	429a      	cmp	r2, r3
 8000938:	d348      	bcc.n	80009cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800093a:	4b36      	ldr	r3, [pc, #216]	@ (8000a14 <xTaskIncrementTick+0x150>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d104      	bne.n	800094e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000944:	4b36      	ldr	r3, [pc, #216]	@ (8000a20 <xTaskIncrementTick+0x15c>)
 8000946:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800094a:	601a      	str	r2, [r3, #0]
					break;
 800094c:	e03e      	b.n	80009cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800094e:	4b31      	ldr	r3, [pc, #196]	@ (8000a14 <xTaskIncrementTick+0x150>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	429a      	cmp	r2, r3
 8000964:	d203      	bcs.n	800096e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000966:	4a2e      	ldr	r2, [pc, #184]	@ (8000a20 <xTaskIncrementTick+0x15c>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800096c:	e02e      	b.n	80009cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	3304      	adds	r3, #4
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fcd8 	bl	8000328 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800097c:	2b00      	cmp	r3, #0
 800097e:	d004      	beq.n	800098a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	3318      	adds	r3, #24
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fccf 	bl	8000328 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800098e:	2201      	movs	r2, #1
 8000990:	409a      	lsls	r2, r3
 8000992:	4b24      	ldr	r3, [pc, #144]	@ (8000a24 <xTaskIncrementTick+0x160>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4313      	orrs	r3, r2
 8000998:	4a22      	ldr	r2, [pc, #136]	@ (8000a24 <xTaskIncrementTick+0x160>)
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009a0:	4613      	mov	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4a1f      	ldr	r2, [pc, #124]	@ (8000a28 <xTaskIncrementTick+0x164>)
 80009aa:	441a      	add	r2, r3
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	3304      	adds	r3, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	4610      	mov	r0, r2
 80009b4:	f7ff fc95 	bl	80002e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <xTaskIncrementTick+0x168>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d3b9      	bcc.n	800093a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80009c6:	2301      	movs	r3, #1
 80009c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80009ca:	e7b6      	b.n	800093a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80009cc:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <xTaskIncrementTick+0x168>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009d2:	4915      	ldr	r1, [pc, #84]	@ (8000a28 <xTaskIncrementTick+0x164>)
 80009d4:	4613      	mov	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	440b      	add	r3, r1
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d901      	bls.n	80009e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80009e4:	2301      	movs	r3, #1
 80009e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <xTaskIncrementTick+0x16c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d007      	beq.n	8000a00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80009f0:	2301      	movs	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	e004      	b.n	8000a00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80009f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <xTaskIncrementTick+0x170>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	3301      	adds	r3, #1
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <xTaskIncrementTick+0x170>)
 80009fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8000a00:	697b      	ldr	r3, [r7, #20]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200003a8 	.word	0x200003a8
 8000a10:	20000384 	.word	0x20000384
 8000a14:	20000338 	.word	0x20000338
 8000a18:	2000033c 	.word	0x2000033c
 8000a1c:	20000398 	.word	0x20000398
 8000a20:	200003a0 	.word	0x200003a0
 8000a24:	20000388 	.word	0x20000388
 8000a28:	20000284 	.word	0x20000284
 8000a2c:	20000280 	.word	0x20000280
 8000a30:	20000394 	.word	0x20000394
 8000a34:	20000390 	.word	0x20000390

08000a38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b087      	sub	sp, #28
 8000a3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000a3e:	4b27      	ldr	r3, [pc, #156]	@ (8000adc <vTaskSwitchContext+0xa4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000a46:	4b26      	ldr	r3, [pc, #152]	@ (8000ae0 <vTaskSwitchContext+0xa8>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000a4c:	e040      	b.n	8000ad0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8000a4e:	4b24      	ldr	r3, [pc, #144]	@ (8000ae0 <vTaskSwitchContext+0xa8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a54:	4b23      	ldr	r3, [pc, #140]	@ (8000ae4 <vTaskSwitchContext+0xac>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	fab3 f383 	clz	r3, r3
 8000a60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8000a62:	7afb      	ldrb	r3, [r7, #11]
 8000a64:	f1c3 031f 	rsb	r3, r3, #31
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	491f      	ldr	r1, [pc, #124]	@ (8000ae8 <vTaskSwitchContext+0xb0>)
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	440b      	add	r3, r1
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d10b      	bne.n	8000a96 <vTaskSwitchContext+0x5e>
	__asm volatile
 8000a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a82:	f383 8811 	msr	BASEPRI, r3
 8000a86:	f3bf 8f6f 	isb	sy
 8000a8a:	f3bf 8f4f 	dsb	sy
 8000a8e:	607b      	str	r3, [r7, #4]
}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop
 8000a94:	e7fd      	b.n	8000a92 <vTaskSwitchContext+0x5a>
 8000a96:	697a      	ldr	r2, [r7, #20]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	4413      	add	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4a11      	ldr	r2, [pc, #68]	@ (8000ae8 <vTaskSwitchContext+0xb0>)
 8000aa2:	4413      	add	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	3308      	adds	r3, #8
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d104      	bne.n	8000ac6 <vTaskSwitchContext+0x8e>
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	4a07      	ldr	r2, [pc, #28]	@ (8000aec <vTaskSwitchContext+0xb4>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	371c      	adds	r7, #28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	200003a8 	.word	0x200003a8
 8000ae0:	20000394 	.word	0x20000394
 8000ae4:	20000388 	.word	0x20000388
 8000ae8:	20000284 	.word	0x20000284
 8000aec:	20000280 	.word	0x20000280

08000af0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8000af8:	f000 f852 	bl	8000ba0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <prvIdleTask+0x28>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d9f9      	bls.n	8000af8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <prvIdleTask+0x2c>)
 8000b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	f3bf 8f4f 	dsb	sy
 8000b10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8000b14:	e7f0      	b.n	8000af8 <prvIdleTask+0x8>
 8000b16:	bf00      	nop
 8000b18:	20000284 	.word	0x20000284
 8000b1c:	e000ed04 	.word	0xe000ed04

08000b20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	e00c      	b.n	8000b46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4413      	add	r3, r2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <prvInitialiseTaskLists+0x60>)
 8000b38:	4413      	add	r3, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fba6 	bl	800028c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3301      	adds	r3, #1
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b06      	cmp	r3, #6
 8000b4a:	d9ef      	bls.n	8000b2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8000b4c:	480d      	ldr	r0, [pc, #52]	@ (8000b84 <prvInitialiseTaskLists+0x64>)
 8000b4e:	f7ff fb9d 	bl	800028c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8000b52:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <prvInitialiseTaskLists+0x68>)
 8000b54:	f7ff fb9a 	bl	800028c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <prvInitialiseTaskLists+0x6c>)
 8000b5a:	f7ff fb97 	bl	800028c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8000b5e:	480c      	ldr	r0, [pc, #48]	@ (8000b90 <prvInitialiseTaskLists+0x70>)
 8000b60:	f7ff fb94 	bl	800028c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8000b64:	480b      	ldr	r0, [pc, #44]	@ (8000b94 <prvInitialiseTaskLists+0x74>)
 8000b66:	f7ff fb91 	bl	800028c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <prvInitialiseTaskLists+0x78>)
 8000b6c:	4a05      	ldr	r2, [pc, #20]	@ (8000b84 <prvInitialiseTaskLists+0x64>)
 8000b6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <prvInitialiseTaskLists+0x7c>)
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <prvInitialiseTaskLists+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000284 	.word	0x20000284
 8000b84:	20000310 	.word	0x20000310
 8000b88:	20000324 	.word	0x20000324
 8000b8c:	20000340 	.word	0x20000340
 8000b90:	20000354 	.word	0x20000354
 8000b94:	2000036c 	.word	0x2000036c
 8000b98:	20000338 	.word	0x20000338
 8000b9c:	2000033c 	.word	0x2000033c

08000ba0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000ba6:	e019      	b.n	8000bdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8000ba8:	f000 f988 	bl	8000ebc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000bac:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <prvCheckTasksWaitingTermination+0x50>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fbb5 	bl	8000328 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <prvCheckTasksWaitingTermination+0x54>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf4 <prvCheckTasksWaitingTermination+0x54>)
 8000bc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <prvCheckTasksWaitingTermination+0x58>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <prvCheckTasksWaitingTermination+0x58>)
 8000bd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8000bd2:	f000 f9a3 	bl	8000f1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 f810 	bl	8000bfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <prvCheckTasksWaitingTermination+0x58>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1e1      	bne.n	8000ba8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000354 	.word	0x20000354
 8000bf4:	20000380 	.word	0x20000380
 8000bf8:	20000368 	.word	0x20000368

08000bfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d108      	bne.n	8000c20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 fae2 	bl	80011dc <vPortFree>
				vPortFree( pxTCB );
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f000 fadf 	bl	80011dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8000c1e:	e019      	b.n	8000c54 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d103      	bne.n	8000c32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 fad6 	bl	80011dc <vPortFree>
	}
 8000c30:	e010      	b.n	8000c54 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d00b      	beq.n	8000c54 <prvDeleteTCB+0x58>
	__asm volatile
 8000c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c40:	f383 8811 	msr	BASEPRI, r3
 8000c44:	f3bf 8f6f 	isb	sy
 8000c48:	f3bf 8f4f 	dsb	sy
 8000c4c:	60fb      	str	r3, [r7, #12]
}
 8000c4e:	bf00      	nop
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <prvDeleteTCB+0x54>
	}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c62:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <prvResetNextTaskUnblockTime+0x38>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d104      	bne.n	8000c76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <prvResetNextTaskUnblockTime+0x3c>)
 8000c6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8000c74:	e008      	b.n	8000c88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <prvResetNextTaskUnblockTime+0x38>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <prvResetNextTaskUnblockTime+0x3c>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000338 	.word	0x20000338
 8000c98:	200003a0 	.word	0x200003a0

08000c9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <xTaskGetSchedulerState+0x34>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d102      	bne.n	8000cb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8000caa:	2301      	movs	r3, #1
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	e008      	b.n	8000cc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <xTaskGetSchedulerState+0x38>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	e001      	b.n	8000cc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8000cc2:	687b      	ldr	r3, [r7, #4]
	}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	2000038c 	.word	0x2000038c
 8000cd4:	200003a8 	.word	0x200003a8

08000cd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3b04      	subs	r3, #4
 8000cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	f023 0201 	bic.w	r2, r3, #1
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	3b04      	subs	r3, #4
 8000d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000d08:	4a08      	ldr	r2, [pc, #32]	@ (8000d2c <pxPortInitialiseStack+0x54>)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	3b14      	subs	r3, #20
 8000d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	3b20      	subs	r3, #32
 8000d1e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000d20:	68fb      	ldr	r3, [r7, #12]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	08000d31 	.word	0x08000d31

08000d30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000d3a:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <prvTaskExitError+0x54>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d42:	d00b      	beq.n	8000d5c <prvTaskExitError+0x2c>
	__asm volatile
 8000d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d48:	f383 8811 	msr	BASEPRI, r3
 8000d4c:	f3bf 8f6f 	isb	sy
 8000d50:	f3bf 8f4f 	dsb	sy
 8000d54:	60fb      	str	r3, [r7, #12]
}
 8000d56:	bf00      	nop
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <prvTaskExitError+0x28>
	__asm volatile
 8000d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d60:	f383 8811 	msr	BASEPRI, r3
 8000d64:	f3bf 8f6f 	isb	sy
 8000d68:	f3bf 8f4f 	dsb	sy
 8000d6c:	60bb      	str	r3, [r7, #8]
}
 8000d6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000d70:	bf00      	nop
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0fc      	beq.n	8000d72 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	20000008 	.word	0x20000008
	...

08000d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000d90:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <pxCurrentTCBConst2>)
 8000d92:	6819      	ldr	r1, [r3, #0]
 8000d94:	6808      	ldr	r0, [r1, #0]
 8000d96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d9a:	f380 8809 	msr	PSP, r0
 8000d9e:	f3bf 8f6f 	isb	sy
 8000da2:	f04f 0000 	mov.w	r0, #0
 8000da6:	f380 8811 	msr	BASEPRI, r0
 8000daa:	f04e 0e0d 	orr.w	lr, lr, #13
 8000dae:	4770      	bx	lr

08000db0 <pxCurrentTCBConst2>:
 8000db0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop

08000db8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000db8:	4806      	ldr	r0, [pc, #24]	@ (8000dd4 <prvPortStartFirstTask+0x1c>)
 8000dba:	6800      	ldr	r0, [r0, #0]
 8000dbc:	6800      	ldr	r0, [r0, #0]
 8000dbe:	f380 8808 	msr	MSP, r0
 8000dc2:	b662      	cpsie	i
 8000dc4:	b661      	cpsie	f
 8000dc6:	f3bf 8f4f 	dsb	sy
 8000dca:	f3bf 8f6f 	isb	sy
 8000dce:	df00      	svc	0
 8000dd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000dd2:	bf00      	nop
 8000dd4:	e000ed08 	.word	0xe000ed08

08000dd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000dde:	4b32      	ldr	r3, [pc, #200]	@ (8000ea8 <xPortStartScheduler+0xd0>)
 8000de0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	22ff      	movs	r2, #255	@ 0xff
 8000dee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4b2a      	ldr	r3, [pc, #168]	@ (8000eac <xPortStartScheduler+0xd4>)
 8000e04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000e06:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb0 <xPortStartScheduler+0xd8>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000e0c:	e009      	b.n	8000e22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8000e0e:	4b28      	ldr	r3, [pc, #160]	@ (8000eb0 <xPortStartScheduler+0xd8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	4a26      	ldr	r2, [pc, #152]	@ (8000eb0 <xPortStartScheduler+0xd8>)
 8000e16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000e22:	78fb      	ldrb	r3, [r7, #3]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e2a:	2b80      	cmp	r3, #128	@ 0x80
 8000e2c:	d0ef      	beq.n	8000e0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000e2e:	4b20      	ldr	r3, [pc, #128]	@ (8000eb0 <xPortStartScheduler+0xd8>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	d00b      	beq.n	8000e52 <xPortStartScheduler+0x7a>
	__asm volatile
 8000e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e3e:	f383 8811 	msr	BASEPRI, r3
 8000e42:	f3bf 8f6f 	isb	sy
 8000e46:	f3bf 8f4f 	dsb	sy
 8000e4a:	60bb      	str	r3, [r7, #8]
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	e7fd      	b.n	8000e4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000e52:	4b17      	ldr	r3, [pc, #92]	@ (8000eb0 <xPortStartScheduler+0xd8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	4a15      	ldr	r2, [pc, #84]	@ (8000eb0 <xPortStartScheduler+0xd8>)
 8000e5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <xPortStartScheduler+0xd8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8000e64:	4a12      	ldr	r2, [pc, #72]	@ (8000eb0 <xPortStartScheduler+0xd8>)
 8000e66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000e70:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <xPortStartScheduler+0xdc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0f      	ldr	r2, [pc, #60]	@ (8000eb4 <xPortStartScheduler+0xdc>)
 8000e76:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <xPortStartScheduler+0xdc>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb4 <xPortStartScheduler+0xdc>)
 8000e82:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8000e86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000e88:	f000 f8b8 	bl	8000ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <xPortStartScheduler+0xe0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000e92:	f7ff ff91 	bl	8000db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000e96:	f7ff fdcf 	bl	8000a38 <vTaskSwitchContext>
	prvTaskExitError();
 8000e9a:	f7ff ff49 	bl	8000d30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	e000e400 	.word	0xe000e400
 8000eac:	200003ac 	.word	0x200003ac
 8000eb0:	200003b0 	.word	0x200003b0
 8000eb4:	e000ed20 	.word	0xe000ed20
 8000eb8:	20000008 	.word	0x20000008

08000ebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
	__asm volatile
 8000ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ec6:	f383 8811 	msr	BASEPRI, r3
 8000eca:	f3bf 8f6f 	isb	sy
 8000ece:	f3bf 8f4f 	dsb	sy
 8000ed2:	607b      	str	r3, [r7, #4]
}
 8000ed4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <vPortEnterCritical+0x58>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f14 <vPortEnterCritical+0x58>)
 8000ede:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <vPortEnterCritical+0x58>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d110      	bne.n	8000f0a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <vPortEnterCritical+0x5c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d00b      	beq.n	8000f0a <vPortEnterCritical+0x4e>
	__asm volatile
 8000ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ef6:	f383 8811 	msr	BASEPRI, r3
 8000efa:	f3bf 8f6f 	isb	sy
 8000efe:	f3bf 8f4f 	dsb	sy
 8000f02:	603b      	str	r3, [r7, #0]
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	e7fd      	b.n	8000f06 <vPortEnterCritical+0x4a>
	}
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	20000008 	.word	0x20000008
 8000f18:	e000ed04 	.word	0xe000ed04

08000f1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000f22:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <vPortExitCritical+0x50>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10b      	bne.n	8000f42 <vPortExitCritical+0x26>
	__asm volatile
 8000f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f2e:	f383 8811 	msr	BASEPRI, r3
 8000f32:	f3bf 8f6f 	isb	sy
 8000f36:	f3bf 8f4f 	dsb	sy
 8000f3a:	607b      	str	r3, [r7, #4]
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	e7fd      	b.n	8000f3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8000f42:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <vPortExitCritical+0x50>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	4a08      	ldr	r2, [pc, #32]	@ (8000f6c <vPortExitCritical+0x50>)
 8000f4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000f4c:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <vPortExitCritical+0x50>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d105      	bne.n	8000f60 <vPortExitCritical+0x44>
 8000f54:	2300      	movs	r3, #0
 8000f56:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000f5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008

08000f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000f70:	f3ef 8009 	mrs	r0, PSP
 8000f74:	f3bf 8f6f 	isb	sy
 8000f78:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb0 <pxCurrentTCBConst>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f80:	6010      	str	r0, [r2, #0]
 8000f82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000f86:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8000f8a:	f380 8811 	msr	BASEPRI, r0
 8000f8e:	f7ff fd53 	bl	8000a38 <vTaskSwitchContext>
 8000f92:	f04f 0000 	mov.w	r0, #0
 8000f96:	f380 8811 	msr	BASEPRI, r0
 8000f9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000f9e:	6819      	ldr	r1, [r3, #0]
 8000fa0:	6808      	ldr	r0, [r1, #0]
 8000fa2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000fa6:	f380 8809 	msr	PSP, r0
 8000faa:	f3bf 8f6f 	isb	sy
 8000fae:	4770      	bx	lr

08000fb0 <pxCurrentTCBConst>:
 8000fb0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop

08000fb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8000fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fc2:	f383 8811 	msr	BASEPRI, r3
 8000fc6:	f3bf 8f6f 	isb	sy
 8000fca:	f3bf 8f4f 	dsb	sy
 8000fce:	607b      	str	r3, [r7, #4]
}
 8000fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000fd2:	f7ff fc77 	bl	80008c4 <xTaskIncrementTick>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <xPortSysTickHandler+0x40>)
 8000fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	f383 8811 	msr	BASEPRI, r3
}
 8000fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	e000ed04 	.word	0xe000ed04

08000ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001000:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <vPortSetupTimerInterrupt+0x30>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <vPortSetupTimerInterrupt+0x34>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <vPortSetupTimerInterrupt+0x38>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a09      	ldr	r2, [pc, #36]	@ (8001038 <vPortSetupTimerInterrupt+0x3c>)
 8001012:	fba2 2303 	umull	r2, r3, r2, r3
 8001016:	099b      	lsrs	r3, r3, #6
 8001018:	4a08      	ldr	r2, [pc, #32]	@ (800103c <vPortSetupTimerInterrupt+0x40>)
 800101a:	3b01      	subs	r3, #1
 800101c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800101e:	4b03      	ldr	r3, [pc, #12]	@ (800102c <vPortSetupTimerInterrupt+0x30>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	e000e010 	.word	0xe000e010
 8001030:	e000e018 	.word	0xe000e018
 8001034:	20000000 	.word	0x20000000
 8001038:	10624dd3 	.word	0x10624dd3
 800103c:	e000e014 	.word	0xe000e014

08001040 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800104c:	f7ff fb8e 	bl	800076c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001050:	4b5c      	ldr	r3, [pc, #368]	@ (80011c4 <pvPortMalloc+0x184>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001058:	f000 f924 	bl	80012a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800105c:	4b5a      	ldr	r3, [pc, #360]	@ (80011c8 <pvPortMalloc+0x188>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4013      	ands	r3, r2
 8001064:	2b00      	cmp	r3, #0
 8001066:	f040 8095 	bne.w	8001194 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d01e      	beq.n	80010ae <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001070:	2208      	movs	r2, #8
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	2b00      	cmp	r3, #0
 8001080:	d015      	beq.n	80010ae <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f023 0307 	bic.w	r3, r3, #7
 8001088:	3308      	adds	r3, #8
 800108a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00b      	beq.n	80010ae <pvPortMalloc+0x6e>
	__asm volatile
 8001096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800109a:	f383 8811 	msr	BASEPRI, r3
 800109e:	f3bf 8f6f 	isb	sy
 80010a2:	f3bf 8f4f 	dsb	sy
 80010a6:	617b      	str	r3, [r7, #20]
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	e7fd      	b.n	80010aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d06f      	beq.n	8001194 <pvPortMalloc+0x154>
 80010b4:	4b45      	ldr	r3, [pc, #276]	@ (80011cc <pvPortMalloc+0x18c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d86a      	bhi.n	8001194 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80010be:	4b44      	ldr	r3, [pc, #272]	@ (80011d0 <pvPortMalloc+0x190>)
 80010c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80010c2:	4b43      	ldr	r3, [pc, #268]	@ (80011d0 <pvPortMalloc+0x190>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010c8:	e004      	b.n	80010d4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80010ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d903      	bls.n	80010e6 <pvPortMalloc+0xa6>
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f1      	bne.n	80010ca <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80010e6:	4b37      	ldr	r3, [pc, #220]	@ (80011c4 <pvPortMalloc+0x184>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d051      	beq.n	8001194 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2208      	movs	r2, #8
 80010f6:	4413      	add	r3, r2
 80010f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80010fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	1ad2      	subs	r2, r2, r3
 800110a:	2308      	movs	r3, #8
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	429a      	cmp	r2, r3
 8001110:	d920      	bls.n	8001154 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4413      	add	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00b      	beq.n	800113c <pvPortMalloc+0xfc>
	__asm volatile
 8001124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001128:	f383 8811 	msr	BASEPRI, r3
 800112c:	f3bf 8f6f 	isb	sy
 8001130:	f3bf 8f4f 	dsb	sy
 8001134:	613b      	str	r3, [r7, #16]
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800113c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	1ad2      	subs	r2, r2, r3
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800114e:	69b8      	ldr	r0, [r7, #24]
 8001150:	f000 f90a 	bl	8001368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001154:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <pvPortMalloc+0x18c>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <pvPortMalloc+0x18c>)
 8001160:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001162:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <pvPortMalloc+0x18c>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <pvPortMalloc+0x194>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d203      	bcs.n	8001176 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800116e:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <pvPortMalloc+0x18c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a18      	ldr	r2, [pc, #96]	@ (80011d4 <pvPortMalloc+0x194>)
 8001174:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <pvPortMalloc+0x188>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	431a      	orrs	r2, r3
 8001180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001182:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800118a:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <pvPortMalloc+0x198>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	4a11      	ldr	r2, [pc, #68]	@ (80011d8 <pvPortMalloc+0x198>)
 8001192:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001194:	f7ff faf8 	bl	8000788 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00b      	beq.n	80011ba <pvPortMalloc+0x17a>
	__asm volatile
 80011a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011a6:	f383 8811 	msr	BASEPRI, r3
 80011aa:	f3bf 8f6f 	isb	sy
 80011ae:	f3bf 8f4f 	dsb	sy
 80011b2:	60fb      	str	r3, [r7, #12]
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	e7fd      	b.n	80011b6 <pvPortMalloc+0x176>
	return pvReturn;
 80011ba:	69fb      	ldr	r3, [r7, #28]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3728      	adds	r7, #40	@ 0x28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000fbc 	.word	0x20000fbc
 80011c8:	20000fd0 	.word	0x20000fd0
 80011cc:	20000fc0 	.word	0x20000fc0
 80011d0:	20000fb4 	.word	0x20000fb4
 80011d4:	20000fc4 	.word	0x20000fc4
 80011d8:	20000fc8 	.word	0x20000fc8

080011dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d04f      	beq.n	800128e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80011ee:	2308      	movs	r3, #8
 80011f0:	425b      	negs	r3, r3
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4413      	add	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4b25      	ldr	r3, [pc, #148]	@ (8001298 <vPortFree+0xbc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4013      	ands	r3, r2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10b      	bne.n	8001222 <vPortFree+0x46>
	__asm volatile
 800120a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800120e:	f383 8811 	msr	BASEPRI, r3
 8001212:	f3bf 8f6f 	isb	sy
 8001216:	f3bf 8f4f 	dsb	sy
 800121a:	60fb      	str	r3, [r7, #12]
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	e7fd      	b.n	800121e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00b      	beq.n	8001242 <vPortFree+0x66>
	__asm volatile
 800122a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800122e:	f383 8811 	msr	BASEPRI, r3
 8001232:	f3bf 8f6f 	isb	sy
 8001236:	f3bf 8f4f 	dsb	sy
 800123a:	60bb      	str	r3, [r7, #8]
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	e7fd      	b.n	800123e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <vPortFree+0xbc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4013      	ands	r3, r2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d01e      	beq.n	800128e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d11a      	bne.n	800128e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <vPortFree+0xbc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	43db      	mvns	r3, r3
 8001262:	401a      	ands	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001268:	f7ff fa80 	bl	800076c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <vPortFree+0xc0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4413      	add	r3, r2
 8001276:	4a09      	ldr	r2, [pc, #36]	@ (800129c <vPortFree+0xc0>)
 8001278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800127a:	6938      	ldr	r0, [r7, #16]
 800127c:	f000 f874 	bl	8001368 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8001280:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <vPortFree+0xc4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	4a06      	ldr	r2, [pc, #24]	@ (80012a0 <vPortFree+0xc4>)
 8001288:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800128a:	f7ff fa7d 	bl	8000788 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000fd0 	.word	0x20000fd0
 800129c:	20000fc0 	.word	0x20000fc0
 80012a0:	20000fcc 	.word	0x20000fcc

080012a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80012ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012b0:	4b27      	ldr	r3, [pc, #156]	@ (8001350 <prvHeapInit+0xac>)
 80012b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00c      	beq.n	80012d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3307      	adds	r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f023 0307 	bic.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001350 <prvHeapInit+0xac>)
 80012d4:	4413      	add	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <prvHeapInit+0xb0>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <prvHeapInit+0xb0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80012f0:	2208      	movs	r2, #8
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f023 0307 	bic.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4a15      	ldr	r2, [pc, #84]	@ (8001358 <prvHeapInit+0xb4>)
 8001304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <prvHeapInit+0xb4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800130e:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <prvHeapInit+0xb4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	1ad2      	subs	r2, r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <prvHeapInit+0xb4>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <prvHeapInit+0xb8>)
 8001332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <prvHeapInit+0xbc>)
 800133a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800133c:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <prvHeapInit+0xc0>)
 800133e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	200003b4 	.word	0x200003b4
 8001354:	20000fb4 	.word	0x20000fb4
 8001358:	20000fbc 	.word	0x20000fbc
 800135c:	20000fc4 	.word	0x20000fc4
 8001360:	20000fc0 	.word	0x20000fc0
 8001364:	20000fd0 	.word	0x20000fd0

08001368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001370:	4b27      	ldr	r3, [pc, #156]	@ (8001410 <prvInsertBlockIntoFreeList+0xa8>)
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e002      	b.n	800137c <prvInsertBlockIntoFreeList+0x14>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	d8f7      	bhi.n	8001376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	4413      	add	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	d108      	bne.n	80013aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	441a      	add	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	441a      	add	r2, r3
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d118      	bne.n	80013f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <prvInsertBlockIntoFreeList+0xac>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d00d      	beq.n	80013e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	441a      	add	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e008      	b.n	80013f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001414 <prvInsertBlockIntoFreeList+0xac>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e003      	b.n	80013f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d002      	beq.n	8001406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	20000fb4 	.word	0x20000fb4
 8001414:	20000fbc 	.word	0x20000fbc

08001418 <__libc_init_array>:
 8001418:	b570      	push	{r4, r5, r6, lr}
 800141a:	2600      	movs	r6, #0
 800141c:	4d0c      	ldr	r5, [pc, #48]	@ (8001450 <__libc_init_array+0x38>)
 800141e:	4c0d      	ldr	r4, [pc, #52]	@ (8001454 <__libc_init_array+0x3c>)
 8001420:	1b64      	subs	r4, r4, r5
 8001422:	10a4      	asrs	r4, r4, #2
 8001424:	42a6      	cmp	r6, r4
 8001426:	d109      	bne.n	800143c <__libc_init_array+0x24>
 8001428:	f000 f81a 	bl	8001460 <_init>
 800142c:	2600      	movs	r6, #0
 800142e:	4d0a      	ldr	r5, [pc, #40]	@ (8001458 <__libc_init_array+0x40>)
 8001430:	4c0a      	ldr	r4, [pc, #40]	@ (800145c <__libc_init_array+0x44>)
 8001432:	1b64      	subs	r4, r4, r5
 8001434:	10a4      	asrs	r4, r4, #2
 8001436:	42a6      	cmp	r6, r4
 8001438:	d105      	bne.n	8001446 <__libc_init_array+0x2e>
 800143a:	bd70      	pop	{r4, r5, r6, pc}
 800143c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001440:	4798      	blx	r3
 8001442:	3601      	adds	r6, #1
 8001444:	e7ee      	b.n	8001424 <__libc_init_array+0xc>
 8001446:	f855 3b04 	ldr.w	r3, [r5], #4
 800144a:	4798      	blx	r3
 800144c:	3601      	adds	r6, #1
 800144e:	e7f2      	b.n	8001436 <__libc_init_array+0x1e>
 8001450:	08001484 	.word	0x08001484
 8001454:	08001484 	.word	0x08001484
 8001458:	08001484 	.word	0x08001484
 800145c:	08001488 	.word	0x08001488

08001460 <_init>:
 8001460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001462:	bf00      	nop
 8001464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001466:	bc08      	pop	{r3}
 8001468:	469e      	mov	lr, r3
 800146a:	4770      	bx	lr

0800146c <_fini>:
 800146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146e:	bf00      	nop
 8001470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001472:	bc08      	pop	{r3}
 8001474:	469e      	mov	lr, r3
 8001476:	4770      	bx	lr
