
LEDButtonBlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000280  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800038c  0800038c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800038c  0800038c  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800038c  0800038c  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800038c  0800038c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800038c  0800038c  0000138c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000390  08000390  00001390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000394  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000398  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000398  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ca6  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000509  00000000  00000000  00002cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  000031e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000144  00000000  00000000  000033b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000152e6  00000000  00000000  000034f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001df4  00000000  00000000  000187da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b358  00000000  00000000  0001a5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00095926  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000056c  00000000  00000000  0009596c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00095ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000374 	.word	0x08000374

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000374 	.word	0x08000374

0800014c <main>:
void enableClk();
void light(char i);



int main(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

	enableClk();
 8000152:	f000 f84d 	bl	80001f0 <enableClk>
	configureIO();
 8000156:	f000 f831 	bl	80001bc <configureIO>
	_Bool pressed = false;
 800015a:	2300      	movs	r3, #0
 800015c:	71fb      	strb	r3, [r7, #7]
	//GPIOA->ODR &= ~(0x03); // clear output

	char c = 1;
 800015e:	2301      	movs	r3, #1
 8000160:	71bb      	strb	r3, [r7, #6]


	while (1) {

	  if (GPIOB -> IDR & (1 << 10)){
 8000162:	4b15      	ldr	r3, [pc, #84]	@ (80001b8 <main+0x6c>)
 8000164:	689b      	ldr	r3, [r3, #8]
 8000166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800016a:	2b00      	cmp	r3, #0
 800016c:	d008      	beq.n	8000180 <main+0x34>
		  while (GPIOB -> IDR & (1 << 10));
 800016e:	bf00      	nop
 8000170:	4b11      	ldr	r3, [pc, #68]	@ (80001b8 <main+0x6c>)
 8000172:	689b      	ldr	r3, [r3, #8]
 8000174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000178:	2b00      	cmp	r3, #0
 800017a:	d1f9      	bne.n	8000170 <main+0x24>
		  pressed = true;
 800017c:	2301      	movs	r3, #1
 800017e:	71fb      	strb	r3, [r7, #7]
	  }


	  if (c<=5 && pressed){
 8000180:	79bb      	ldrb	r3, [r7, #6]
 8000182:	2b05      	cmp	r3, #5
 8000184:	d80e      	bhi.n	80001a4 <main+0x58>
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d00b      	beq.n	80001a4 <main+0x58>
		  	  pressed = false;
 800018c:	2300      	movs	r3, #0
 800018e:	71fb      	strb	r3, [r7, #7]
		  	  if (c==1)
 8000190:	79bb      	ldrb	r3, [r7, #6]
 8000192:	2b01      	cmp	r3, #1
 8000194:	d102      	bne.n	800019c <main+0x50>
		  		  light(1);
 8000196:	2001      	movs	r0, #1
 8000198:	f000 f83e 	bl	8000218 <light>
		  	  c++;
 800019c:	79bb      	ldrb	r3, [r7, #6]
 800019e:	3301      	adds	r3, #1
 80001a0:	71bb      	strb	r3, [r7, #6]
 80001a2:	e008      	b.n	80001b6 <main+0x6a>
	  }

	  else if (c == 6){
 80001a4:	79bb      	ldrb	r3, [r7, #6]
 80001a6:	2b06      	cmp	r3, #6
 80001a8:	d1db      	bne.n	8000162 <main+0x16>
		  	  c++;
 80001aa:	79bb      	ldrb	r3, [r7, #6]
 80001ac:	3301      	adds	r3, #1
 80001ae:	71bb      	strb	r3, [r7, #6]
		  	  light(2);
 80001b0:	2002      	movs	r0, #2
 80001b2:	f000 f831 	bl	8000218 <light>
	  if (GPIOB -> IDR & (1 << 10)){
 80001b6:	e7d4      	b.n	8000162 <main+0x16>
 80001b8:	40010c00 	.word	0x40010c00

080001bc <configureIO>:

}



void configureIO(){
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0

	GPIOA -> CRL = 0x44444422; //output 2 MHz A0,A1
 80001c0:	4b07      	ldr	r3, [pc, #28]	@ (80001e0 <configureIO+0x24>)
 80001c2:	4a08      	ldr	r2, [pc, #32]	@ (80001e4 <configureIO+0x28>)
 80001c4:	601a      	str	r2, [r3, #0]
	GPIOB -> CRH = 0x44444844; //input pull-down/up. B10
 80001c6:	4b08      	ldr	r3, [pc, #32]	@ (80001e8 <configureIO+0x2c>)
 80001c8:	4a08      	ldr	r2, [pc, #32]	@ (80001ec <configureIO+0x30>)
 80001ca:	605a      	str	r2, [r3, #4]
	GPIOB->ODR &= ~(1 << 10);
 80001cc:	4b06      	ldr	r3, [pc, #24]	@ (80001e8 <configureIO+0x2c>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	4a05      	ldr	r2, [pc, #20]	@ (80001e8 <configureIO+0x2c>)
 80001d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80001d6:	60d3      	str	r3, [r2, #12]
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	40010800 	.word	0x40010800
 80001e4:	44444422 	.word	0x44444422
 80001e8:	40010c00 	.word	0x40010c00
 80001ec:	44444844 	.word	0x44444844

080001f0 <enableClk>:

void enableClk(){
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= RCC_APB2ENR_IOPAEN;
 80001f4:	4b07      	ldr	r3, [pc, #28]	@ (8000214 <enableClk+0x24>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a06      	ldr	r2, [pc, #24]	@ (8000214 <enableClk+0x24>)
 80001fa:	f043 0304 	orr.w	r3, r3, #4
 80001fe:	6193      	str	r3, [r2, #24]
	RCC -> APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <enableClk+0x24>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a03      	ldr	r2, [pc, #12]	@ (8000214 <enableClk+0x24>)
 8000206:	f043 0308 	orr.w	r3, r3, #8
 800020a:	6193      	str	r3, [r2, #24]
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	40021000 	.word	0x40021000

08000218 <light>:


void light (char i){
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]

	switch (i){
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d002      	beq.n	800022e <light+0x16>
 8000228:	2b02      	cmp	r3, #2
 800022a:	d007      	beq.n	800023c <light+0x24>
			case 1: GPIOA -> ODR |= 1 << 0;   break; //A0
			case 2: GPIOA -> ODR |= 1 << 1;  break; //A1
			default: break;
 800022c:	e00d      	b.n	800024a <light+0x32>
			case 1: GPIOA -> ODR |= 1 << 0;   break; //A0
 800022e:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <light+0x3c>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	4a08      	ldr	r2, [pc, #32]	@ (8000254 <light+0x3c>)
 8000234:	f043 0301 	orr.w	r3, r3, #1
 8000238:	60d3      	str	r3, [r2, #12]
 800023a:	e006      	b.n	800024a <light+0x32>
			case 2: GPIOA -> ODR |= 1 << 1;  break; //A1
 800023c:	4b05      	ldr	r3, [pc, #20]	@ (8000254 <light+0x3c>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	4a04      	ldr	r2, [pc, #16]	@ (8000254 <light+0x3c>)
 8000242:	f043 0302 	orr.w	r3, r3, #2
 8000246:	60d3      	str	r3, [r2, #12]
 8000248:	bf00      	nop
		}

}
 800024a:	bf00      	nop
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	40010800 	.word	0x40010800

08000258 <NMI_Handler>:
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
 800025c:	bf00      	nop
 800025e:	e7fd      	b.n	800025c <NMI_Handler+0x4>

08000260 <HardFault_Handler>:
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
 8000264:	bf00      	nop
 8000266:	e7fd      	b.n	8000264 <HardFault_Handler+0x4>

08000268 <MemManage_Handler>:
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
 800026c:	bf00      	nop
 800026e:	e7fd      	b.n	800026c <MemManage_Handler+0x4>

08000270 <BusFault_Handler>:
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
 8000274:	bf00      	nop
 8000276:	e7fd      	b.n	8000274 <BusFault_Handler+0x4>

08000278 <UsageFault_Handler>:
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
 800027c:	bf00      	nop
 800027e:	e7fd      	b.n	800027c <UsageFault_Handler+0x4>

08000280 <SVC_Handler>:
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <DebugMon_Handler>:
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr

08000298 <PendSV_Handler>:
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr

080002a4 <SysTick_Handler>:
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	f000 f82e 	bl	8000308 <HAL_IncTick>
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <SystemInit>:
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <Reset_Handler>:
 80002bc:	f7ff fff8 	bl	80002b0 <SystemInit>
 80002c0:	480b      	ldr	r0, [pc, #44]	@ (80002f0 <LoopFillZerobss+0xe>)
 80002c2:	490c      	ldr	r1, [pc, #48]	@ (80002f4 <LoopFillZerobss+0x12>)
 80002c4:	4a0c      	ldr	r2, [pc, #48]	@ (80002f8 <LoopFillZerobss+0x16>)
 80002c6:	2300      	movs	r3, #0
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:
 80002ca:	58d4      	ldr	r4, [r2, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:
 80002d0:	18c4      	adds	r4, r0, r3
 80002d2:	428c      	cmp	r4, r1
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>
 80002d6:	4a09      	ldr	r2, [pc, #36]	@ (80002fc <LoopFillZerobss+0x1a>)
 80002d8:	4c09      	ldr	r4, [pc, #36]	@ (8000300 <LoopFillZerobss+0x1e>)
 80002da:	2300      	movs	r3, #0
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:
 80002de:	6013      	str	r3, [r2, #0]
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:
 80002e2:	42a2      	cmp	r2, r4
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>
 80002e6:	f000 f821 	bl	800032c <__libc_init_array>
 80002ea:	f7ff ff2f 	bl	800014c <main>
 80002ee:	4770      	bx	lr
 80002f0:	20000000 	.word	0x20000000
 80002f4:	20000004 	.word	0x20000004
 80002f8:	08000394 	.word	0x08000394
 80002fc:	20000004 	.word	0x20000004
 8000300:	20000024 	.word	0x20000024

08000304 <ADC1_2_IRQHandler>:
 8000304:	e7fe      	b.n	8000304 <ADC1_2_IRQHandler>
	...

08000308 <HAL_IncTick>:
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
 800030c:	4b05      	ldr	r3, [pc, #20]	@ (8000324 <HAL_IncTick+0x1c>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	461a      	mov	r2, r3
 8000312:	4b05      	ldr	r3, [pc, #20]	@ (8000328 <HAL_IncTick+0x20>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4413      	add	r3, r2
 8000318:	4a03      	ldr	r2, [pc, #12]	@ (8000328 <HAL_IncTick+0x20>)
 800031a:	6013      	str	r3, [r2, #0]
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	bc80      	pop	{r7}
 8000322:	4770      	bx	lr
 8000324:	20000000 	.word	0x20000000
 8000328:	20000020 	.word	0x20000020

0800032c <__libc_init_array>:
 800032c:	b570      	push	{r4, r5, r6, lr}
 800032e:	2600      	movs	r6, #0
 8000330:	4d0c      	ldr	r5, [pc, #48]	@ (8000364 <__libc_init_array+0x38>)
 8000332:	4c0d      	ldr	r4, [pc, #52]	@ (8000368 <__libc_init_array+0x3c>)
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	10a4      	asrs	r4, r4, #2
 8000338:	42a6      	cmp	r6, r4
 800033a:	d109      	bne.n	8000350 <__libc_init_array+0x24>
 800033c:	f000 f81a 	bl	8000374 <_init>
 8000340:	2600      	movs	r6, #0
 8000342:	4d0a      	ldr	r5, [pc, #40]	@ (800036c <__libc_init_array+0x40>)
 8000344:	4c0a      	ldr	r4, [pc, #40]	@ (8000370 <__libc_init_array+0x44>)
 8000346:	1b64      	subs	r4, r4, r5
 8000348:	10a4      	asrs	r4, r4, #2
 800034a:	42a6      	cmp	r6, r4
 800034c:	d105      	bne.n	800035a <__libc_init_array+0x2e>
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f855 3b04 	ldr.w	r3, [r5], #4
 8000354:	4798      	blx	r3
 8000356:	3601      	adds	r6, #1
 8000358:	e7ee      	b.n	8000338 <__libc_init_array+0xc>
 800035a:	f855 3b04 	ldr.w	r3, [r5], #4
 800035e:	4798      	blx	r3
 8000360:	3601      	adds	r6, #1
 8000362:	e7f2      	b.n	800034a <__libc_init_array+0x1e>
 8000364:	0800038c 	.word	0x0800038c
 8000368:	0800038c 	.word	0x0800038c
 800036c:	0800038c 	.word	0x0800038c
 8000370:	08000390 	.word	0x08000390

08000374 <_init>:
 8000374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000376:	bf00      	nop
 8000378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037a:	bc08      	pop	{r3}
 800037c:	469e      	mov	lr, r3
 800037e:	4770      	bx	lr

08000380 <_fini>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr
