
PIDFeedbackControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001560  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800166c  0800166c  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800166c  0800166c  00003004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800166c  0800166c  00003004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800166c  0800166c  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800166c  0800166c  0000266c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001670  08001670  00002670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001674  00003000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000004  08001678  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  08001678  00003050  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001198  00000000  00000000  0000302d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000635  00000000  00000000  000041c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  00004800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000199  00000000  00000000  00004a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e54  00000000  00000000  00004bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002586  00000000  00000000  0001aa25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ee64  00000000  00000000  0001cfab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009be0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a7c  00000000  00000000  0009be54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0009c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08001654 	.word	0x08001654

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08001654 	.word	0x08001654

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__gedf2>:
 80004c4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80004c8:	e006      	b.n	80004d8 <__cmpdf2+0x4>
 80004ca:	bf00      	nop

080004cc <__ledf2>:
 80004cc:	f04f 0c01 	mov.w	ip, #1
 80004d0:	e002      	b.n	80004d8 <__cmpdf2+0x4>
 80004d2:	bf00      	nop

080004d4 <__cmpdf2>:
 80004d4:	f04f 0c01 	mov.w	ip, #1
 80004d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004e8:	bf18      	it	ne
 80004ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004ee:	d01b      	beq.n	8000528 <__cmpdf2+0x54>
 80004f0:	b001      	add	sp, #4
 80004f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004f6:	bf0c      	ite	eq
 80004f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80004fc:	ea91 0f03 	teqne	r1, r3
 8000500:	bf02      	ittt	eq
 8000502:	ea90 0f02 	teqeq	r0, r2
 8000506:	2000      	moveq	r0, #0
 8000508:	4770      	bxeq	lr
 800050a:	f110 0f00 	cmn.w	r0, #0
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf58      	it	pl
 8000514:	4299      	cmppl	r1, r3
 8000516:	bf08      	it	eq
 8000518:	4290      	cmpeq	r0, r2
 800051a:	bf2c      	ite	cs
 800051c:	17d8      	asrcs	r0, r3, #31
 800051e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000522:	f040 0001 	orr.w	r0, r0, #1
 8000526:	4770      	bx	lr
 8000528:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800052c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000530:	d102      	bne.n	8000538 <__cmpdf2+0x64>
 8000532:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000536:	d107      	bne.n	8000548 <__cmpdf2+0x74>
 8000538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800053c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000540:	d1d6      	bne.n	80004f0 <__cmpdf2+0x1c>
 8000542:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000546:	d0d3      	beq.n	80004f0 <__cmpdf2+0x1c>
 8000548:	f85d 0b04 	ldr.w	r0, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <__aeabi_cdrcmple>:
 8000550:	4684      	mov	ip, r0
 8000552:	4610      	mov	r0, r2
 8000554:	4662      	mov	r2, ip
 8000556:	468c      	mov	ip, r1
 8000558:	4619      	mov	r1, r3
 800055a:	4663      	mov	r3, ip
 800055c:	e000      	b.n	8000560 <__aeabi_cdcmpeq>
 800055e:	bf00      	nop

08000560 <__aeabi_cdcmpeq>:
 8000560:	b501      	push	{r0, lr}
 8000562:	f7ff ffb7 	bl	80004d4 <__cmpdf2>
 8000566:	2800      	cmp	r0, #0
 8000568:	bf48      	it	mi
 800056a:	f110 0f00 	cmnmi.w	r0, #0
 800056e:	bd01      	pop	{r0, pc}

08000570 <__aeabi_dcmpeq>:
 8000570:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000574:	f7ff fff4 	bl	8000560 <__aeabi_cdcmpeq>
 8000578:	bf0c      	ite	eq
 800057a:	2001      	moveq	r0, #1
 800057c:	2000      	movne	r0, #0
 800057e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000582:	bf00      	nop

08000584 <__aeabi_dcmplt>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff ffea 	bl	8000560 <__aeabi_cdcmpeq>
 800058c:	bf34      	ite	cc
 800058e:	2001      	movcc	r0, #1
 8000590:	2000      	movcs	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmple>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffe0 	bl	8000560 <__aeabi_cdcmpeq>
 80005a0:	bf94      	ite	ls
 80005a2:	2001      	movls	r0, #1
 80005a4:	2000      	movhi	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmpge>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffce 	bl	8000550 <__aeabi_cdrcmple>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpgt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffc4 	bl	8000550 <__aeabi_cdrcmple>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_d2f>:
 80005d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80005dc:	bf24      	itt	cs
 80005de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80005e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80005e6:	d90d      	bls.n	8000604 <__aeabi_d2f+0x30>
 80005e8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005f4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80005f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005fc:	bf08      	it	eq
 80005fe:	f020 0001 	biceq.w	r0, r0, #1
 8000602:	4770      	bx	lr
 8000604:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000608:	d121      	bne.n	800064e <__aeabi_d2f+0x7a>
 800060a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800060e:	bfbc      	itt	lt
 8000610:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000614:	4770      	bxlt	lr
 8000616:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800061a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800061e:	f1c2 0218 	rsb	r2, r2, #24
 8000622:	f1c2 0c20 	rsb	ip, r2, #32
 8000626:	fa10 f30c 	lsls.w	r3, r0, ip
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	bf18      	it	ne
 8000630:	f040 0001 	orrne.w	r0, r0, #1
 8000634:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000638:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800063c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000640:	ea40 000c 	orr.w	r0, r0, ip
 8000644:	fa23 f302 	lsr.w	r3, r3, r2
 8000648:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800064c:	e7cc      	b.n	80005e8 <__aeabi_d2f+0x14>
 800064e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000652:	d107      	bne.n	8000664 <__aeabi_d2f+0x90>
 8000654:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000658:	bf1e      	ittt	ne
 800065a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800065e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000662:	4770      	bxne	lr
 8000664:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000668:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800066c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop

08000674 <__aeabi_frsub>:
 8000674:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000678:	e002      	b.n	8000680 <__addsf3>
 800067a:	bf00      	nop

0800067c <__aeabi_fsub>:
 800067c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000680 <__addsf3>:
 8000680:	0042      	lsls	r2, r0, #1
 8000682:	bf1f      	itttt	ne
 8000684:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000688:	ea92 0f03 	teqne	r2, r3
 800068c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000690:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000694:	d06a      	beq.n	800076c <__addsf3+0xec>
 8000696:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800069a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800069e:	bfc1      	itttt	gt
 80006a0:	18d2      	addgt	r2, r2, r3
 80006a2:	4041      	eorgt	r1, r0
 80006a4:	4048      	eorgt	r0, r1
 80006a6:	4041      	eorgt	r1, r0
 80006a8:	bfb8      	it	lt
 80006aa:	425b      	neglt	r3, r3
 80006ac:	2b19      	cmp	r3, #25
 80006ae:	bf88      	it	hi
 80006b0:	4770      	bxhi	lr
 80006b2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006ba:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006be:	bf18      	it	ne
 80006c0:	4240      	negne	r0, r0
 80006c2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006c6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006ca:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006ce:	bf18      	it	ne
 80006d0:	4249      	negne	r1, r1
 80006d2:	ea92 0f03 	teq	r2, r3
 80006d6:	d03f      	beq.n	8000758 <__addsf3+0xd8>
 80006d8:	f1a2 0201 	sub.w	r2, r2, #1
 80006dc:	fa41 fc03 	asr.w	ip, r1, r3
 80006e0:	eb10 000c 	adds.w	r0, r0, ip
 80006e4:	f1c3 0320 	rsb	r3, r3, #32
 80006e8:	fa01 f103 	lsl.w	r1, r1, r3
 80006ec:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006f0:	d502      	bpl.n	80006f8 <__addsf3+0x78>
 80006f2:	4249      	negs	r1, r1
 80006f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006f8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006fc:	d313      	bcc.n	8000726 <__addsf3+0xa6>
 80006fe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000702:	d306      	bcc.n	8000712 <__addsf3+0x92>
 8000704:	0840      	lsrs	r0, r0, #1
 8000706:	ea4f 0131 	mov.w	r1, r1, rrx
 800070a:	f102 0201 	add.w	r2, r2, #1
 800070e:	2afe      	cmp	r2, #254	@ 0xfe
 8000710:	d251      	bcs.n	80007b6 <__addsf3+0x136>
 8000712:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000716:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800071a:	bf08      	it	eq
 800071c:	f020 0001 	biceq.w	r0, r0, #1
 8000720:	ea40 0003 	orr.w	r0, r0, r3
 8000724:	4770      	bx	lr
 8000726:	0049      	lsls	r1, r1, #1
 8000728:	eb40 0000 	adc.w	r0, r0, r0
 800072c:	3a01      	subs	r2, #1
 800072e:	bf28      	it	cs
 8000730:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000734:	d2ed      	bcs.n	8000712 <__addsf3+0x92>
 8000736:	fab0 fc80 	clz	ip, r0
 800073a:	f1ac 0c08 	sub.w	ip, ip, #8
 800073e:	ebb2 020c 	subs.w	r2, r2, ip
 8000742:	fa00 f00c 	lsl.w	r0, r0, ip
 8000746:	bfaa      	itet	ge
 8000748:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800074c:	4252      	neglt	r2, r2
 800074e:	4318      	orrge	r0, r3
 8000750:	bfbc      	itt	lt
 8000752:	40d0      	lsrlt	r0, r2
 8000754:	4318      	orrlt	r0, r3
 8000756:	4770      	bx	lr
 8000758:	f092 0f00 	teq	r2, #0
 800075c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000760:	bf06      	itte	eq
 8000762:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000766:	3201      	addeq	r2, #1
 8000768:	3b01      	subne	r3, #1
 800076a:	e7b5      	b.n	80006d8 <__addsf3+0x58>
 800076c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000770:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000774:	bf18      	it	ne
 8000776:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077a:	d021      	beq.n	80007c0 <__addsf3+0x140>
 800077c:	ea92 0f03 	teq	r2, r3
 8000780:	d004      	beq.n	800078c <__addsf3+0x10c>
 8000782:	f092 0f00 	teq	r2, #0
 8000786:	bf08      	it	eq
 8000788:	4608      	moveq	r0, r1
 800078a:	4770      	bx	lr
 800078c:	ea90 0f01 	teq	r0, r1
 8000790:	bf1c      	itt	ne
 8000792:	2000      	movne	r0, #0
 8000794:	4770      	bxne	lr
 8000796:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800079a:	d104      	bne.n	80007a6 <__addsf3+0x126>
 800079c:	0040      	lsls	r0, r0, #1
 800079e:	bf28      	it	cs
 80007a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80007a4:	4770      	bx	lr
 80007a6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80007aa:	bf3c      	itt	cc
 80007ac:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80007b0:	4770      	bxcc	lr
 80007b2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007b6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007ba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007be:	4770      	bx	lr
 80007c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007c4:	bf16      	itet	ne
 80007c6:	4608      	movne	r0, r1
 80007c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007cc:	4601      	movne	r1, r0
 80007ce:	0242      	lsls	r2, r0, #9
 80007d0:	bf06      	itte	eq
 80007d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007d6:	ea90 0f01 	teqeq	r0, r1
 80007da:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007de:	4770      	bx	lr

080007e0 <__aeabi_ui2f>:
 80007e0:	f04f 0300 	mov.w	r3, #0
 80007e4:	e004      	b.n	80007f0 <__aeabi_i2f+0x8>
 80007e6:	bf00      	nop

080007e8 <__aeabi_i2f>:
 80007e8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007ec:	bf48      	it	mi
 80007ee:	4240      	negmi	r0, r0
 80007f0:	ea5f 0c00 	movs.w	ip, r0
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007fc:	4601      	mov	r1, r0
 80007fe:	f04f 0000 	mov.w	r0, #0
 8000802:	e01c      	b.n	800083e <__aeabi_l2f+0x2a>

08000804 <__aeabi_ul2f>:
 8000804:	ea50 0201 	orrs.w	r2, r0, r1
 8000808:	bf08      	it	eq
 800080a:	4770      	bxeq	lr
 800080c:	f04f 0300 	mov.w	r3, #0
 8000810:	e00a      	b.n	8000828 <__aeabi_l2f+0x14>
 8000812:	bf00      	nop

08000814 <__aeabi_l2f>:
 8000814:	ea50 0201 	orrs.w	r2, r0, r1
 8000818:	bf08      	it	eq
 800081a:	4770      	bxeq	lr
 800081c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000820:	d502      	bpl.n	8000828 <__aeabi_l2f+0x14>
 8000822:	4240      	negs	r0, r0
 8000824:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000828:	ea5f 0c01 	movs.w	ip, r1
 800082c:	bf02      	ittt	eq
 800082e:	4684      	moveq	ip, r0
 8000830:	4601      	moveq	r1, r0
 8000832:	2000      	moveq	r0, #0
 8000834:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000838:	bf08      	it	eq
 800083a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800083e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000842:	fabc f28c 	clz	r2, ip
 8000846:	3a08      	subs	r2, #8
 8000848:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800084c:	db10      	blt.n	8000870 <__aeabi_l2f+0x5c>
 800084e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000852:	4463      	add	r3, ip
 8000854:	fa00 fc02 	lsl.w	ip, r0, r2
 8000858:	f1c2 0220 	rsb	r2, r2, #32
 800085c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000860:	fa20 f202 	lsr.w	r2, r0, r2
 8000864:	eb43 0002 	adc.w	r0, r3, r2
 8000868:	bf08      	it	eq
 800086a:	f020 0001 	biceq.w	r0, r0, #1
 800086e:	4770      	bx	lr
 8000870:	f102 0220 	add.w	r2, r2, #32
 8000874:	fa01 fc02 	lsl.w	ip, r1, r2
 8000878:	f1c2 0220 	rsb	r2, r2, #32
 800087c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000880:	fa21 f202 	lsr.w	r2, r1, r2
 8000884:	eb43 0002 	adc.w	r0, r3, r2
 8000888:	bf08      	it	eq
 800088a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800088e:	4770      	bx	lr

08000890 <__aeabi_fmul>:
 8000890:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000894:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000898:	bf1e      	ittt	ne
 800089a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800089e:	ea92 0f0c 	teqne	r2, ip
 80008a2:	ea93 0f0c 	teqne	r3, ip
 80008a6:	d06f      	beq.n	8000988 <__aeabi_fmul+0xf8>
 80008a8:	441a      	add	r2, r3
 80008aa:	ea80 0c01 	eor.w	ip, r0, r1
 80008ae:	0240      	lsls	r0, r0, #9
 80008b0:	bf18      	it	ne
 80008b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008b6:	d01e      	beq.n	80008f6 <__aeabi_fmul+0x66>
 80008b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80008bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008c4:	fba0 3101 	umull	r3, r1, r0, r1
 80008c8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008cc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80008d0:	bf3e      	ittt	cc
 80008d2:	0049      	lslcc	r1, r1, #1
 80008d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008d8:	005b      	lslcc	r3, r3, #1
 80008da:	ea40 0001 	orr.w	r0, r0, r1
 80008de:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80008e2:	2afd      	cmp	r2, #253	@ 0xfd
 80008e4:	d81d      	bhi.n	8000922 <__aeabi_fmul+0x92>
 80008e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80008ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008ee:	bf08      	it	eq
 80008f0:	f020 0001 	biceq.w	r0, r0, #1
 80008f4:	4770      	bx	lr
 80008f6:	f090 0f00 	teq	r0, #0
 80008fa:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008fe:	bf08      	it	eq
 8000900:	0249      	lsleq	r1, r1, #9
 8000902:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000906:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800090a:	3a7f      	subs	r2, #127	@ 0x7f
 800090c:	bfc2      	ittt	gt
 800090e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000912:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000916:	4770      	bxgt	lr
 8000918:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800091c:	f04f 0300 	mov.w	r3, #0
 8000920:	3a01      	subs	r2, #1
 8000922:	dc5d      	bgt.n	80009e0 <__aeabi_fmul+0x150>
 8000924:	f112 0f19 	cmn.w	r2, #25
 8000928:	bfdc      	itt	le
 800092a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800092e:	4770      	bxle	lr
 8000930:	f1c2 0200 	rsb	r2, r2, #0
 8000934:	0041      	lsls	r1, r0, #1
 8000936:	fa21 f102 	lsr.w	r1, r1, r2
 800093a:	f1c2 0220 	rsb	r2, r2, #32
 800093e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000942:	ea5f 0031 	movs.w	r0, r1, rrx
 8000946:	f140 0000 	adc.w	r0, r0, #0
 800094a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800094e:	bf08      	it	eq
 8000950:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000954:	4770      	bx	lr
 8000956:	f092 0f00 	teq	r2, #0
 800095a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800095e:	bf02      	ittt	eq
 8000960:	0040      	lsleq	r0, r0, #1
 8000962:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000966:	3a01      	subeq	r2, #1
 8000968:	d0f9      	beq.n	800095e <__aeabi_fmul+0xce>
 800096a:	ea40 000c 	orr.w	r0, r0, ip
 800096e:	f093 0f00 	teq	r3, #0
 8000972:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000976:	bf02      	ittt	eq
 8000978:	0049      	lsleq	r1, r1, #1
 800097a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800097e:	3b01      	subeq	r3, #1
 8000980:	d0f9      	beq.n	8000976 <__aeabi_fmul+0xe6>
 8000982:	ea41 010c 	orr.w	r1, r1, ip
 8000986:	e78f      	b.n	80008a8 <__aeabi_fmul+0x18>
 8000988:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800098c:	ea92 0f0c 	teq	r2, ip
 8000990:	bf18      	it	ne
 8000992:	ea93 0f0c 	teqne	r3, ip
 8000996:	d00a      	beq.n	80009ae <__aeabi_fmul+0x11e>
 8000998:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800099c:	bf18      	it	ne
 800099e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80009a2:	d1d8      	bne.n	8000956 <__aeabi_fmul+0xc6>
 80009a4:	ea80 0001 	eor.w	r0, r0, r1
 80009a8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009ac:	4770      	bx	lr
 80009ae:	f090 0f00 	teq	r0, #0
 80009b2:	bf17      	itett	ne
 80009b4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80009b8:	4608      	moveq	r0, r1
 80009ba:	f091 0f00 	teqne	r1, #0
 80009be:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80009c2:	d014      	beq.n	80009ee <__aeabi_fmul+0x15e>
 80009c4:	ea92 0f0c 	teq	r2, ip
 80009c8:	d101      	bne.n	80009ce <__aeabi_fmul+0x13e>
 80009ca:	0242      	lsls	r2, r0, #9
 80009cc:	d10f      	bne.n	80009ee <__aeabi_fmul+0x15e>
 80009ce:	ea93 0f0c 	teq	r3, ip
 80009d2:	d103      	bne.n	80009dc <__aeabi_fmul+0x14c>
 80009d4:	024b      	lsls	r3, r1, #9
 80009d6:	bf18      	it	ne
 80009d8:	4608      	movne	r0, r1
 80009da:	d108      	bne.n	80009ee <__aeabi_fmul+0x15e>
 80009dc:	ea80 0001 	eor.w	r0, r0, r1
 80009e0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009e4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009ec:	4770      	bx	lr
 80009ee:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009f2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80009f6:	4770      	bx	lr

080009f8 <__aeabi_fdiv>:
 80009f8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a00:	bf1e      	ittt	ne
 8000a02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a06:	ea92 0f0c 	teqne	r2, ip
 8000a0a:	ea93 0f0c 	teqne	r3, ip
 8000a0e:	d069      	beq.n	8000ae4 <__aeabi_fdiv+0xec>
 8000a10:	eba2 0203 	sub.w	r2, r2, r3
 8000a14:	ea80 0c01 	eor.w	ip, r0, r1
 8000a18:	0249      	lsls	r1, r1, #9
 8000a1a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a1e:	d037      	beq.n	8000a90 <__aeabi_fdiv+0x98>
 8000a20:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a24:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a28:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a2c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a30:	428b      	cmp	r3, r1
 8000a32:	bf38      	it	cc
 8000a34:	005b      	lslcc	r3, r3, #1
 8000a36:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000a3a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000a3e:	428b      	cmp	r3, r1
 8000a40:	bf24      	itt	cs
 8000a42:	1a5b      	subcs	r3, r3, r1
 8000a44:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a48:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a4c:	bf24      	itt	cs
 8000a4e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a52:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a56:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a5a:	bf24      	itt	cs
 8000a5c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a64:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a68:	bf24      	itt	cs
 8000a6a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a6e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a72:	011b      	lsls	r3, r3, #4
 8000a74:	bf18      	it	ne
 8000a76:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a7a:	d1e0      	bne.n	8000a3e <__aeabi_fdiv+0x46>
 8000a7c:	2afd      	cmp	r2, #253	@ 0xfd
 8000a7e:	f63f af50 	bhi.w	8000922 <__aeabi_fmul+0x92>
 8000a82:	428b      	cmp	r3, r1
 8000a84:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a88:	bf08      	it	eq
 8000a8a:	f020 0001 	biceq.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a94:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a98:	327f      	adds	r2, #127	@ 0x7f
 8000a9a:	bfc2      	ittt	gt
 8000a9c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000aa0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000aa4:	4770      	bxgt	lr
 8000aa6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aaa:	f04f 0300 	mov.w	r3, #0
 8000aae:	3a01      	subs	r2, #1
 8000ab0:	e737      	b.n	8000922 <__aeabi_fmul+0x92>
 8000ab2:	f092 0f00 	teq	r2, #0
 8000ab6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000aba:	bf02      	ittt	eq
 8000abc:	0040      	lsleq	r0, r0, #1
 8000abe:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ac2:	3a01      	subeq	r2, #1
 8000ac4:	d0f9      	beq.n	8000aba <__aeabi_fdiv+0xc2>
 8000ac6:	ea40 000c 	orr.w	r0, r0, ip
 8000aca:	f093 0f00 	teq	r3, #0
 8000ace:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad2:	bf02      	ittt	eq
 8000ad4:	0049      	lsleq	r1, r1, #1
 8000ad6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ada:	3b01      	subeq	r3, #1
 8000adc:	d0f9      	beq.n	8000ad2 <__aeabi_fdiv+0xda>
 8000ade:	ea41 010c 	orr.w	r1, r1, ip
 8000ae2:	e795      	b.n	8000a10 <__aeabi_fdiv+0x18>
 8000ae4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ae8:	ea92 0f0c 	teq	r2, ip
 8000aec:	d108      	bne.n	8000b00 <__aeabi_fdiv+0x108>
 8000aee:	0242      	lsls	r2, r0, #9
 8000af0:	f47f af7d 	bne.w	80009ee <__aeabi_fmul+0x15e>
 8000af4:	ea93 0f0c 	teq	r3, ip
 8000af8:	f47f af70 	bne.w	80009dc <__aeabi_fmul+0x14c>
 8000afc:	4608      	mov	r0, r1
 8000afe:	e776      	b.n	80009ee <__aeabi_fmul+0x15e>
 8000b00:	ea93 0f0c 	teq	r3, ip
 8000b04:	d104      	bne.n	8000b10 <__aeabi_fdiv+0x118>
 8000b06:	024b      	lsls	r3, r1, #9
 8000b08:	f43f af4c 	beq.w	80009a4 <__aeabi_fmul+0x114>
 8000b0c:	4608      	mov	r0, r1
 8000b0e:	e76e      	b.n	80009ee <__aeabi_fmul+0x15e>
 8000b10:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b14:	bf18      	it	ne
 8000b16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b1a:	d1ca      	bne.n	8000ab2 <__aeabi_fdiv+0xba>
 8000b1c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000b20:	f47f af5c 	bne.w	80009dc <__aeabi_fmul+0x14c>
 8000b24:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000b28:	f47f af3c 	bne.w	80009a4 <__aeabi_fmul+0x114>
 8000b2c:	e75f      	b.n	80009ee <__aeabi_fmul+0x15e>
 8000b2e:	bf00      	nop

08000b30 <__gesf2>:
 8000b30:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000b34:	e006      	b.n	8000b44 <__cmpsf2+0x4>
 8000b36:	bf00      	nop

08000b38 <__lesf2>:
 8000b38:	f04f 0c01 	mov.w	ip, #1
 8000b3c:	e002      	b.n	8000b44 <__cmpsf2+0x4>
 8000b3e:	bf00      	nop

08000b40 <__cmpsf2>:
 8000b40:	f04f 0c01 	mov.w	ip, #1
 8000b44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b4c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b54:	bf18      	it	ne
 8000b56:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5a:	d011      	beq.n	8000b80 <__cmpsf2+0x40>
 8000b5c:	b001      	add	sp, #4
 8000b5e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b62:	bf18      	it	ne
 8000b64:	ea90 0f01 	teqne	r0, r1
 8000b68:	bf58      	it	pl
 8000b6a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b6e:	bf88      	it	hi
 8000b70:	17c8      	asrhi	r0, r1, #31
 8000b72:	bf38      	it	cc
 8000b74:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b78:	bf18      	it	ne
 8000b7a:	f040 0001 	orrne.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b84:	d102      	bne.n	8000b8c <__cmpsf2+0x4c>
 8000b86:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b8a:	d105      	bne.n	8000b98 <__cmpsf2+0x58>
 8000b8c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b90:	d1e4      	bne.n	8000b5c <__cmpsf2+0x1c>
 8000b92:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b96:	d0e1      	beq.n	8000b5c <__cmpsf2+0x1c>
 8000b98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_cfrcmple>:
 8000ba0:	4684      	mov	ip, r0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	4661      	mov	r1, ip
 8000ba6:	e7ff      	b.n	8000ba8 <__aeabi_cfcmpeq>

08000ba8 <__aeabi_cfcmpeq>:
 8000ba8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000baa:	f7ff ffc9 	bl	8000b40 <__cmpsf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bb8 <__aeabi_fcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cfcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_fcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cfcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_fcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cfcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_fcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffd2 	bl	8000ba0 <__aeabi_cfrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_fcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc8 	bl	8000ba0 <__aeabi_cfrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_f2iz>:
 8000c1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c20:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000c24:	d30f      	bcc.n	8000c46 <__aeabi_f2iz+0x2a>
 8000c26:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000c2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c2e:	d90d      	bls.n	8000c4c <__aeabi_f2iz+0x30>
 8000c30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c38:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c40:	bf18      	it	ne
 8000c42:	4240      	negne	r0, r0
 8000c44:	4770      	bx	lr
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	4770      	bx	lr
 8000c4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c50:	d101      	bne.n	8000c56 <__aeabi_f2iz+0x3a>
 8000c52:	0242      	lsls	r2, r0, #9
 8000c54:	d105      	bne.n	8000c62 <__aeabi_f2iz+0x46>
 8000c56:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000c5a:	bf08      	it	eq
 8000c5c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c60:	4770      	bx	lr
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_f2uiz>:
 8000c68:	0042      	lsls	r2, r0, #1
 8000c6a:	d20e      	bcs.n	8000c8a <__aeabi_f2uiz+0x22>
 8000c6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000c70:	d30b      	bcc.n	8000c8a <__aeabi_f2uiz+0x22>
 8000c72:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000c76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c7a:	d409      	bmi.n	8000c90 <__aeabi_f2uiz+0x28>
 8000c7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c84:	fa23 f002 	lsr.w	r0, r3, r2
 8000c88:	4770      	bx	lr
 8000c8a:	f04f 0000 	mov.w	r0, #0
 8000c8e:	4770      	bx	lr
 8000c90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c94:	d101      	bne.n	8000c9a <__aeabi_f2uiz+0x32>
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	d102      	bne.n	8000ca0 <__aeabi_f2uiz+0x38>
 8000c9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <main>:





int main(void){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	enableClk();
 8000cac:	f000 f870 	bl	8000d90 <enableClk>
	configureIO();
 8000cb0:	f000 f854 	bl	8000d5c <configureIO>


	initADC1();
 8000cb4:	f000 f892 	bl	8000ddc <initADC1>
	initADC2();
 8000cb8:	f000 f8e8 	bl	8000e8c <initADC2>
	initPWM();
 8000cbc:	f000 fa44 	bl	8001148 <initPWM>

	//ARR -> 1000 - 1

	Kp = 5.0f;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <main+0x94>)
 8000cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8000d40 <main+0x98>)
 8000cc4:	601a      	str	r2, [r3, #0]
	Ki = 0.5f;
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d44 <main+0x9c>)
 8000cc8:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000ccc:	601a      	str	r2, [r3, #0]
	Kd = 0.8f;
 8000cce:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <main+0xa0>)
 8000cd0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d4c <main+0xa4>)
 8000cd2:	601a      	str	r2, [r3, #0]

while (1) {



	switch (FT){
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d50 <main+0xa8>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d00a      	beq.n	8000cf2 <main+0x4a>
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d000      	beq.n	8000ce2 <main+0x3a>

		 	 case 0 : break;

		 	 case 1 : freeMotor(); FT =0 ; CAL(); break;

		 	 default : break;
 8000ce0:	e008      	b.n	8000cf4 <main+0x4c>
		 	 case 1 : freeMotor(); FT =0 ; CAL(); break;
 8000ce2:	f000 fa23 	bl	800112c <freeMotor>
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <main+0xa8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
 8000cec:	f000 faac 	bl	8001248 <CAL>
 8000cf0:	e000      	b.n	8000cf4 <main+0x4c>
		 	 case 0 : break;
 8000cf2:	bf00      	nop
		 }

	 ref = getADCVal(0);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f000 f9ab 	bl	8001050 <getADCVal>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <main+0xac>)
 8000d00:	601a      	str	r2, [r3, #0]

	 curr = getcurrentPosition();
 8000d02:	f000 fa99 	bl	8001238 <getcurrentPosition>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a13      	ldr	r2, [pc, #76]	@ (8000d58 <main+0xb0>)
 8000d0a:	6013      	str	r3, [r2, #0]

	 if ((ref >= LOWER_LIMIT && ref <= UPPER_LIMIT) && (curr != ref))
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <main+0xac>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f240 4219 	movw	r2, #1049	@ 0x419
 8000d14:	4293      	cmp	r3, r2
 8000d16:	dd0d      	ble.n	8000d34 <main+0x8c>
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <main+0xac>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f640 5248 	movw	r2, #3400	@ 0xd48
 8000d20:	4293      	cmp	r3, r2
 8000d22:	dc07      	bgt.n	8000d34 <main+0x8c>
 8000d24:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <main+0xb0>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <main+0xac>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d001      	beq.n	8000d34 <main+0x8c>
		 PIDController();
 8000d30:	f000 faaa 	bl	8001288 <PIDController>

	 delay(50);
 8000d34:	2032      	movs	r0, #50	@ 0x32
 8000d36:	f000 f95d 	bl	8000ff4 <delay>
	switch (FT){
 8000d3a:	e7cb      	b.n	8000cd4 <main+0x2c>
 8000d3c:	20000020 	.word	0x20000020
 8000d40:	40a00000 	.word	0x40a00000
 8000d44:	20000024 	.word	0x20000024
 8000d48:	20000028 	.word	0x20000028
 8000d4c:	3f4ccccd 	.word	0x3f4ccccd
 8000d50:	20000000 	.word	0x20000000
 8000d54:	2000003c 	.word	0x2000003c
 8000d58:	20000044 	.word	0x20000044

08000d5c <configureIO>:
}
}



void configureIO(){
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
	 * HBridge ENB => B9
	 * CAL Button => B14
	 *
	 * */

	GPIOA -> CRL = 0x244440A0;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <configureIO+0x20>)
 8000d62:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <configureIO+0x24>)
 8000d64:	601a      	str	r2, [r3, #0]
	GPIOB -> CRL = 0x24444444;
 8000d66:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <configureIO+0x28>)
 8000d68:	4a07      	ldr	r2, [pc, #28]	@ (8000d88 <configureIO+0x2c>)
 8000d6a:	601a      	str	r2, [r3, #0]
	GPIOB -> CRH = 0x48244222;
 8000d6c:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <configureIO+0x28>)
 8000d6e:	4a07      	ldr	r2, [pc, #28]	@ (8000d8c <configureIO+0x30>)
 8000d70:	605a      	str	r2, [r3, #4]


}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40010800 	.word	0x40010800
 8000d80:	244440a0 	.word	0x244440a0
 8000d84:	40010c00 	.word	0x40010c00
 8000d88:	24444444 	.word	0x24444444
 8000d8c:	48244222 	.word	0x48244222

08000d90 <enableClk>:

void enableClk(){
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000d94:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <enableClk+0x48>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd8 <enableClk+0x48>)
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	6193      	str	r3, [r2, #24]
	RCC -> APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000da0:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <enableClk+0x48>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd8 <enableClk+0x48>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6193      	str	r3, [r2, #24]
	RCC -> APB1ENR |= 0b11; //enable TIM2 & TIM3
 8000dac:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <enableClk+0x48>)
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	4a09      	ldr	r2, [pc, #36]	@ (8000dd8 <enableClk+0x48>)
 8000db2:	f043 0303 	orr.w	r3, r3, #3
 8000db6:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000db8:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <enableClk+0x48>)
 8000dba:	69db      	ldr	r3, [r3, #28]
 8000dbc:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <enableClk+0x48>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	61d3      	str	r3, [r2, #28]
	RCC -> APB2ENR |= (1 << 9) | (1 << 10); // enable CLK for ADC1
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <enableClk+0x48>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a03      	ldr	r2, [pc, #12]	@ (8000dd8 <enableClk+0x48>)
 8000dca:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8000dce:	6193      	str	r3, [r2, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	40021000 	.word	0x40021000

08000ddc <initADC1>:


void initADC1(){
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0

		ADC1->SQR1 = 0x00000000;  // Reset SQR1 (sequence length = 1 by default)
 8000de2:	4b29      	ldr	r3, [pc, #164]	@ (8000e88 <initADC1+0xac>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	62da      	str	r2, [r3, #44]	@ 0x2c
		ADC1->SQR3 = 0; // Channel 0 first in the sequence
 8000de8:	4b27      	ldr	r3, [pc, #156]	@ (8000e88 <initADC1+0xac>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	635a      	str	r2, [r3, #52]	@ 0x34
		ADC1 -> SMPR2 &= 0; // reseting the sample time
 8000dee:	4b26      	ldr	r3, [pc, #152]	@ (8000e88 <initADC1+0xac>)
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	4b25      	ldr	r3, [pc, #148]	@ (8000e88 <initADC1+0xac>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
		ADC1->SMPR2 |= (0b010 << 0); // Channel 0 7.5 cycles
 8000df8:	4b23      	ldr	r3, [pc, #140]	@ (8000e88 <initADC1+0xac>)
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	4a22      	ldr	r2, [pc, #136]	@ (8000e88 <initADC1+0xac>)
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	6113      	str	r3, [r2, #16]

		ADC1->CR2 |= ADC_CR2_ADON; // ADC on
 8000e04:	4b20      	ldr	r3, [pc, #128]	@ (8000e88 <initADC1+0xac>)
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	4a1f      	ldr	r2, [pc, #124]	@ (8000e88 <initADC1+0xac>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6093      	str	r3, [r2, #8]
		for (volatile int i = 0; i < 10000; i++);  // Short delay
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	e002      	b.n	8000e1c <initADC1+0x40>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e22:	4293      	cmp	r3, r2
 8000e24:	ddf7      	ble.n	8000e16 <initADC1+0x3a>

		ADC1->CR2 |= ADC_CR2_CAL;          // Start calibration
 8000e26:	4b18      	ldr	r3, [pc, #96]	@ (8000e88 <initADC1+0xac>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	4a17      	ldr	r2, [pc, #92]	@ (8000e88 <initADC1+0xac>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	6093      	str	r3, [r2, #8]
		while (ADC1->CR2 & ADC_CR2_CAL);   // Wait for calibration to finish
 8000e32:	bf00      	nop
 8000e34:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <initADC1+0xac>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1f9      	bne.n	8000e34 <initADC1+0x58>

		ADC1->CR2 |= ADC_CR2_EXTTRIG;  // Enable external trigger
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <initADC1+0xac>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	4a10      	ldr	r2, [pc, #64]	@ (8000e88 <initADC1+0xac>)
 8000e46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e4a:	6093      	str	r3, [r2, #8]

		ADC1->CR2 &= ~ADC_CR2_EXTSEL;       // Clear EXTSEL bits
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <initADC1+0xac>)
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	4a0d      	ldr	r2, [pc, #52]	@ (8000e88 <initADC1+0xac>)
 8000e52:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8000e56:	6093      	str	r3, [r2, #8]
		ADC1->CR2 |= (0b111 << 17);         // Set EXTSEL = 111 for SWSTART
 8000e58:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <initADC1+0xac>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <initADC1+0xac>)
 8000e5e:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 8000e62:	6093      	str	r3, [r2, #8]

		ADC1->CR2 &= ~ADC_CR2_CONT;  // Clear CONT bit for single conversion mode
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <initADC1+0xac>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	4a07      	ldr	r2, [pc, #28]	@ (8000e88 <initADC1+0xac>)
 8000e6a:	f023 0302 	bic.w	r3, r3, #2
 8000e6e:	6093      	str	r3, [r2, #8]

		ADC1->CR2 &= ~ADC_CR2_ALIGN;  // 0 = Right alignment (default)
 8000e70:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <initADC1+0xac>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <initADC1+0xac>)
 8000e76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000e7a:	6093      	str	r3, [r2, #8]

}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40012400 	.word	0x40012400

08000e8c <initADC2>:


void initADC2(){
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0

		ADC2->SQR1 = 0x00000000;  // Reset SQR1 (sequence length = 1 by default)
 8000e92:	4b29      	ldr	r3, [pc, #164]	@ (8000f38 <initADC2+0xac>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	62da      	str	r2, [r3, #44]	@ 0x2c
		ADC2->SQR3 = 2; // Channel 2
 8000e98:	4b27      	ldr	r3, [pc, #156]	@ (8000f38 <initADC2+0xac>)
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	635a      	str	r2, [r3, #52]	@ 0x34
		ADC2 -> SMPR2 &= 0; // reseting the sample time
 8000e9e:	4b26      	ldr	r3, [pc, #152]	@ (8000f38 <initADC2+0xac>)
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	4b25      	ldr	r3, [pc, #148]	@ (8000f38 <initADC2+0xac>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
		ADC2->SMPR2 |= (0b010 << 6); // Channel 2 7.5 cycles
 8000ea8:	4b23      	ldr	r3, [pc, #140]	@ (8000f38 <initADC2+0xac>)
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	4a22      	ldr	r2, [pc, #136]	@ (8000f38 <initADC2+0xac>)
 8000eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eb2:	6113      	str	r3, [r2, #16]

		ADC2->CR2 |= ADC_CR2_ADON; // ADC on
 8000eb4:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <initADC2+0xac>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f38 <initADC2+0xac>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6093      	str	r3, [r2, #8]
		for (volatile int i = 0; i < 10000; i++);  // Short delay
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	e002      	b.n	8000ecc <initADC2+0x40>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	ddf7      	ble.n	8000ec6 <initADC2+0x3a>

		ADC2->CR2 |= ADC_CR2_CAL;          // Start calibration
 8000ed6:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <initADC2+0xac>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	4a17      	ldr	r2, [pc, #92]	@ (8000f38 <initADC2+0xac>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6093      	str	r3, [r2, #8]
		while (ADC2->CR2 & ADC_CR2_CAL);   // Wait for calibration to finish
 8000ee2:	bf00      	nop
 8000ee4:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <initADC2+0xac>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1f9      	bne.n	8000ee4 <initADC2+0x58>

		ADC2->CR2 |= ADC_CR2_EXTTRIG;  // Enable external trigger
 8000ef0:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <initADC2+0xac>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	4a10      	ldr	r2, [pc, #64]	@ (8000f38 <initADC2+0xac>)
 8000ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000efa:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_EXTSEL;       // Clear EXTSEL bits
 8000efc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <initADC2+0xac>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	@ (8000f38 <initADC2+0xac>)
 8000f02:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8000f06:	6093      	str	r3, [r2, #8]
		ADC2->CR2 |= (0b111 << 17);         // Set EXTSEL = 111 for SWSTART
 8000f08:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <initADC2+0xac>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <initADC2+0xac>)
 8000f0e:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 8000f12:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_CONT;  // Clear CONT bit for single conversion mode
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <initADC2+0xac>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <initADC2+0xac>)
 8000f1a:	f023 0302 	bic.w	r3, r3, #2
 8000f1e:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_ALIGN;  // 0 = Right alignment (default)
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <initADC2+0xac>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <initADC2+0xac>)
 8000f26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000f2a:	6093      	str	r3, [r2, #8]

}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40012800 	.word	0x40012800

08000f3c <turnON>:

void turnON(uint8_t i){
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]


	switch (i){
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d014      	beq.n	8000f76 <turnON+0x3a>
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	dc19      	bgt.n	8000f84 <turnON+0x48>
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d002      	beq.n	8000f5a <turnON+0x1e>
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d007      	beq.n	8000f68 <turnON+0x2c>

		case 0: GPIOA ->ODR |= (1 << 7);  return; // Blue indicates reached goal
		case 1: GPIOB ->ODR |= (1 << 10); return; // Red indicates still processing
		case 2: GPIOB ->ODR |= (1 << 13); return; // Green indicates CAL for first time

		default: break;
 8000f58:	e014      	b.n	8000f84 <turnON+0x48>
		case 0: GPIOA ->ODR |= (1 << 7);  return; // Blue indicates reached goal
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <turnON+0x54>)
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f90 <turnON+0x54>)
 8000f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f64:	60d3      	str	r3, [r2, #12]
 8000f66:	e00e      	b.n	8000f86 <turnON+0x4a>
		case 1: GPIOB ->ODR |= (1 << 10); return; // Red indicates still processing
 8000f68:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <turnON+0x58>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	4a09      	ldr	r2, [pc, #36]	@ (8000f94 <turnON+0x58>)
 8000f6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f72:	60d3      	str	r3, [r2, #12]
 8000f74:	e007      	b.n	8000f86 <turnON+0x4a>
		case 2: GPIOB ->ODR |= (1 << 13); return; // Green indicates CAL for first time
 8000f76:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <turnON+0x58>)
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	4a06      	ldr	r2, [pc, #24]	@ (8000f94 <turnON+0x58>)
 8000f7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f80:	60d3      	str	r3, [r2, #12]
 8000f82:	e000      	b.n	8000f86 <turnON+0x4a>
		default: break;
 8000f84:	bf00      	nop
	}
}
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40010800 	.word	0x40010800
 8000f94:	40010c00 	.word	0x40010c00

08000f98 <turnOFF>:

void turnOFF(uint8_t i){
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]


	switch (i){
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d014      	beq.n	8000fd2 <turnOFF+0x3a>
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	dc19      	bgt.n	8000fe0 <turnOFF+0x48>
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <turnOFF+0x1e>
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d007      	beq.n	8000fc4 <turnOFF+0x2c>

		case 0: GPIOA ->ODR &= ~(1 << 7);  return;
		case 1: GPIOB ->ODR &= ~(1 << 10); return;
		case 2: GPIOB ->ODR &= ~(1 << 13); return;

		default: break;
 8000fb4:	e014      	b.n	8000fe0 <turnOFF+0x48>
		case 0: GPIOA ->ODR &= ~(1 << 7);  return;
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <turnOFF+0x54>)
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	4a0c      	ldr	r2, [pc, #48]	@ (8000fec <turnOFF+0x54>)
 8000fbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fc0:	60d3      	str	r3, [r2, #12]
 8000fc2:	e00e      	b.n	8000fe2 <turnOFF+0x4a>
		case 1: GPIOB ->ODR &= ~(1 << 10); return;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <turnOFF+0x58>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	4a09      	ldr	r2, [pc, #36]	@ (8000ff0 <turnOFF+0x58>)
 8000fca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000fce:	60d3      	str	r3, [r2, #12]
 8000fd0:	e007      	b.n	8000fe2 <turnOFF+0x4a>
		case 2: GPIOB ->ODR &= ~(1 << 13); return;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <turnOFF+0x58>)
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	4a06      	ldr	r2, [pc, #24]	@ (8000ff0 <turnOFF+0x58>)
 8000fd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000fdc:	60d3      	str	r3, [r2, #12]
 8000fde:	e000      	b.n	8000fe2 <turnOFF+0x4a>
		default: break;
 8000fe0:	bf00      	nop
	}
}
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40010c00 	.word	0x40010c00

08000ff4 <delay>:



void delay(uint16_t t){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
	TIM3 ->PSC = 8000-1;
 8000ffe:	4b13      	ldr	r3, [pc, #76]	@ (800104c <delay+0x58>)
 8001000:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001004:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3 ->ARR = t-1;
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	1e5a      	subs	r2, r3, #1
 800100a:	4b10      	ldr	r3, [pc, #64]	@ (800104c <delay+0x58>)
 800100c:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3 ->CR1 |= TIM_CR1_CEN;
 800100e:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <delay+0x58>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a0e      	ldr	r2, [pc, #56]	@ (800104c <delay+0x58>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6013      	str	r3, [r2, #0]
	while(!(TIM3->SR & TIM_SR_UIF));
 800101a:	bf00      	nop
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <delay+0x58>)
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0f9      	beq.n	800101c <delay+0x28>
	TIM3->SR &= ~TIM_SR_UIF;
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <delay+0x58>)
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	4a07      	ldr	r2, [pc, #28]	@ (800104c <delay+0x58>)
 800102e:	f023 0301 	bic.w	r3, r3, #1
 8001032:	6113      	str	r3, [r2, #16]
	TIM3 ->CR1 &= ~(TIM_CR1_CEN);
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <delay+0x58>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a04      	ldr	r2, [pc, #16]	@ (800104c <delay+0x58>)
 800103a:	f023 0301 	bic.w	r3, r3, #1
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40000400 	.word	0x40000400

08001050 <getADCVal>:

uint16_t getADCVal(uint8_t i){
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
	if (i ==0){
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d117      	bne.n	8001090 <getADCVal+0x40>
		ADC1->CR2 |= ADC_CR2_SWSTART; // start conversion
 8001060:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <getADCVal+0x78>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	4a18      	ldr	r2, [pc, #96]	@ (80010c8 <getADCVal+0x78>)
 8001066:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800106a:	6093      	str	r3, [r2, #8]
			while (!(ADC1->SR & ADC_SR_EOC));     // Wait for conversion complete
 800106c:	bf00      	nop
 800106e:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <getADCVal+0x78>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0f9      	beq.n	800106e <getADCVal+0x1e>
			ADC1->SR &= ~(ADC_SR_EOC);
 800107a:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <getADCVal+0x78>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a12      	ldr	r2, [pc, #72]	@ (80010c8 <getADCVal+0x78>)
 8001080:	f023 0302 	bic.w	r3, r3, #2
 8001084:	6013      	str	r3, [r2, #0]
			uint16_t ADCVal = ADC1->DR;  // Read result (10-bit mask)
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <getADCVal+0x78>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	81bb      	strh	r3, [r7, #12]
			return ADCVal;
 800108c:	89bb      	ldrh	r3, [r7, #12]
 800108e:	e016      	b.n	80010be <getADCVal+0x6e>
	}
	else {
		ADC2->CR2 |= ADC_CR2_SWSTART; // start conversion
 8001090:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <getADCVal+0x7c>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	4a0d      	ldr	r2, [pc, #52]	@ (80010cc <getADCVal+0x7c>)
 8001096:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800109a:	6093      	str	r3, [r2, #8]
		while (!(ADC2->SR & ADC_SR_EOC));     // Wait for conversion complete
 800109c:	bf00      	nop
 800109e:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <getADCVal+0x7c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0f9      	beq.n	800109e <getADCVal+0x4e>
		ADC2->SR &= ~(ADC_SR_EOC);
 80010aa:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <getADCVal+0x7c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a07      	ldr	r2, [pc, #28]	@ (80010cc <getADCVal+0x7c>)
 80010b0:	f023 0302 	bic.w	r3, r3, #2
 80010b4:	6013      	str	r3, [r2, #0]
		uint16_t ADCVal = ADC2->DR;  // Read result (10-bit mask)
 80010b6:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <getADCVal+0x7c>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	81fb      	strh	r3, [r7, #14]
		return ADCVal;
 80010bc:	89fb      	ldrh	r3, [r7, #14]
	}


}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	40012400 	.word	0x40012400
 80010cc:	40012800 	.word	0x40012800

080010d0 <setRotationDir>:

void setRotationDir(uint8_t i){
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	switch(i){
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <setRotationDir+0x16>
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d007      	beq.n	80010f4 <setRotationDir+0x24>
		case 0 : GPIOB -> ODR |= (1 << 7) ;break; // Counter CLockwise
		case 1 : GPIOB -> ODR |= (1 << 8) ;break; // CLockwise
		default: break;
 80010e4:	e00d      	b.n	8001102 <setRotationDir+0x32>
		case 0 : GPIOB -> ODR |= (1 << 7) ;break; // Counter CLockwise
 80010e6:	4b09      	ldr	r3, [pc, #36]	@ (800110c <setRotationDir+0x3c>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4a08      	ldr	r2, [pc, #32]	@ (800110c <setRotationDir+0x3c>)
 80010ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010f0:	60d3      	str	r3, [r2, #12]
 80010f2:	e006      	b.n	8001102 <setRotationDir+0x32>
		case 1 : GPIOB -> ODR |= (1 << 8) ;break; // CLockwise
 80010f4:	4b05      	ldr	r3, [pc, #20]	@ (800110c <setRotationDir+0x3c>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <setRotationDir+0x3c>)
 80010fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010fe:	60d3      	str	r3, [r2, #12]
 8001100:	bf00      	nop
	}
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	40010c00 	.word	0x40010c00

08001110 <pressBreak>:


void pressBreak(){
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	GPIOB->ODR |= (1 << 7) | (1 << 8);
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <pressBreak+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4a03      	ldr	r2, [pc, #12]	@ (8001128 <pressBreak+0x18>)
 800111a:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800111e:	60d3      	str	r3, [r2, #12]

}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40010c00 	.word	0x40010c00

0800112c <freeMotor>:


void freeMotor(){
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~((1 << 7) | (1 << 8));
 8001130:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <freeMotor+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	4a03      	ldr	r2, [pc, #12]	@ (8001144 <freeMotor+0x18>)
 8001136:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 800113a:	60d3      	str	r3, [r2, #12]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	40010c00 	.word	0x40010c00

08001148 <initPWM>:

void initPWM(){
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
	RCC ->APB1ENR |= RCC_APB1ENR_TIM2EN; //enable Timer
 800114c:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <initPWM+0x94>)
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	4a22      	ldr	r2, [pc, #136]	@ (80011dc <initPWM+0x94>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	61d3      	str	r3, [r2, #28]

	TIM2 -> PSC = 8 - 1;
 8001158:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800115c:	2207      	movs	r2, #7
 800115e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2 -> ARR = 1000 - 1;
 8001160:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001164:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001168:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CCMR1 |= (6 << 12); // mode 1 for ch2
 800116a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001174:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001178:	6193      	str	r3, [r2, #24]

	TIM2 -> CCR2 = 0; //duty Cycle =0
 800117a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800117e:	2200      	movs	r2, #0
 8001180:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM2->CCMR1 |= TIM_CCMR1_OC1PE; // Enable preload
 8001182:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= TIM_CCER_CC2E;    // Enable output for CH1
 8001192:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800119c:	f043 0310 	orr.w	r3, r3, #16
 80011a0:	6213      	str	r3, [r2, #32]

	TIM2->CR1 |= TIM_CR1_ARPE;   // Enable auto-reload Preload
 80011a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011b0:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= TIM_EGR_UG;     // Force update to load registers
 80011b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6153      	str	r3, [r2, #20]

	TIM2->CR1 |= TIM_CR1_CEN;    // Enable timer
 80011c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6013      	str	r3, [r2, #0]

}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000

080011e0 <writePWM>:

void writePWM (float dutyCycle){
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	if (dutyCycle > 100){
 80011e8:	4912      	ldr	r1, [pc, #72]	@ (8001234 <writePWM+0x54>)
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fd0c 	bl	8000c08 <__aeabi_fcmpgt>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <writePWM+0x1a>
		dutyCycle = 100;
 80011f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <writePWM+0x54>)
 80011f8:	607b      	str	r3, [r7, #4]
	}

	TIM2 -> CCR2 = (TIM2->ARR + 1) * dutyCycle / 100;
 80011fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001200:	3301      	adds	r3, #1
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff faec 	bl	80007e0 <__aeabi_ui2f>
 8001208:	4603      	mov	r3, r0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fb3f 	bl	8000890 <__aeabi_fmul>
 8001212:	4603      	mov	r3, r0
 8001214:	4907      	ldr	r1, [pc, #28]	@ (8001234 <writePWM+0x54>)
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fbee 	bl	80009f8 <__aeabi_fdiv>
 800121c:	4603      	mov	r3, r0
 800121e:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fd20 	bl	8000c68 <__aeabi_f2uiz>
 8001228:	4603      	mov	r3, r0
 800122a:	63a3      	str	r3, [r4, #56]	@ 0x38

}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bd90      	pop	{r4, r7, pc}
 8001234:	42c80000 	.word	0x42c80000

08001238 <getcurrentPosition>:
		writePWM(dutyCycle);
	}
	turnOFF(motorIndex);
}

int getcurrentPosition(){
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0

	return getADCVal(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f7ff ff07 	bl	8001050 <getADCVal>
 8001242:	4603      	mov	r3, r0

}
 8001244:	4618      	mov	r0, r3
 8001246:	bd80      	pop	{r7, pc}

08001248 <CAL>:

void CAL(){
 8001248:	b598      	push	{r3, r4, r7, lr}
 800124a:	af00      	add	r7, sp, #0
	while (!(GPIOB -> IDR & 1 << 14) ){ // exit CAL
 800124c:	e011      	b.n	8001272 <CAL+0x2a>
		//delay(50);
		if (getADCVal(1) != getADCVal(0)){
 800124e:	2001      	movs	r0, #1
 8001250:	f7ff fefe 	bl	8001050 <getADCVal>
 8001254:	4603      	mov	r3, r0
 8001256:	461c      	mov	r4, r3
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff fef9 	bl	8001050 <getADCVal>
 800125e:	4603      	mov	r3, r0
 8001260:	429c      	cmp	r4, r3
 8001262:	d003      	beq.n	800126c <CAL+0x24>
			turnOFF(2);
 8001264:	2002      	movs	r0, #2
 8001266:	f7ff fe97 	bl	8000f98 <turnOFF>
 800126a:	e002      	b.n	8001272 <CAL+0x2a>
		}
		else {
			turnON(2);
 800126c:	2002      	movs	r0, #2
 800126e:	f7ff fe65 	bl	8000f3c <turnON>
	while (!(GPIOB -> IDR & 1 << 14) ){ // exit CAL
 8001272:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <CAL+0x3c>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0e7      	beq.n	800124e <CAL+0x6>
		}
	}
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	bd98      	pop	{r3, r4, r7, pc}
 8001284:	40010c00 	.word	0x40010c00

08001288 <PIDController>:


// PID -> u(t) = Kp * E(t) + Ki * ∫E(t)dt + Kd * dE(t)/dt

void PIDController() {
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
    int count = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]

    while ((abs(ref - curr) > TOLERANCE) && (count++ < 10000)) {
 8001292:	e112      	b.n	80014ba <PIDController+0x232>

    	if (fabs(prevRef - ref) > RESET_THRESHOLD){
 8001294:	4b9a      	ldr	r3, [pc, #616]	@ (8001500 <PIDController+0x278>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b9a      	ldr	r3, [pc, #616]	@ (8001504 <PIDController+0x27c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f8a6 	bl	80003f0 <__aeabi_i2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4614      	mov	r4, r2
 80012aa:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	4b95      	ldr	r3, [pc, #596]	@ (8001508 <PIDController+0x280>)
 80012b4:	4620      	mov	r0, r4
 80012b6:	4629      	mov	r1, r5
 80012b8:	f7ff f982 	bl	80005c0 <__aeabi_dcmpgt>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <PIDController+0x46>
    		errDerivative =0;
 80012c2:	4b92      	ldr	r3, [pc, #584]	@ (800150c <PIDController+0x284>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
    		errIntegral = 0;
 80012c8:	4b91      	ldr	r3, [pc, #580]	@ (8001510 <PIDController+0x288>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]

    	}

        curr = getcurrentPosition();
 80012ce:	f7ff ffb3 	bl	8001238 <getcurrentPosition>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a8f      	ldr	r2, [pc, #572]	@ (8001514 <PIDController+0x28c>)
 80012d6:	6013      	str	r3, [r2, #0]
        err = ref - curr;
 80012d8:	4b8a      	ldr	r3, [pc, #552]	@ (8001504 <PIDController+0x27c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b8d      	ldr	r3, [pc, #564]	@ (8001514 <PIDController+0x28c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	4a8d      	ldr	r2, [pc, #564]	@ (8001518 <PIDController+0x290>)
 80012e4:	6013      	str	r3, [r2, #0]

        // Enforce limits and prevent overshooting
        if ((curr <= LOWER_LIMIT && err < 0) ||
 80012e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001514 <PIDController+0x28c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f240 421a 	movw	r2, #1050	@ 0x41a
 80012ee:	4293      	cmp	r3, r2
 80012f0:	dc03      	bgt.n	80012fa <PIDController+0x72>
 80012f2:	4b89      	ldr	r3, [pc, #548]	@ (8001518 <PIDController+0x290>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db15      	blt.n	8001326 <PIDController+0x9e>
            (curr >= UPPER_LIMIT && err > 0) ||
 80012fa:	4b86      	ldr	r3, [pc, #536]	@ (8001514 <PIDController+0x28c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
        if ((curr <= LOWER_LIMIT && err < 0) ||
 80012fe:	f640 5247 	movw	r2, #3399	@ 0xd47
 8001302:	4293      	cmp	r3, r2
 8001304:	dd03      	ble.n	800130e <PIDController+0x86>
            (curr >= UPPER_LIMIT && err > 0) ||
 8001306:	4b84      	ldr	r3, [pc, #528]	@ (8001518 <PIDController+0x290>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	dc0b      	bgt.n	8001326 <PIDController+0x9e>
            curr < LOWER_LIMIT ||
 800130e:	4b81      	ldr	r3, [pc, #516]	@ (8001514 <PIDController+0x28c>)
 8001310:	681b      	ldr	r3, [r3, #0]
            (curr >= UPPER_LIMIT && err > 0) ||
 8001312:	f240 4219 	movw	r2, #1049	@ 0x419
 8001316:	4293      	cmp	r3, r2
 8001318:	dd05      	ble.n	8001326 <PIDController+0x9e>
            curr > UPPER_LIMIT) {
 800131a:	4b7e      	ldr	r3, [pc, #504]	@ (8001514 <PIDController+0x28c>)
 800131c:	681b      	ldr	r3, [r3, #0]
            curr < LOWER_LIMIT ||
 800131e:	f640 5248 	movw	r2, #3400	@ 0xd48
 8001322:	4293      	cmp	r3, r2
 8001324:	dd3c      	ble.n	80013a0 <PIDController+0x118>

            pressBreak();        // Emergency stop
 8001326:	f7ff fef3 	bl	8001110 <pressBreak>
            turnON(1);           // RED LED for limit hit
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff fe06 	bl	8000f3c <turnON>
            turnOFF(0);          // Turn off Blue LED
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff fe31 	bl	8000f98 <turnOFF>

            // Wait until ref is set to move AWAY from the limit
            while (1) {
                curr = getcurrentPosition();
 8001336:	f7ff ff7f 	bl	8001238 <getcurrentPosition>
 800133a:	4603      	mov	r3, r0
 800133c:	4a75      	ldr	r2, [pc, #468]	@ (8001514 <PIDController+0x28c>)
 800133e:	6013      	str	r3, [r2, #0]
                ref = getADCVal(0);
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fe85 	bl	8001050 <getADCVal>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	4b6e      	ldr	r3, [pc, #440]	@ (8001504 <PIDController+0x27c>)
 800134c:	601a      	str	r2, [r3, #0]
                err = ref - curr;
 800134e:	4b6d      	ldr	r3, [pc, #436]	@ (8001504 <PIDController+0x27c>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b70      	ldr	r3, [pc, #448]	@ (8001514 <PIDController+0x28c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	4a6f      	ldr	r2, [pc, #444]	@ (8001518 <PIDController+0x290>)
 800135a:	6013      	str	r3, [r2, #0]

                if ((curr > LOWER_LIMIT && err > 0) ||
 800135c:	4b6d      	ldr	r3, [pc, #436]	@ (8001514 <PIDController+0x28c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f240 421a 	movw	r2, #1050	@ 0x41a
 8001364:	4293      	cmp	r3, r2
 8001366:	dd03      	ble.n	8001370 <PIDController+0xe8>
 8001368:	4b6b      	ldr	r3, [pc, #428]	@ (8001518 <PIDController+0x290>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	dc17      	bgt.n	80013a0 <PIDController+0x118>
                    (curr < UPPER_LIMIT && err < 0)) {
 8001370:	4b68      	ldr	r3, [pc, #416]	@ (8001514 <PIDController+0x28c>)
 8001372:	681b      	ldr	r3, [r3, #0]
                if ((curr > LOWER_LIMIT && err > 0) ||
 8001374:	f640 5247 	movw	r2, #3399	@ 0xd47
 8001378:	4293      	cmp	r3, r2
 800137a:	dc03      	bgt.n	8001384 <PIDController+0xfc>
                    (curr < UPPER_LIMIT && err < 0)) {
 800137c:	4b66      	ldr	r3, [pc, #408]	@ (8001518 <PIDController+0x290>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0d      	blt.n	80013a0 <PIDController+0x118>
                    break; // Safe to resume
                }

                if (ref > LOWER_LIMIT && ref < UPPER_LIMIT) break;
 8001384:	4b5f      	ldr	r3, [pc, #380]	@ (8001504 <PIDController+0x27c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f240 421a 	movw	r2, #1050	@ 0x41a
 800138c:	4293      	cmp	r3, r2
 800138e:	ddd2      	ble.n	8001336 <PIDController+0xae>
 8001390:	4b5c      	ldr	r3, [pc, #368]	@ (8001504 <PIDController+0x27c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f640 5247 	movw	r2, #3399	@ 0xd47
 8001398:	4293      	cmp	r3, r2
 800139a:	dd00      	ble.n	800139e <PIDController+0x116>
                curr = getcurrentPosition();
 800139c:	e7cb      	b.n	8001336 <PIDController+0xae>
                if (ref > LOWER_LIMIT && ref < UPPER_LIMIT) break;
 800139e:	bf00      	nop
            }
        }


        errIntegral += err;
 80013a0:	4b5b      	ldr	r3, [pc, #364]	@ (8001510 <PIDController+0x288>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b5c      	ldr	r3, [pc, #368]	@ (8001518 <PIDController+0x290>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a59      	ldr	r2, [pc, #356]	@ (8001510 <PIDController+0x288>)
 80013ac:	6013      	str	r3, [r2, #0]
        if (errIntegral > 1000) errIntegral = 1000;
 80013ae:	4b58      	ldr	r3, [pc, #352]	@ (8001510 <PIDController+0x288>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013b6:	dd04      	ble.n	80013c2 <PIDController+0x13a>
 80013b8:	4b55      	ldr	r3, [pc, #340]	@ (8001510 <PIDController+0x288>)
 80013ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	e007      	b.n	80013d2 <PIDController+0x14a>
        else if (errIntegral < -1000) errIntegral = -1000;
 80013c2:	4b53      	ldr	r3, [pc, #332]	@ (8001510 <PIDController+0x288>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80013ca:	da02      	bge.n	80013d2 <PIDController+0x14a>
 80013cc:	4b50      	ldr	r3, [pc, #320]	@ (8001510 <PIDController+0x288>)
 80013ce:	4a53      	ldr	r2, [pc, #332]	@ (800151c <PIDController+0x294>)
 80013d0:	601a      	str	r2, [r3, #0]

        errDerivative = err - prevErr;
 80013d2:	4b51      	ldr	r3, [pc, #324]	@ (8001518 <PIDController+0x290>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b52      	ldr	r3, [pc, #328]	@ (8001520 <PIDController+0x298>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	4a4b      	ldr	r2, [pc, #300]	@ (800150c <PIDController+0x284>)
 80013de:	6013      	str	r3, [r2, #0]
        prevErr = err;
 80013e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001518 <PIDController+0x290>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001520 <PIDController+0x298>)
 80013e6:	6013      	str	r3, [r2, #0]

        u = Kp * err + Ki * errIntegral + Kd * errDerivative;
 80013e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001518 <PIDController+0x290>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f9fb 	bl	80007e8 <__aeabi_i2f>
 80013f2:	4602      	mov	r2, r0
 80013f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001524 <PIDController+0x29c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	4610      	mov	r0, r2
 80013fc:	f7ff fa48 	bl	8000890 <__aeabi_fmul>
 8001400:	4603      	mov	r3, r0
 8001402:	461e      	mov	r6, r3
 8001404:	4b42      	ldr	r3, [pc, #264]	@ (8001510 <PIDController+0x288>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f9ed 	bl	80007e8 <__aeabi_i2f>
 800140e:	4602      	mov	r2, r0
 8001410:	4b45      	ldr	r3, [pc, #276]	@ (8001528 <PIDController+0x2a0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4619      	mov	r1, r3
 8001416:	4610      	mov	r0, r2
 8001418:	f7ff fa3a 	bl	8000890 <__aeabi_fmul>
 800141c:	4603      	mov	r3, r0
 800141e:	4619      	mov	r1, r3
 8001420:	4630      	mov	r0, r6
 8001422:	f7ff f92d 	bl	8000680 <__addsf3>
 8001426:	4603      	mov	r3, r0
 8001428:	461e      	mov	r6, r3
 800142a:	4b38      	ldr	r3, [pc, #224]	@ (800150c <PIDController+0x284>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f9da 	bl	80007e8 <__aeabi_i2f>
 8001434:	4602      	mov	r2, r0
 8001436:	4b3d      	ldr	r3, [pc, #244]	@ (800152c <PIDController+0x2a4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	4610      	mov	r0, r2
 800143e:	f7ff fa27 	bl	8000890 <__aeabi_fmul>
 8001442:	4603      	mov	r3, r0
 8001444:	4619      	mov	r1, r3
 8001446:	4630      	mov	r0, r6
 8001448:	f7ff f91a 	bl	8000680 <__addsf3>
 800144c:	4603      	mov	r3, r0
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fbe4 	bl	8000c1c <__aeabi_f2iz>
 8001454:	4603      	mov	r3, r0
 8001456:	4a36      	ldr	r2, [pc, #216]	@ (8001530 <PIDController+0x2a8>)
 8001458:	6013      	str	r3, [r2, #0]

        float duty = fabs(u);
 800145a:	4b35      	ldr	r3, [pc, #212]	@ (8001530 <PIDController+0x2a8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7fe ffc6 	bl	80003f0 <__aeabi_i2d>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff f8b2 	bl	80005d4 <__aeabi_d2f>
 8001470:	4603      	mov	r3, r0
 8001472:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001476:	603b      	str	r3, [r7, #0]
        duty = duty > 100.0f ? 100.0f : duty;  // Clamp to 100
 8001478:	492e      	ldr	r1, [pc, #184]	@ (8001534 <PIDController+0x2ac>)
 800147a:	6838      	ldr	r0, [r7, #0]
 800147c:	f7ff fbc4 	bl	8000c08 <__aeabi_fcmpgt>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <PIDController+0x202>
 8001486:	4b2b      	ldr	r3, [pc, #172]	@ (8001534 <PIDController+0x2ac>)
 8001488:	e000      	b.n	800148c <PIDController+0x204>
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	603b      	str	r3, [r7, #0]

        freeMotor();  // Remove brake
 800148e:	f7ff fe4d 	bl	800112c <freeMotor>

        if (u > 0) {
 8001492:	4b27      	ldr	r3, [pc, #156]	@ (8001530 <PIDController+0x2a8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	dd03      	ble.n	80014a2 <PIDController+0x21a>
            setRotationDir(1);  // Clockwise
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff fe18 	bl	80010d0 <setRotationDir>
 80014a0:	e002      	b.n	80014a8 <PIDController+0x220>
        } else {
            setRotationDir(0);  // Counter-clockwise
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff fe14 	bl	80010d0 <setRotationDir>
        }

        writePWM(duty);
 80014a8:	6838      	ldr	r0, [r7, #0]
 80014aa:	f7ff fe99 	bl	80011e0 <writePWM>

        // Show processing (RED ON, BLUE OFF)
        turnON(1);
 80014ae:	2001      	movs	r0, #1
 80014b0:	f7ff fd44 	bl	8000f3c <turnON>
        turnOFF(0);
 80014b4:	2000      	movs	r0, #0
 80014b6:	f7ff fd6f 	bl	8000f98 <turnOFF>
    while ((abs(ref - curr) > TOLERANCE) && (count++ < 10000)) {
 80014ba:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <PIDController+0x27c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <PIDController+0x28c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bfb8      	it	lt
 80014c8:	425b      	neglt	r3, r3
 80014ca:	2b23      	cmp	r3, #35	@ 0x23
 80014cc:	dd07      	ble.n	80014de <PIDController+0x256>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80014d8:	4293      	cmp	r3, r2
 80014da:	f77f aedb 	ble.w	8001294 <PIDController+0xc>
    }

    // Stop motor and show finish (BLUE ON)
    pressBreak();
 80014de:	f7ff fe17 	bl	8001110 <pressBreak>
    turnON(0);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff fd2a 	bl	8000f3c <turnON>
    turnOFF(1);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f7ff fd55 	bl	8000f98 <turnOFF>
    prevRef = ref;
 80014ee:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <PIDController+0x27c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a03      	ldr	r2, [pc, #12]	@ (8001500 <PIDController+0x278>)
 80014f4:	6013      	str	r3, [r2, #0]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000040 	.word	0x20000040
 8001504:	2000003c 	.word	0x2000003c
 8001508:	406f4000 	.word	0x406f4000
 800150c:	2000002c 	.word	0x2000002c
 8001510:	20000030 	.word	0x20000030
 8001514:	20000044 	.word	0x20000044
 8001518:	20000038 	.word	0x20000038
 800151c:	fffffc18 	.word	0xfffffc18
 8001520:	20000034 	.word	0x20000034
 8001524:	20000020 	.word	0x20000020
 8001528:	20000024 	.word	0x20000024
 800152c:	20000028 	.word	0x20000028
 8001530:	20000048 	.word	0x20000048
 8001534:	42c80000 	.word	0x42c80000

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <NMI_Handler+0x4>

08001540 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <MemManage_Handler+0x4>

08001550 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <UsageFault_Handler+0x4>

08001560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f000 f82e 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800159c:	f7ff fff8 	bl	8001590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a0:	480b      	ldr	r0, [pc, #44]	@ (80015d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015a2:	490c      	ldr	r1, [pc, #48]	@ (80015d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015a4:	4a0c      	ldr	r2, [pc, #48]	@ (80015d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a09      	ldr	r2, [pc, #36]	@ (80015dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015b8:	4c09      	ldr	r4, [pc, #36]	@ (80015e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c6:	f000 f821 	bl	800160c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ca:	f7ff fb6d 	bl	8000ca8 <main>
  bx lr
 80015ce:	4770      	bx	lr
  ldr r0, =_sdata
 80015d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80015d8:	08001674 	.word	0x08001674
  ldr r2, =_sbss
 80015dc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80015e0:	20000050 	.word	0x20000050

080015e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC1_2_IRQHandler>
	...

080015e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <HAL_IncTick+0x1c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <HAL_IncTick+0x20>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a03      	ldr	r2, [pc, #12]	@ (8001608 <HAL_IncTick+0x20>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	20000001 	.word	0x20000001
 8001608:	2000004c 	.word	0x2000004c

0800160c <__libc_init_array>:
 800160c:	b570      	push	{r4, r5, r6, lr}
 800160e:	2600      	movs	r6, #0
 8001610:	4d0c      	ldr	r5, [pc, #48]	@ (8001644 <__libc_init_array+0x38>)
 8001612:	4c0d      	ldr	r4, [pc, #52]	@ (8001648 <__libc_init_array+0x3c>)
 8001614:	1b64      	subs	r4, r4, r5
 8001616:	10a4      	asrs	r4, r4, #2
 8001618:	42a6      	cmp	r6, r4
 800161a:	d109      	bne.n	8001630 <__libc_init_array+0x24>
 800161c:	f000 f81a 	bl	8001654 <_init>
 8001620:	2600      	movs	r6, #0
 8001622:	4d0a      	ldr	r5, [pc, #40]	@ (800164c <__libc_init_array+0x40>)
 8001624:	4c0a      	ldr	r4, [pc, #40]	@ (8001650 <__libc_init_array+0x44>)
 8001626:	1b64      	subs	r4, r4, r5
 8001628:	10a4      	asrs	r4, r4, #2
 800162a:	42a6      	cmp	r6, r4
 800162c:	d105      	bne.n	800163a <__libc_init_array+0x2e>
 800162e:	bd70      	pop	{r4, r5, r6, pc}
 8001630:	f855 3b04 	ldr.w	r3, [r5], #4
 8001634:	4798      	blx	r3
 8001636:	3601      	adds	r6, #1
 8001638:	e7ee      	b.n	8001618 <__libc_init_array+0xc>
 800163a:	f855 3b04 	ldr.w	r3, [r5], #4
 800163e:	4798      	blx	r3
 8001640:	3601      	adds	r6, #1
 8001642:	e7f2      	b.n	800162a <__libc_init_array+0x1e>
 8001644:	0800166c 	.word	0x0800166c
 8001648:	0800166c 	.word	0x0800166c
 800164c:	0800166c 	.word	0x0800166c
 8001650:	08001670 	.word	0x08001670

08001654 <_init>:
 8001654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001656:	bf00      	nop
 8001658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800165a:	bc08      	pop	{r3}
 800165c:	469e      	mov	lr, r3
 800165e:	4770      	bx	lr

08001660 <_fini>:
 8001660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001662:	bf00      	nop
 8001664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001666:	bc08      	pop	{r3}
 8001668:	469e      	mov	lr, r3
 800166a:	4770      	bx	lr
