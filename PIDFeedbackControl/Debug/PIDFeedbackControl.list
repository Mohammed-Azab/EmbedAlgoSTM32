
PIDFeedbackControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013b8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080014c4  080014c4  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080014c4  080014c4  00003004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080014c4  080014c4  00003004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080014c4  080014c4  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014c4  080014c4  000024c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080014c8  080014c8  000024c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080014cc  00003000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000004  080014d0  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  080014d0  0000304c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001185  00000000  00000000  0000302d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000063a  00000000  00000000  000041b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  000047f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001a8  00000000  00000000  00004a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e4e  00000000  00000000  00004bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000252a  00000000  00000000  0001aa1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ee48  00000000  00000000  0001cf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009bd90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009b4  00000000  00000000  0009bdd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0009c788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080014ac 	.word	0x080014ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080014ac 	.word	0x080014ac

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_d2f>:
 80004c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80004cc:	bf24      	itt	cs
 80004ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80004d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80004d6:	d90d      	bls.n	80004f4 <__aeabi_d2f+0x30>
 80004d8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80004dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004e4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80004e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004ec:	bf08      	it	eq
 80004ee:	f020 0001 	biceq.w	r0, r0, #1
 80004f2:	4770      	bx	lr
 80004f4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80004f8:	d121      	bne.n	800053e <__aeabi_d2f+0x7a>
 80004fa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80004fe:	bfbc      	itt	lt
 8000500:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000504:	4770      	bxlt	lr
 8000506:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800050a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800050e:	f1c2 0218 	rsb	r2, r2, #24
 8000512:	f1c2 0c20 	rsb	ip, r2, #32
 8000516:	fa10 f30c 	lsls.w	r3, r0, ip
 800051a:	fa20 f002 	lsr.w	r0, r0, r2
 800051e:	bf18      	it	ne
 8000520:	f040 0001 	orrne.w	r0, r0, #1
 8000524:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000528:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800052c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000530:	ea40 000c 	orr.w	r0, r0, ip
 8000534:	fa23 f302 	lsr.w	r3, r3, r2
 8000538:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800053c:	e7cc      	b.n	80004d8 <__aeabi_d2f+0x14>
 800053e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000542:	d107      	bne.n	8000554 <__aeabi_d2f+0x90>
 8000544:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000548:	bf1e      	ittt	ne
 800054a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800054e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000552:	4770      	bxne	lr
 8000554:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000558:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800055c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_frsub>:
 8000564:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000568:	e002      	b.n	8000570 <__addsf3>
 800056a:	bf00      	nop

0800056c <__aeabi_fsub>:
 800056c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000570 <__addsf3>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	bf1f      	itttt	ne
 8000574:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000578:	ea92 0f03 	teqne	r2, r3
 800057c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000580:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000584:	d06a      	beq.n	800065c <__addsf3+0xec>
 8000586:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800058a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800058e:	bfc1      	itttt	gt
 8000590:	18d2      	addgt	r2, r2, r3
 8000592:	4041      	eorgt	r1, r0
 8000594:	4048      	eorgt	r0, r1
 8000596:	4041      	eorgt	r1, r0
 8000598:	bfb8      	it	lt
 800059a:	425b      	neglt	r3, r3
 800059c:	2b19      	cmp	r3, #25
 800059e:	bf88      	it	hi
 80005a0:	4770      	bxhi	lr
 80005a2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80005a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005aa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80005ae:	bf18      	it	ne
 80005b0:	4240      	negne	r0, r0
 80005b2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80005b6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80005ba:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80005be:	bf18      	it	ne
 80005c0:	4249      	negne	r1, r1
 80005c2:	ea92 0f03 	teq	r2, r3
 80005c6:	d03f      	beq.n	8000648 <__addsf3+0xd8>
 80005c8:	f1a2 0201 	sub.w	r2, r2, #1
 80005cc:	fa41 fc03 	asr.w	ip, r1, r3
 80005d0:	eb10 000c 	adds.w	r0, r0, ip
 80005d4:	f1c3 0320 	rsb	r3, r3, #32
 80005d8:	fa01 f103 	lsl.w	r1, r1, r3
 80005dc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80005e0:	d502      	bpl.n	80005e8 <__addsf3+0x78>
 80005e2:	4249      	negs	r1, r1
 80005e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005e8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80005ec:	d313      	bcc.n	8000616 <__addsf3+0xa6>
 80005ee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80005f2:	d306      	bcc.n	8000602 <__addsf3+0x92>
 80005f4:	0840      	lsrs	r0, r0, #1
 80005f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005fa:	f102 0201 	add.w	r2, r2, #1
 80005fe:	2afe      	cmp	r2, #254	@ 0xfe
 8000600:	d251      	bcs.n	80006a6 <__addsf3+0x136>
 8000602:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000606:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800060a:	bf08      	it	eq
 800060c:	f020 0001 	biceq.w	r0, r0, #1
 8000610:	ea40 0003 	orr.w	r0, r0, r3
 8000614:	4770      	bx	lr
 8000616:	0049      	lsls	r1, r1, #1
 8000618:	eb40 0000 	adc.w	r0, r0, r0
 800061c:	3a01      	subs	r2, #1
 800061e:	bf28      	it	cs
 8000620:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000624:	d2ed      	bcs.n	8000602 <__addsf3+0x92>
 8000626:	fab0 fc80 	clz	ip, r0
 800062a:	f1ac 0c08 	sub.w	ip, ip, #8
 800062e:	ebb2 020c 	subs.w	r2, r2, ip
 8000632:	fa00 f00c 	lsl.w	r0, r0, ip
 8000636:	bfaa      	itet	ge
 8000638:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800063c:	4252      	neglt	r2, r2
 800063e:	4318      	orrge	r0, r3
 8000640:	bfbc      	itt	lt
 8000642:	40d0      	lsrlt	r0, r2
 8000644:	4318      	orrlt	r0, r3
 8000646:	4770      	bx	lr
 8000648:	f092 0f00 	teq	r2, #0
 800064c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000650:	bf06      	itte	eq
 8000652:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000656:	3201      	addeq	r2, #1
 8000658:	3b01      	subne	r3, #1
 800065a:	e7b5      	b.n	80005c8 <__addsf3+0x58>
 800065c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000660:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000664:	bf18      	it	ne
 8000666:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800066a:	d021      	beq.n	80006b0 <__addsf3+0x140>
 800066c:	ea92 0f03 	teq	r2, r3
 8000670:	d004      	beq.n	800067c <__addsf3+0x10c>
 8000672:	f092 0f00 	teq	r2, #0
 8000676:	bf08      	it	eq
 8000678:	4608      	moveq	r0, r1
 800067a:	4770      	bx	lr
 800067c:	ea90 0f01 	teq	r0, r1
 8000680:	bf1c      	itt	ne
 8000682:	2000      	movne	r0, #0
 8000684:	4770      	bxne	lr
 8000686:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800068a:	d104      	bne.n	8000696 <__addsf3+0x126>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	bf28      	it	cs
 8000690:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000694:	4770      	bx	lr
 8000696:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800069a:	bf3c      	itt	cc
 800069c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80006a0:	4770      	bxcc	lr
 80006a2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006a6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006ae:	4770      	bx	lr
 80006b0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006b4:	bf16      	itet	ne
 80006b6:	4608      	movne	r0, r1
 80006b8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006bc:	4601      	movne	r1, r0
 80006be:	0242      	lsls	r2, r0, #9
 80006c0:	bf06      	itte	eq
 80006c2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006c6:	ea90 0f01 	teqeq	r0, r1
 80006ca:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80006ce:	4770      	bx	lr

080006d0 <__aeabi_ui2f>:
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e004      	b.n	80006e0 <__aeabi_i2f+0x8>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2f>:
 80006d8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80006dc:	bf48      	it	mi
 80006de:	4240      	negmi	r0, r0
 80006e0:	ea5f 0c00 	movs.w	ip, r0
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80006ec:	4601      	mov	r1, r0
 80006ee:	f04f 0000 	mov.w	r0, #0
 80006f2:	e01c      	b.n	800072e <__aeabi_l2f+0x2a>

080006f4 <__aeabi_ul2f>:
 80006f4:	ea50 0201 	orrs.w	r2, r0, r1
 80006f8:	bf08      	it	eq
 80006fa:	4770      	bxeq	lr
 80006fc:	f04f 0300 	mov.w	r3, #0
 8000700:	e00a      	b.n	8000718 <__aeabi_l2f+0x14>
 8000702:	bf00      	nop

08000704 <__aeabi_l2f>:
 8000704:	ea50 0201 	orrs.w	r2, r0, r1
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000710:	d502      	bpl.n	8000718 <__aeabi_l2f+0x14>
 8000712:	4240      	negs	r0, r0
 8000714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000718:	ea5f 0c01 	movs.w	ip, r1
 800071c:	bf02      	ittt	eq
 800071e:	4684      	moveq	ip, r0
 8000720:	4601      	moveq	r1, r0
 8000722:	2000      	moveq	r0, #0
 8000724:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000728:	bf08      	it	eq
 800072a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800072e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000732:	fabc f28c 	clz	r2, ip
 8000736:	3a08      	subs	r2, #8
 8000738:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800073c:	db10      	blt.n	8000760 <__aeabi_l2f+0x5c>
 800073e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000742:	4463      	add	r3, ip
 8000744:	fa00 fc02 	lsl.w	ip, r0, r2
 8000748:	f1c2 0220 	rsb	r2, r2, #32
 800074c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000750:	fa20 f202 	lsr.w	r2, r0, r2
 8000754:	eb43 0002 	adc.w	r0, r3, r2
 8000758:	bf08      	it	eq
 800075a:	f020 0001 	biceq.w	r0, r0, #1
 800075e:	4770      	bx	lr
 8000760:	f102 0220 	add.w	r2, r2, #32
 8000764:	fa01 fc02 	lsl.w	ip, r1, r2
 8000768:	f1c2 0220 	rsb	r2, r2, #32
 800076c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000770:	fa21 f202 	lsr.w	r2, r1, r2
 8000774:	eb43 0002 	adc.w	r0, r3, r2
 8000778:	bf08      	it	eq
 800077a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800077e:	4770      	bx	lr

08000780 <__aeabi_fmul>:
 8000780:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000784:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000788:	bf1e      	ittt	ne
 800078a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800078e:	ea92 0f0c 	teqne	r2, ip
 8000792:	ea93 0f0c 	teqne	r3, ip
 8000796:	d06f      	beq.n	8000878 <__aeabi_fmul+0xf8>
 8000798:	441a      	add	r2, r3
 800079a:	ea80 0c01 	eor.w	ip, r0, r1
 800079e:	0240      	lsls	r0, r0, #9
 80007a0:	bf18      	it	ne
 80007a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007a6:	d01e      	beq.n	80007e6 <__aeabi_fmul+0x66>
 80007a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80007ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007b4:	fba0 3101 	umull	r3, r1, r0, r1
 80007b8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80007bc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80007c0:	bf3e      	ittt	cc
 80007c2:	0049      	lslcc	r1, r1, #1
 80007c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007c8:	005b      	lslcc	r3, r3, #1
 80007ca:	ea40 0001 	orr.w	r0, r0, r1
 80007ce:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80007d2:	2afd      	cmp	r2, #253	@ 0xfd
 80007d4:	d81d      	bhi.n	8000812 <__aeabi_fmul+0x92>
 80007d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80007da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007de:	bf08      	it	eq
 80007e0:	f020 0001 	biceq.w	r0, r0, #1
 80007e4:	4770      	bx	lr
 80007e6:	f090 0f00 	teq	r0, #0
 80007ea:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80007ee:	bf08      	it	eq
 80007f0:	0249      	lsleq	r1, r1, #9
 80007f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80007f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80007fa:	3a7f      	subs	r2, #127	@ 0x7f
 80007fc:	bfc2      	ittt	gt
 80007fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000802:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000806:	4770      	bxgt	lr
 8000808:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800080c:	f04f 0300 	mov.w	r3, #0
 8000810:	3a01      	subs	r2, #1
 8000812:	dc5d      	bgt.n	80008d0 <__aeabi_fmul+0x150>
 8000814:	f112 0f19 	cmn.w	r2, #25
 8000818:	bfdc      	itt	le
 800081a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800081e:	4770      	bxle	lr
 8000820:	f1c2 0200 	rsb	r2, r2, #0
 8000824:	0041      	lsls	r1, r0, #1
 8000826:	fa21 f102 	lsr.w	r1, r1, r2
 800082a:	f1c2 0220 	rsb	r2, r2, #32
 800082e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000832:	ea5f 0031 	movs.w	r0, r1, rrx
 8000836:	f140 0000 	adc.w	r0, r0, #0
 800083a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800083e:	bf08      	it	eq
 8000840:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000844:	4770      	bx	lr
 8000846:	f092 0f00 	teq	r2, #0
 800084a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800084e:	bf02      	ittt	eq
 8000850:	0040      	lsleq	r0, r0, #1
 8000852:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000856:	3a01      	subeq	r2, #1
 8000858:	d0f9      	beq.n	800084e <__aeabi_fmul+0xce>
 800085a:	ea40 000c 	orr.w	r0, r0, ip
 800085e:	f093 0f00 	teq	r3, #0
 8000862:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000866:	bf02      	ittt	eq
 8000868:	0049      	lsleq	r1, r1, #1
 800086a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800086e:	3b01      	subeq	r3, #1
 8000870:	d0f9      	beq.n	8000866 <__aeabi_fmul+0xe6>
 8000872:	ea41 010c 	orr.w	r1, r1, ip
 8000876:	e78f      	b.n	8000798 <__aeabi_fmul+0x18>
 8000878:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800087c:	ea92 0f0c 	teq	r2, ip
 8000880:	bf18      	it	ne
 8000882:	ea93 0f0c 	teqne	r3, ip
 8000886:	d00a      	beq.n	800089e <__aeabi_fmul+0x11e>
 8000888:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800088c:	bf18      	it	ne
 800088e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000892:	d1d8      	bne.n	8000846 <__aeabi_fmul+0xc6>
 8000894:	ea80 0001 	eor.w	r0, r0, r1
 8000898:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800089c:	4770      	bx	lr
 800089e:	f090 0f00 	teq	r0, #0
 80008a2:	bf17      	itett	ne
 80008a4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80008a8:	4608      	moveq	r0, r1
 80008aa:	f091 0f00 	teqne	r1, #0
 80008ae:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80008b2:	d014      	beq.n	80008de <__aeabi_fmul+0x15e>
 80008b4:	ea92 0f0c 	teq	r2, ip
 80008b8:	d101      	bne.n	80008be <__aeabi_fmul+0x13e>
 80008ba:	0242      	lsls	r2, r0, #9
 80008bc:	d10f      	bne.n	80008de <__aeabi_fmul+0x15e>
 80008be:	ea93 0f0c 	teq	r3, ip
 80008c2:	d103      	bne.n	80008cc <__aeabi_fmul+0x14c>
 80008c4:	024b      	lsls	r3, r1, #9
 80008c6:	bf18      	it	ne
 80008c8:	4608      	movne	r0, r1
 80008ca:	d108      	bne.n	80008de <__aeabi_fmul+0x15e>
 80008cc:	ea80 0001 	eor.w	r0, r0, r1
 80008d0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80008d4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008dc:	4770      	bx	lr
 80008de:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008e2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80008e6:	4770      	bx	lr

080008e8 <__aeabi_fdiv>:
 80008e8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008f0:	bf1e      	ittt	ne
 80008f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008f6:	ea92 0f0c 	teqne	r2, ip
 80008fa:	ea93 0f0c 	teqne	r3, ip
 80008fe:	d069      	beq.n	80009d4 <__aeabi_fdiv+0xec>
 8000900:	eba2 0203 	sub.w	r2, r2, r3
 8000904:	ea80 0c01 	eor.w	ip, r0, r1
 8000908:	0249      	lsls	r1, r1, #9
 800090a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800090e:	d037      	beq.n	8000980 <__aeabi_fdiv+0x98>
 8000910:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000914:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000918:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800091c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000920:	428b      	cmp	r3, r1
 8000922:	bf38      	it	cc
 8000924:	005b      	lslcc	r3, r3, #1
 8000926:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800092a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800092e:	428b      	cmp	r3, r1
 8000930:	bf24      	itt	cs
 8000932:	1a5b      	subcs	r3, r3, r1
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800093c:	bf24      	itt	cs
 800093e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000942:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000946:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800094a:	bf24      	itt	cs
 800094c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000954:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000958:	bf24      	itt	cs
 800095a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800095e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000962:	011b      	lsls	r3, r3, #4
 8000964:	bf18      	it	ne
 8000966:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800096a:	d1e0      	bne.n	800092e <__aeabi_fdiv+0x46>
 800096c:	2afd      	cmp	r2, #253	@ 0xfd
 800096e:	f63f af50 	bhi.w	8000812 <__aeabi_fmul+0x92>
 8000972:	428b      	cmp	r3, r1
 8000974:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000978:	bf08      	it	eq
 800097a:	f020 0001 	biceq.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000984:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000988:	327f      	adds	r2, #127	@ 0x7f
 800098a:	bfc2      	ittt	gt
 800098c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000990:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000994:	4770      	bxgt	lr
 8000996:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800099a:	f04f 0300 	mov.w	r3, #0
 800099e:	3a01      	subs	r2, #1
 80009a0:	e737      	b.n	8000812 <__aeabi_fmul+0x92>
 80009a2:	f092 0f00 	teq	r2, #0
 80009a6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80009aa:	bf02      	ittt	eq
 80009ac:	0040      	lsleq	r0, r0, #1
 80009ae:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80009b2:	3a01      	subeq	r2, #1
 80009b4:	d0f9      	beq.n	80009aa <__aeabi_fdiv+0xc2>
 80009b6:	ea40 000c 	orr.w	r0, r0, ip
 80009ba:	f093 0f00 	teq	r3, #0
 80009be:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009c2:	bf02      	ittt	eq
 80009c4:	0049      	lsleq	r1, r1, #1
 80009c6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80009ca:	3b01      	subeq	r3, #1
 80009cc:	d0f9      	beq.n	80009c2 <__aeabi_fdiv+0xda>
 80009ce:	ea41 010c 	orr.w	r1, r1, ip
 80009d2:	e795      	b.n	8000900 <__aeabi_fdiv+0x18>
 80009d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009d8:	ea92 0f0c 	teq	r2, ip
 80009dc:	d108      	bne.n	80009f0 <__aeabi_fdiv+0x108>
 80009de:	0242      	lsls	r2, r0, #9
 80009e0:	f47f af7d 	bne.w	80008de <__aeabi_fmul+0x15e>
 80009e4:	ea93 0f0c 	teq	r3, ip
 80009e8:	f47f af70 	bne.w	80008cc <__aeabi_fmul+0x14c>
 80009ec:	4608      	mov	r0, r1
 80009ee:	e776      	b.n	80008de <__aeabi_fmul+0x15e>
 80009f0:	ea93 0f0c 	teq	r3, ip
 80009f4:	d104      	bne.n	8000a00 <__aeabi_fdiv+0x118>
 80009f6:	024b      	lsls	r3, r1, #9
 80009f8:	f43f af4c 	beq.w	8000894 <__aeabi_fmul+0x114>
 80009fc:	4608      	mov	r0, r1
 80009fe:	e76e      	b.n	80008de <__aeabi_fmul+0x15e>
 8000a00:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a04:	bf18      	it	ne
 8000a06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a0a:	d1ca      	bne.n	80009a2 <__aeabi_fdiv+0xba>
 8000a0c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000a10:	f47f af5c 	bne.w	80008cc <__aeabi_fmul+0x14c>
 8000a14:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000a18:	f47f af3c 	bne.w	8000894 <__aeabi_fmul+0x114>
 8000a1c:	e75f      	b.n	80008de <__aeabi_fmul+0x15e>
 8000a1e:	bf00      	nop

08000a20 <__gesf2>:
 8000a20:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a24:	e006      	b.n	8000a34 <__cmpsf2+0x4>
 8000a26:	bf00      	nop

08000a28 <__lesf2>:
 8000a28:	f04f 0c01 	mov.w	ip, #1
 8000a2c:	e002      	b.n	8000a34 <__cmpsf2+0x4>
 8000a2e:	bf00      	nop

08000a30 <__cmpsf2>:
 8000a30:	f04f 0c01 	mov.w	ip, #1
 8000a34:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a38:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a44:	bf18      	it	ne
 8000a46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a4a:	d011      	beq.n	8000a70 <__cmpsf2+0x40>
 8000a4c:	b001      	add	sp, #4
 8000a4e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a52:	bf18      	it	ne
 8000a54:	ea90 0f01 	teqne	r0, r1
 8000a58:	bf58      	it	pl
 8000a5a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a5e:	bf88      	it	hi
 8000a60:	17c8      	asrhi	r0, r1, #31
 8000a62:	bf38      	it	cc
 8000a64:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a68:	bf18      	it	ne
 8000a6a:	f040 0001 	orrne.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a74:	d102      	bne.n	8000a7c <__cmpsf2+0x4c>
 8000a76:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a7a:	d105      	bne.n	8000a88 <__cmpsf2+0x58>
 8000a7c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a80:	d1e4      	bne.n	8000a4c <__cmpsf2+0x1c>
 8000a82:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a86:	d0e1      	beq.n	8000a4c <__cmpsf2+0x1c>
 8000a88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <__aeabi_cfrcmple>:
 8000a90:	4684      	mov	ip, r0
 8000a92:	4608      	mov	r0, r1
 8000a94:	4661      	mov	r1, ip
 8000a96:	e7ff      	b.n	8000a98 <__aeabi_cfcmpeq>

08000a98 <__aeabi_cfcmpeq>:
 8000a98:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a9a:	f7ff ffc9 	bl	8000a30 <__cmpsf2>
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	bf48      	it	mi
 8000aa2:	f110 0f00 	cmnmi.w	r0, #0
 8000aa6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000aa8 <__aeabi_fcmpeq>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff fff4 	bl	8000a98 <__aeabi_cfcmpeq>
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2001      	moveq	r0, #1
 8000ab4:	2000      	movne	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_fcmplt>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffea 	bl	8000a98 <__aeabi_cfcmpeq>
 8000ac4:	bf34      	ite	cc
 8000ac6:	2001      	movcc	r0, #1
 8000ac8:	2000      	movcs	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fcmple>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffe0 	bl	8000a98 <__aeabi_cfcmpeq>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_fcmpge>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffd2 	bl	8000a90 <__aeabi_cfrcmple>
 8000aec:	bf94      	ite	ls
 8000aee:	2001      	movls	r0, #1
 8000af0:	2000      	movhi	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_fcmpgt>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffc8 	bl	8000a90 <__aeabi_cfrcmple>
 8000b00:	bf34      	ite	cc
 8000b02:	2001      	movcc	r0, #1
 8000b04:	2000      	movcs	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_f2iz>:
 8000b0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b10:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b14:	d30f      	bcc.n	8000b36 <__aeabi_f2iz+0x2a>
 8000b16:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_f2iz+0x30>
 8000b20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b28:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b30:	bf18      	it	ne
 8000b32:	4240      	negne	r0, r0
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	4770      	bx	lr
 8000b3c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b40:	d101      	bne.n	8000b46 <__aeabi_f2iz+0x3a>
 8000b42:	0242      	lsls	r2, r0, #9
 8000b44:	d105      	bne.n	8000b52 <__aeabi_f2iz+0x46>
 8000b46:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b4a:	bf08      	it	eq
 8000b4c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_f2uiz>:
 8000b58:	0042      	lsls	r2, r0, #1
 8000b5a:	d20e      	bcs.n	8000b7a <__aeabi_f2uiz+0x22>
 8000b5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b60:	d30b      	bcc.n	8000b7a <__aeabi_f2uiz+0x22>
 8000b62:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b6a:	d409      	bmi.n	8000b80 <__aeabi_f2uiz+0x28>
 8000b6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b74:	fa23 f002 	lsr.w	r0, r3, r2
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr
 8000b80:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b84:	d101      	bne.n	8000b8a <__aeabi_f2uiz+0x32>
 8000b86:	0242      	lsls	r2, r0, #9
 8000b88:	d102      	bne.n	8000b90 <__aeabi_f2uiz+0x38>
 8000b8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <main>:





int main(void){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	enableClk();
 8000b9c:	f000 f870 	bl	8000c80 <enableClk>
	configureIO();
 8000ba0:	f000 f854 	bl	8000c4c <configureIO>


	initADC1();
 8000ba4:	f000 f892 	bl	8000ccc <initADC1>
	initADC2();
 8000ba8:	f000 f8e8 	bl	8000d7c <initADC2>
	initPWM();
 8000bac:	f000 fa44 	bl	8001038 <initPWM>

	 Kp = 1;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <main+0x94>)
 8000bb2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000bb6:	601a      	str	r2, [r3, #0]
	 Ki = 1.4;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <main+0x98>)
 8000bba:	4a1e      	ldr	r2, [pc, #120]	@ (8000c34 <main+0x9c>)
 8000bbc:	601a      	str	r2, [r3, #0]
	 Kd = 1.2;
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000c38 <main+0xa0>)
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	@ (8000c3c <main+0xa4>)
 8000bc2:	601a      	str	r2, [r3, #0]

while (1) {



	switch (FT){
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <main+0xa8>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00a      	beq.n	8000be2 <main+0x4a>
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d000      	beq.n	8000bd2 <main+0x3a>

		 	 case 0 : break;

		 	 case 1 : freeMotor(); FT =0 ; CAL(); break;

		 	 default : break;
 8000bd0:	e008      	b.n	8000be4 <main+0x4c>
		 	 case 1 : freeMotor(); FT =0 ; CAL(); break;
 8000bd2:	f000 fa23 	bl	800101c <freeMotor>
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <main+0xa8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	f000 faac 	bl	8001138 <CAL>
 8000be0:	e000      	b.n	8000be4 <main+0x4c>
		 	 case 0 : break;
 8000be2:	bf00      	nop
		 }

	 ref = getADCVal(0);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f000 f9ab 	bl	8000f40 <getADCVal>
 8000bea:	4603      	mov	r3, r0
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <main+0xac>)
 8000bf0:	601a      	str	r2, [r3, #0]

	 curr = getcurrentPosition();
 8000bf2:	f000 fa99 	bl	8001128 <getcurrentPosition>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4a13      	ldr	r2, [pc, #76]	@ (8000c48 <main+0xb0>)
 8000bfa:	6013      	str	r3, [r2, #0]

	 if (ref > LOWER_LIMIT ||  ref < UPPER_LIMIT || curr != ref){
 8000bfc:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <main+0xac>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f240 421a 	movw	r2, #1050	@ 0x41a
 8000c04:	4293      	cmp	r3, r2
 8000c06:	dc0b      	bgt.n	8000c20 <main+0x88>
 8000c08:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <main+0xac>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f640 5247 	movw	r2, #3399	@ 0xd47
 8000c10:	4293      	cmp	r3, r2
 8000c12:	dd05      	ble.n	8000c20 <main+0x88>
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <main+0xb0>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <main+0xac>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d001      	beq.n	8000c24 <main+0x8c>

		 PIDController();
 8000c20:	f000 faaa 	bl	8001178 <PIDController>

	 }

	 delay(50);
 8000c24:	2032      	movs	r0, #50	@ 0x32
 8000c26:	f000 f95d 	bl	8000ee4 <delay>
	switch (FT){
 8000c2a:	e7cb      	b.n	8000bc4 <main+0x2c>
 8000c2c:	20000020 	.word	0x20000020
 8000c30:	20000024 	.word	0x20000024
 8000c34:	3fb33333 	.word	0x3fb33333
 8000c38:	20000028 	.word	0x20000028
 8000c3c:	3f99999a 	.word	0x3f99999a
 8000c40:	20000000 	.word	0x20000000
 8000c44:	2000003c 	.word	0x2000003c
 8000c48:	20000040 	.word	0x20000040

08000c4c <configureIO>:
}
}



void configureIO(){
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
	 * HBridge ENB => B9
	 * CAL Button => B14
	 *
	 * */

	GPIOA -> CRL = 0x244440A0;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <configureIO+0x20>)
 8000c52:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <configureIO+0x24>)
 8000c54:	601a      	str	r2, [r3, #0]
	GPIOB -> CRL = 0x24444444;
 8000c56:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <configureIO+0x28>)
 8000c58:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <configureIO+0x2c>)
 8000c5a:	601a      	str	r2, [r3, #0]
	GPIOB -> CRH = 0x48244222;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <configureIO+0x28>)
 8000c5e:	4a07      	ldr	r2, [pc, #28]	@ (8000c7c <configureIO+0x30>)
 8000c60:	605a      	str	r2, [r3, #4]


}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40010800 	.word	0x40010800
 8000c70:	244440a0 	.word	0x244440a0
 8000c74:	40010c00 	.word	0x40010c00
 8000c78:	24444444 	.word	0x24444444
 8000c7c:	48244222 	.word	0x48244222

08000c80 <enableClk>:

void enableClk(){
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000c84:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <enableClk+0x48>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc8 <enableClk+0x48>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6193      	str	r3, [r2, #24]
	RCC -> APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000c90:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <enableClk+0x48>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc8 <enableClk+0x48>)
 8000c96:	f043 0308 	orr.w	r3, r3, #8
 8000c9a:	6193      	str	r3, [r2, #24]
	RCC -> APB1ENR |= 0b11; //enable TIM2 & TIM3
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <enableClk+0x48>)
 8000c9e:	69db      	ldr	r3, [r3, #28]
 8000ca0:	4a09      	ldr	r2, [pc, #36]	@ (8000cc8 <enableClk+0x48>)
 8000ca2:	f043 0303 	orr.w	r3, r3, #3
 8000ca6:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <enableClk+0x48>)
 8000caa:	69db      	ldr	r3, [r3, #28]
 8000cac:	4a06      	ldr	r2, [pc, #24]	@ (8000cc8 <enableClk+0x48>)
 8000cae:	f043 0302 	orr.w	r3, r3, #2
 8000cb2:	61d3      	str	r3, [r2, #28]
	RCC -> APB2ENR |= (1 << 9) | (1 << 10); // enable CLK for ADC1
 8000cb4:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <enableClk+0x48>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a03      	ldr	r2, [pc, #12]	@ (8000cc8 <enableClk+0x48>)
 8000cba:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8000cbe:	6193      	str	r3, [r2, #24]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	40021000 	.word	0x40021000

08000ccc <initADC1>:


void initADC1(){
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0

		ADC1->SQR1 = 0x00000000;  // Reset SQR1 (sequence length = 1 by default)
 8000cd2:	4b29      	ldr	r3, [pc, #164]	@ (8000d78 <initADC1+0xac>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
		ADC1->SQR3 = 0; // Channel 0 first in the sequence
 8000cd8:	4b27      	ldr	r3, [pc, #156]	@ (8000d78 <initADC1+0xac>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	635a      	str	r2, [r3, #52]	@ 0x34
		ADC1 -> SMPR2 &= 0; // reseting the sample time
 8000cde:	4b26      	ldr	r3, [pc, #152]	@ (8000d78 <initADC1+0xac>)
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	4b25      	ldr	r3, [pc, #148]	@ (8000d78 <initADC1+0xac>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
		ADC1->SMPR2 |= (0b010 << 0); // Channel 0 7.5 cycles
 8000ce8:	4b23      	ldr	r3, [pc, #140]	@ (8000d78 <initADC1+0xac>)
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	4a22      	ldr	r2, [pc, #136]	@ (8000d78 <initADC1+0xac>)
 8000cee:	f043 0302 	orr.w	r3, r3, #2
 8000cf2:	6113      	str	r3, [r2, #16]

		ADC1->CR2 |= ADC_CR2_ADON; // ADC on
 8000cf4:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <initADC1+0xac>)
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d78 <initADC1+0xac>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	6093      	str	r3, [r2, #8]
		for (volatile int i = 0; i < 10000; i++);  // Short delay
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	e002      	b.n	8000d0c <initADC1+0x40>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d12:	4293      	cmp	r3, r2
 8000d14:	ddf7      	ble.n	8000d06 <initADC1+0x3a>

		ADC1->CR2 |= ADC_CR2_CAL;          // Start calibration
 8000d16:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <initADC1+0xac>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	4a17      	ldr	r2, [pc, #92]	@ (8000d78 <initADC1+0xac>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6093      	str	r3, [r2, #8]
		while (ADC1->CR2 & ADC_CR2_CAL);   // Wait for calibration to finish
 8000d22:	bf00      	nop
 8000d24:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <initADC1+0xac>)
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1f9      	bne.n	8000d24 <initADC1+0x58>

		ADC1->CR2 |= ADC_CR2_EXTTRIG;  // Enable external trigger
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <initADC1+0xac>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	4a10      	ldr	r2, [pc, #64]	@ (8000d78 <initADC1+0xac>)
 8000d36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d3a:	6093      	str	r3, [r2, #8]

		ADC1->CR2 &= ~ADC_CR2_EXTSEL;       // Clear EXTSEL bits
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <initADC1+0xac>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	@ (8000d78 <initADC1+0xac>)
 8000d42:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8000d46:	6093      	str	r3, [r2, #8]
		ADC1->CR2 |= (0b111 << 17);         // Set EXTSEL = 111 for SWSTART
 8000d48:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <initADC1+0xac>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <initADC1+0xac>)
 8000d4e:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 8000d52:	6093      	str	r3, [r2, #8]

		ADC1->CR2 &= ~ADC_CR2_CONT;  // Clear CONT bit for single conversion mode
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <initADC1+0xac>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	4a07      	ldr	r2, [pc, #28]	@ (8000d78 <initADC1+0xac>)
 8000d5a:	f023 0302 	bic.w	r3, r3, #2
 8000d5e:	6093      	str	r3, [r2, #8]

		ADC1->CR2 &= ~ADC_CR2_ALIGN;  // 0 = Right alignment (default)
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <initADC1+0xac>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	4a04      	ldr	r2, [pc, #16]	@ (8000d78 <initADC1+0xac>)
 8000d66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000d6a:	6093      	str	r3, [r2, #8]

}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40012400 	.word	0x40012400

08000d7c <initADC2>:


void initADC2(){
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0

		ADC2->SQR1 = 0x00000000;  // Reset SQR1 (sequence length = 1 by default)
 8000d82:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <initADC2+0xac>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	62da      	str	r2, [r3, #44]	@ 0x2c
		ADC2->SQR3 = 2; // Channel 2
 8000d88:	4b27      	ldr	r3, [pc, #156]	@ (8000e28 <initADC2+0xac>)
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	635a      	str	r2, [r3, #52]	@ 0x34
		ADC2 -> SMPR2 &= 0; // reseting the sample time
 8000d8e:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <initADC2+0xac>)
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	4b25      	ldr	r3, [pc, #148]	@ (8000e28 <initADC2+0xac>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
		ADC2->SMPR2 |= (0b010 << 6); // Channel 2 7.5 cycles
 8000d98:	4b23      	ldr	r3, [pc, #140]	@ (8000e28 <initADC2+0xac>)
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	4a22      	ldr	r2, [pc, #136]	@ (8000e28 <initADC2+0xac>)
 8000d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da2:	6113      	str	r3, [r2, #16]

		ADC2->CR2 |= ADC_CR2_ADON; // ADC on
 8000da4:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <initADC2+0xac>)
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e28 <initADC2+0xac>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6093      	str	r3, [r2, #8]
		for (volatile int i = 0; i < 10000; i++);  // Short delay
 8000db0:	2300      	movs	r3, #0
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	e002      	b.n	8000dbc <initADC2+0x40>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3301      	adds	r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	ddf7      	ble.n	8000db6 <initADC2+0x3a>

		ADC2->CR2 |= ADC_CR2_CAL;          // Start calibration
 8000dc6:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <initADC2+0xac>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	4a17      	ldr	r2, [pc, #92]	@ (8000e28 <initADC2+0xac>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	6093      	str	r3, [r2, #8]
		while (ADC2->CR2 & ADC_CR2_CAL);   // Wait for calibration to finish
 8000dd2:	bf00      	nop
 8000dd4:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <initADC2+0xac>)
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1f9      	bne.n	8000dd4 <initADC2+0x58>

		ADC2->CR2 |= ADC_CR2_EXTTRIG;  // Enable external trigger
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <initADC2+0xac>)
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	4a10      	ldr	r2, [pc, #64]	@ (8000e28 <initADC2+0xac>)
 8000de6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000dea:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_EXTSEL;       // Clear EXTSEL bits
 8000dec:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <initADC2+0xac>)
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e28 <initADC2+0xac>)
 8000df2:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8000df6:	6093      	str	r3, [r2, #8]
		ADC2->CR2 |= (0b111 << 17);         // Set EXTSEL = 111 for SWSTART
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <initADC2+0xac>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <initADC2+0xac>)
 8000dfe:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 8000e02:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_CONT;  // Clear CONT bit for single conversion mode
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <initADC2+0xac>)
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	4a07      	ldr	r2, [pc, #28]	@ (8000e28 <initADC2+0xac>)
 8000e0a:	f023 0302 	bic.w	r3, r3, #2
 8000e0e:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_ALIGN;  // 0 = Right alignment (default)
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <initADC2+0xac>)
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <initADC2+0xac>)
 8000e16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000e1a:	6093      	str	r3, [r2, #8]

}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40012800 	.word	0x40012800

08000e2c <turnON>:

void turnON(uint8_t i){
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]


	switch (i){
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d014      	beq.n	8000e66 <turnON+0x3a>
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	dc19      	bgt.n	8000e74 <turnON+0x48>
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d002      	beq.n	8000e4a <turnON+0x1e>
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d007      	beq.n	8000e58 <turnON+0x2c>

		case 0: GPIOA ->ODR |= (1 << 7);  return; // Blue indicates reached goal
		case 1: GPIOB ->ODR |= (1 << 10); return; // Red indicates still processing
		case 2: GPIOB ->ODR |= (1 << 13); return; // Green indicates CAL for first time

		default: break;
 8000e48:	e014      	b.n	8000e74 <turnON+0x48>
		case 0: GPIOA ->ODR |= (1 << 7);  return; // Blue indicates reached goal
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e80 <turnON+0x54>)
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e80 <turnON+0x54>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e54:	60d3      	str	r3, [r2, #12]
 8000e56:	e00e      	b.n	8000e76 <turnON+0x4a>
		case 1: GPIOB ->ODR |= (1 << 10); return; // Red indicates still processing
 8000e58:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <turnON+0x58>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	4a09      	ldr	r2, [pc, #36]	@ (8000e84 <turnON+0x58>)
 8000e5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e62:	60d3      	str	r3, [r2, #12]
 8000e64:	e007      	b.n	8000e76 <turnON+0x4a>
		case 2: GPIOB ->ODR |= (1 << 13); return; // Green indicates CAL for first time
 8000e66:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <turnON+0x58>)
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	4a06      	ldr	r2, [pc, #24]	@ (8000e84 <turnON+0x58>)
 8000e6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e70:	60d3      	str	r3, [r2, #12]
 8000e72:	e000      	b.n	8000e76 <turnON+0x4a>
		default: break;
 8000e74:	bf00      	nop
	}
}
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40010800 	.word	0x40010800
 8000e84:	40010c00 	.word	0x40010c00

08000e88 <turnOFF>:

void turnOFF(uint8_t i){
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]


	switch (i){
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d014      	beq.n	8000ec2 <turnOFF+0x3a>
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	dc19      	bgt.n	8000ed0 <turnOFF+0x48>
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <turnOFF+0x1e>
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d007      	beq.n	8000eb4 <turnOFF+0x2c>

		case 0: GPIOA ->ODR &= ~(1 << 7);  return;
		case 1: GPIOB ->ODR &= ~(1 << 10); return;
		case 2: GPIOB ->ODR &= ~(1 << 13); return;

		default: break;
 8000ea4:	e014      	b.n	8000ed0 <turnOFF+0x48>
		case 0: GPIOA ->ODR &= ~(1 << 7);  return;
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <turnOFF+0x54>)
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8000edc <turnOFF+0x54>)
 8000eac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000eb0:	60d3      	str	r3, [r2, #12]
 8000eb2:	e00e      	b.n	8000ed2 <turnOFF+0x4a>
		case 1: GPIOB ->ODR &= ~(1 << 10); return;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <turnOFF+0x58>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	4a09      	ldr	r2, [pc, #36]	@ (8000ee0 <turnOFF+0x58>)
 8000eba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000ebe:	60d3      	str	r3, [r2, #12]
 8000ec0:	e007      	b.n	8000ed2 <turnOFF+0x4a>
		case 2: GPIOB ->ODR &= ~(1 << 13); return;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <turnOFF+0x58>)
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	4a06      	ldr	r2, [pc, #24]	@ (8000ee0 <turnOFF+0x58>)
 8000ec8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000ecc:	60d3      	str	r3, [r2, #12]
 8000ece:	e000      	b.n	8000ed2 <turnOFF+0x4a>
		default: break;
 8000ed0:	bf00      	nop
	}
}
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40010800 	.word	0x40010800
 8000ee0:	40010c00 	.word	0x40010c00

08000ee4 <delay>:



void delay(uint16_t t){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	80fb      	strh	r3, [r7, #6]
	TIM3 ->PSC = 8000-1;
 8000eee:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <delay+0x58>)
 8000ef0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000ef4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3 ->ARR = t-1;
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	1e5a      	subs	r2, r3, #1
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <delay+0x58>)
 8000efc:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3 ->CR1 |= TIM_CR1_CEN;
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <delay+0x58>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a0e      	ldr	r2, [pc, #56]	@ (8000f3c <delay+0x58>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6013      	str	r3, [r2, #0]
	while(!(TIM3->SR & TIM_SR_UIF));
 8000f0a:	bf00      	nop
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <delay+0x58>)
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0f9      	beq.n	8000f0c <delay+0x28>
	TIM3->SR &= ~TIM_SR_UIF;
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <delay+0x58>)
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	@ (8000f3c <delay+0x58>)
 8000f1e:	f023 0301 	bic.w	r3, r3, #1
 8000f22:	6113      	str	r3, [r2, #16]
	TIM3 ->CR1 &= ~(TIM_CR1_CEN);
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <delay+0x58>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a04      	ldr	r2, [pc, #16]	@ (8000f3c <delay+0x58>)
 8000f2a:	f023 0301 	bic.w	r3, r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40000400 	.word	0x40000400

08000f40 <getADCVal>:

uint16_t getADCVal(uint8_t i){
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
	if (i ==0){
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d117      	bne.n	8000f80 <getADCVal+0x40>
		ADC1->CR2 |= ADC_CR2_SWSTART; // start conversion
 8000f50:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <getADCVal+0x78>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	4a18      	ldr	r2, [pc, #96]	@ (8000fb8 <getADCVal+0x78>)
 8000f56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f5a:	6093      	str	r3, [r2, #8]
			while (!(ADC1->SR & ADC_SR_EOC));     // Wait for conversion complete
 8000f5c:	bf00      	nop
 8000f5e:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <getADCVal+0x78>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0f9      	beq.n	8000f5e <getADCVal+0x1e>
			ADC1->SR &= ~(ADC_SR_EOC);
 8000f6a:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <getADCVal+0x78>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a12      	ldr	r2, [pc, #72]	@ (8000fb8 <getADCVal+0x78>)
 8000f70:	f023 0302 	bic.w	r3, r3, #2
 8000f74:	6013      	str	r3, [r2, #0]
			uint16_t ADCVal = ADC1->DR;  // Read result (10-bit mask)
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <getADCVal+0x78>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7a:	81bb      	strh	r3, [r7, #12]
			return ADCVal;
 8000f7c:	89bb      	ldrh	r3, [r7, #12]
 8000f7e:	e016      	b.n	8000fae <getADCVal+0x6e>
	}
	else {
		ADC2->CR2 |= ADC_CR2_SWSTART; // start conversion
 8000f80:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <getADCVal+0x7c>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <getADCVal+0x7c>)
 8000f86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f8a:	6093      	str	r3, [r2, #8]
		while (!(ADC2->SR & ADC_SR_EOC));     // Wait for conversion complete
 8000f8c:	bf00      	nop
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <getADCVal+0x7c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f9      	beq.n	8000f8e <getADCVal+0x4e>
		ADC2->SR &= ~(ADC_SR_EOC);
 8000f9a:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <getADCVal+0x7c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a07      	ldr	r2, [pc, #28]	@ (8000fbc <getADCVal+0x7c>)
 8000fa0:	f023 0302 	bic.w	r3, r3, #2
 8000fa4:	6013      	str	r3, [r2, #0]
		uint16_t ADCVal = ADC2->DR;  // Read result (10-bit mask)
 8000fa6:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <getADCVal+0x7c>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000faa:	81fb      	strh	r3, [r7, #14]
		return ADCVal;
 8000fac:	89fb      	ldrh	r3, [r7, #14]
	}


}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	40012400 	.word	0x40012400
 8000fbc:	40012800 	.word	0x40012800

08000fc0 <setRotationDir>:

void setRotationDir(uint8_t i){
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	switch(i){
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d002      	beq.n	8000fd6 <setRotationDir+0x16>
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d007      	beq.n	8000fe4 <setRotationDir+0x24>
		case 0 : GPIOB -> ODR |= (1 << 7) ;break; // Counter CLockwise
		case 1 : GPIOB -> ODR |= (1 << 8) ;break; // CLockwise
		default: break;
 8000fd4:	e00d      	b.n	8000ff2 <setRotationDir+0x32>
		case 0 : GPIOB -> ODR |= (1 << 7) ;break; // Counter CLockwise
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <setRotationDir+0x3c>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	4a08      	ldr	r2, [pc, #32]	@ (8000ffc <setRotationDir+0x3c>)
 8000fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fe0:	60d3      	str	r3, [r2, #12]
 8000fe2:	e006      	b.n	8000ff2 <setRotationDir+0x32>
		case 1 : GPIOB -> ODR |= (1 << 8) ;break; // CLockwise
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <setRotationDir+0x3c>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	4a04      	ldr	r2, [pc, #16]	@ (8000ffc <setRotationDir+0x3c>)
 8000fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fee:	60d3      	str	r3, [r2, #12]
 8000ff0:	bf00      	nop
	}
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	40010c00 	.word	0x40010c00

08001000 <pressBreak>:


void pressBreak(){
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
	GPIOB->ODR |= (1 << 7) | (1 << 8);
 8001004:	4b04      	ldr	r3, [pc, #16]	@ (8001018 <pressBreak+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	4a03      	ldr	r2, [pc, #12]	@ (8001018 <pressBreak+0x18>)
 800100a:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800100e:	60d3      	str	r3, [r2, #12]

}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	40010c00 	.word	0x40010c00

0800101c <freeMotor>:


void freeMotor(){
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~((1 << 7) | (1 << 8));
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <freeMotor+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	4a03      	ldr	r2, [pc, #12]	@ (8001034 <freeMotor+0x18>)
 8001026:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	40010c00 	.word	0x40010c00

08001038 <initPWM>:

void initPWM(){
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
	RCC ->APB1ENR |= RCC_APB1ENR_TIM2EN; //enable Timer
 800103c:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <initPWM+0x94>)
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	4a22      	ldr	r2, [pc, #136]	@ (80010cc <initPWM+0x94>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	61d3      	str	r3, [r2, #28]

	TIM2 -> PSC = 8 - 1;
 8001048:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800104c:	2207      	movs	r2, #7
 800104e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2 -> ARR = 1000 - 1;
 8001050:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001054:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001058:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CCMR1 |= (6 << 12); // mode 1 for ch2
 800105a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001064:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001068:	6193      	str	r3, [r2, #24]

	TIM2 -> CCR2 = 0; //duty Cycle =0
 800106a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800106e:	2200      	movs	r2, #0
 8001070:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM2->CCMR1 |= TIM_CCMR1_OC1PE; // Enable preload
 8001072:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800107c:	f043 0308 	orr.w	r3, r3, #8
 8001080:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= TIM_CCER_CC2E;    // Enable output for CH1
 8001082:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800108c:	f043 0310 	orr.w	r3, r3, #16
 8001090:	6213      	str	r3, [r2, #32]

	TIM2->CR1 |= TIM_CR1_ARPE;   // Enable auto-reload Preload
 8001092:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800109c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010a0:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= TIM_EGR_UG;     // Force update to load registers
 80010a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6153      	str	r3, [r2, #20]

	TIM2->CR1 |= TIM_CR1_CEN;    // Enable timer
 80010b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6013      	str	r3, [r2, #0]

}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000

080010d0 <writePWM>:

void writePWM (float dutyCycle){
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	if (dutyCycle > 100){
 80010d8:	4912      	ldr	r1, [pc, #72]	@ (8001124 <writePWM+0x54>)
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fd0c 	bl	8000af8 <__aeabi_fcmpgt>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <writePWM+0x1a>
		dutyCycle = 100;
 80010e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <writePWM+0x54>)
 80010e8:	607b      	str	r3, [r7, #4]
	}

	TIM2 -> CCR2 = (TIM2->ARR + 1) * dutyCycle / 100;
 80010ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f0:	3301      	adds	r3, #1
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff faec 	bl	80006d0 <__aeabi_ui2f>
 80010f8:	4603      	mov	r3, r0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fb3f 	bl	8000780 <__aeabi_fmul>
 8001102:	4603      	mov	r3, r0
 8001104:	4907      	ldr	r1, [pc, #28]	@ (8001124 <writePWM+0x54>)
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fbee 	bl	80008e8 <__aeabi_fdiv>
 800110c:	4603      	mov	r3, r0
 800110e:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fd20 	bl	8000b58 <__aeabi_f2uiz>
 8001118:	4603      	mov	r3, r0
 800111a:	63a3      	str	r3, [r4, #56]	@ 0x38

}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}
 8001124:	42c80000 	.word	0x42c80000

08001128 <getcurrentPosition>:
		writePWM(dutyCycle);
	}
	turnOFF(motorIndex);
}

int getcurrentPosition(){
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0

	return getADCVal(1);
 800112c:	2001      	movs	r0, #1
 800112e:	f7ff ff07 	bl	8000f40 <getADCVal>
 8001132:	4603      	mov	r3, r0

}
 8001134:	4618      	mov	r0, r3
 8001136:	bd80      	pop	{r7, pc}

08001138 <CAL>:

void CAL(){
 8001138:	b598      	push	{r3, r4, r7, lr}
 800113a:	af00      	add	r7, sp, #0
	while (!(GPIOB -> IDR & 1 << 14) ){ // exit CAL
 800113c:	e011      	b.n	8001162 <CAL+0x2a>
		if (getADCVal(1) != getADCVal(0)){
 800113e:	2001      	movs	r0, #1
 8001140:	f7ff fefe 	bl	8000f40 <getADCVal>
 8001144:	4603      	mov	r3, r0
 8001146:	461c      	mov	r4, r3
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff fef9 	bl	8000f40 <getADCVal>
 800114e:	4603      	mov	r3, r0
 8001150:	429c      	cmp	r4, r3
 8001152:	d003      	beq.n	800115c <CAL+0x24>
			turnOFF(2);
 8001154:	2002      	movs	r0, #2
 8001156:	f7ff fe97 	bl	8000e88 <turnOFF>
 800115a:	e002      	b.n	8001162 <CAL+0x2a>
		}
		else {
			turnON(2);
 800115c:	2002      	movs	r0, #2
 800115e:	f7ff fe65 	bl	8000e2c <turnON>
	while (!(GPIOB -> IDR & 1 << 14) ){ // exit CAL
 8001162:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <CAL+0x3c>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0e7      	beq.n	800113e <CAL+0x6>
		}
	}
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	bd98      	pop	{r3, r4, r7, pc}
 8001174:	40010c00 	.word	0x40010c00

08001178 <PIDController>:


// PID -> u(t) = Kp * E(t) + Ki * ∫E(t)dt + Kd * dE(t)/dt

void PIDController(){
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
	uint8_t count = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	71fb      	strb	r3, [r7, #7]
    while ((abs(ref - curr) > TOLERANCE && count++ < 200)){
 8001182:	e0d0      	b.n	8001326 <PIDController+0x1ae>

        curr = getcurrentPosition();
 8001184:	f7ff ffd0 	bl	8001128 <getcurrentPosition>
 8001188:	4603      	mov	r3, r0
 800118a:	4a75      	ldr	r2, [pc, #468]	@ (8001360 <PIDController+0x1e8>)
 800118c:	6013      	str	r3, [r2, #0]

        // Enforce limits
        if ((curr <= LOWER_LIMIT && (ref - curr) < 0) ||
 800118e:	4b74      	ldr	r3, [pc, #464]	@ (8001360 <PIDController+0x1e8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f240 421a 	movw	r2, #1050	@ 0x41a
 8001196:	4293      	cmp	r3, r2
 8001198:	dc06      	bgt.n	80011a8 <PIDController+0x30>
 800119a:	4b72      	ldr	r3, [pc, #456]	@ (8001364 <PIDController+0x1ec>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b70      	ldr	r3, [pc, #448]	@ (8001360 <PIDController+0x1e8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db18      	blt.n	80011da <PIDController+0x62>
            (curr >= UPPER_LIMIT && (ref - curr) > 0) || curr < LOWER_LIMIT ||  curr > UPPER_LIMIT) {
 80011a8:	4b6d      	ldr	r3, [pc, #436]	@ (8001360 <PIDController+0x1e8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
        if ((curr <= LOWER_LIMIT && (ref - curr) < 0) ||
 80011ac:	f640 5247 	movw	r2, #3399	@ 0xd47
 80011b0:	4293      	cmp	r3, r2
 80011b2:	dd06      	ble.n	80011c2 <PIDController+0x4a>
            (curr >= UPPER_LIMIT && (ref - curr) > 0) || curr < LOWER_LIMIT ||  curr > UPPER_LIMIT) {
 80011b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001364 <PIDController+0x1ec>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b69      	ldr	r3, [pc, #420]	@ (8001360 <PIDController+0x1e8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	dc0b      	bgt.n	80011da <PIDController+0x62>
 80011c2:	4b67      	ldr	r3, [pc, #412]	@ (8001360 <PIDController+0x1e8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f240 4219 	movw	r2, #1049	@ 0x419
 80011ca:	4293      	cmp	r3, r2
 80011cc:	dd05      	ble.n	80011da <PIDController+0x62>
 80011ce:	4b64      	ldr	r3, [pc, #400]	@ (8001360 <PIDController+0x1e8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f640 5248 	movw	r2, #3400	@ 0xd48
 80011d6:	4293      	cmp	r3, r2
 80011d8:	dd08      	ble.n	80011ec <PIDController+0x74>
            pressBreak(); // Immediate stop
 80011da:	f7ff ff11 	bl	8001000 <pressBreak>
            turnON(1);     // RED LED: indicates Dead END
 80011de:	2001      	movs	r0, #1
 80011e0:	f7ff fe24 	bl	8000e2c <turnON>
            turnOFF(0);    // Turn off Blue LED
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fe4f 	bl	8000e88 <turnOFF>
            return;
 80011ea:	e0b6      	b.n	800135a <PIDController+0x1e2>
        }

        if (errIntegral > 1000) errIntegral = 1000;
 80011ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001368 <PIDController+0x1f0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011f4:	dd04      	ble.n	8001200 <PIDController+0x88>
 80011f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001368 <PIDController+0x1f0>)
 80011f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	e007      	b.n	8001210 <PIDController+0x98>
        else if (errIntegral < -1000) errIntegral = -1000;
 8001200:	4b59      	ldr	r3, [pc, #356]	@ (8001368 <PIDController+0x1f0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001208:	da02      	bge.n	8001210 <PIDController+0x98>
 800120a:	4b57      	ldr	r3, [pc, #348]	@ (8001368 <PIDController+0x1f0>)
 800120c:	4a57      	ldr	r2, [pc, #348]	@ (800136c <PIDController+0x1f4>)
 800120e:	601a      	str	r2, [r3, #0]


        turnON(1); // RED for processing
 8001210:	2001      	movs	r0, #1
 8001212:	f7ff fe0b 	bl	8000e2c <turnON>
        turnOFF(0);
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff fe36 	bl	8000e88 <turnOFF>

        err = ref - curr;
 800121c:	4b51      	ldr	r3, [pc, #324]	@ (8001364 <PIDController+0x1ec>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b4f      	ldr	r3, [pc, #316]	@ (8001360 <PIDController+0x1e8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	4a52      	ldr	r2, [pc, #328]	@ (8001370 <PIDController+0x1f8>)
 8001228:	6013      	str	r3, [r2, #0]
        errIntegral += err;
 800122a:	4b4f      	ldr	r3, [pc, #316]	@ (8001368 <PIDController+0x1f0>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b50      	ldr	r3, [pc, #320]	@ (8001370 <PIDController+0x1f8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a4c      	ldr	r2, [pc, #304]	@ (8001368 <PIDController+0x1f0>)
 8001236:	6013      	str	r3, [r2, #0]
        errDerivative = err - prevErr;
 8001238:	4b4d      	ldr	r3, [pc, #308]	@ (8001370 <PIDController+0x1f8>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b4d      	ldr	r3, [pc, #308]	@ (8001374 <PIDController+0x1fc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	4a4d      	ldr	r2, [pc, #308]	@ (8001378 <PIDController+0x200>)
 8001244:	6013      	str	r3, [r2, #0]
        prevErr = err;
 8001246:	4b4a      	ldr	r3, [pc, #296]	@ (8001370 <PIDController+0x1f8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a4a      	ldr	r2, [pc, #296]	@ (8001374 <PIDController+0x1fc>)
 800124c:	6013      	str	r3, [r2, #0]

        if (abs(err) <= TOLERANCE) break;
 800124e:	4b48      	ldr	r3, [pc, #288]	@ (8001370 <PIDController+0x1f8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f113 0f23 	cmn.w	r3, #35	@ 0x23
 8001256:	db03      	blt.n	8001260 <PIDController+0xe8>
 8001258:	4b45      	ldr	r3, [pc, #276]	@ (8001370 <PIDController+0x1f8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b23      	cmp	r3, #35	@ 0x23
 800125e:	dd73      	ble.n	8001348 <PIDController+0x1d0>

        u = Kp * err + Ki * errIntegral + Kd * errDerivative;
 8001260:	4b43      	ldr	r3, [pc, #268]	@ (8001370 <PIDController+0x1f8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fa37 	bl	80006d8 <__aeabi_i2f>
 800126a:	4602      	mov	r2, r0
 800126c:	4b43      	ldr	r3, [pc, #268]	@ (800137c <PIDController+0x204>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	4610      	mov	r0, r2
 8001274:	f7ff fa84 	bl	8000780 <__aeabi_fmul>
 8001278:	4603      	mov	r3, r0
 800127a:	461c      	mov	r4, r3
 800127c:	4b3a      	ldr	r3, [pc, #232]	@ (8001368 <PIDController+0x1f0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fa29 	bl	80006d8 <__aeabi_i2f>
 8001286:	4602      	mov	r2, r0
 8001288:	4b3d      	ldr	r3, [pc, #244]	@ (8001380 <PIDController+0x208>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	4610      	mov	r0, r2
 8001290:	f7ff fa76 	bl	8000780 <__aeabi_fmul>
 8001294:	4603      	mov	r3, r0
 8001296:	4619      	mov	r1, r3
 8001298:	4620      	mov	r0, r4
 800129a:	f7ff f969 	bl	8000570 <__addsf3>
 800129e:	4603      	mov	r3, r0
 80012a0:	461c      	mov	r4, r3
 80012a2:	4b35      	ldr	r3, [pc, #212]	@ (8001378 <PIDController+0x200>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fa16 	bl	80006d8 <__aeabi_i2f>
 80012ac:	4602      	mov	r2, r0
 80012ae:	4b35      	ldr	r3, [pc, #212]	@ (8001384 <PIDController+0x20c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4619      	mov	r1, r3
 80012b4:	4610      	mov	r0, r2
 80012b6:	f7ff fa63 	bl	8000780 <__aeabi_fmul>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4619      	mov	r1, r3
 80012be:	4620      	mov	r0, r4
 80012c0:	f7ff f956 	bl	8000570 <__addsf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fc20 	bl	8000b0c <__aeabi_f2iz>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001388 <PIDController+0x210>)
 80012d0:	6013      	str	r3, [r2, #0]

        float duty = fabs(u);  // make sure it's positive
 80012d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001388 <PIDController+0x210>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f88a 	bl	80003f0 <__aeabi_i2d>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f7ff f8ee 	bl	80004c4 <__aeabi_d2f>
 80012e8:	4603      	mov	r3, r0
 80012ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80012ee:	603b      	str	r3, [r7, #0]
        duty = duty > 100.0f?  100.0f : duty;
 80012f0:	4926      	ldr	r1, [pc, #152]	@ (800138c <PIDController+0x214>)
 80012f2:	6838      	ldr	r0, [r7, #0]
 80012f4:	f7ff fc00 	bl	8000af8 <__aeabi_fcmpgt>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <PIDController+0x18a>
 80012fe:	4b23      	ldr	r3, [pc, #140]	@ (800138c <PIDController+0x214>)
 8001300:	e000      	b.n	8001304 <PIDController+0x18c>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	603b      	str	r3, [r7, #0]

        freeMotor();
 8001306:	f7ff fe89 	bl	800101c <freeMotor>

        if (u > 0) {
 800130a:	4b1f      	ldr	r3, [pc, #124]	@ (8001388 <PIDController+0x210>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	dd03      	ble.n	800131a <PIDController+0x1a2>
            setRotationDir(1); //  clockwise -> counter-clockwise and vice versa
 8001312:	2001      	movs	r0, #1
 8001314:	f7ff fe54 	bl	8000fc0 <setRotationDir>
 8001318:	e002      	b.n	8001320 <PIDController+0x1a8>
        } else {
            setRotationDir(0); // 	counter-clockwise
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff fe50 	bl	8000fc0 <setRotationDir>
        }

        writePWM(duty);
 8001320:	6838      	ldr	r0, [r7, #0]
 8001322:	f7ff fed5 	bl	80010d0 <writePWM>
    while ((abs(ref - curr) > TOLERANCE && count++ < 200)){
 8001326:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <PIDController+0x1ec>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <PIDController+0x1e8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	bfb8      	it	lt
 8001334:	425b      	neglt	r3, r3
 8001336:	2b23      	cmp	r3, #35	@ 0x23
 8001338:	dd07      	ble.n	800134a <PIDController+0x1d2>
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	71fa      	strb	r2, [r7, #7]
 8001340:	2bc7      	cmp	r3, #199	@ 0xc7
 8001342:	f67f af1f 	bls.w	8001184 <PIDController+0xc>
 8001346:	e000      	b.n	800134a <PIDController+0x1d2>
        if (abs(err) <= TOLERANCE) break;
 8001348:	bf00      	nop
    }

    pressBreak(); // stop motor when done
 800134a:	f7ff fe59 	bl	8001000 <pressBreak>
    turnON(0); // Blue for finishing
 800134e:	2000      	movs	r0, #0
 8001350:	f7ff fd6c 	bl	8000e2c <turnON>
    turnOFF(1);
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff fd97 	bl	8000e88 <turnOFF>
}
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bd90      	pop	{r4, r7, pc}
 8001360:	20000040 	.word	0x20000040
 8001364:	2000003c 	.word	0x2000003c
 8001368:	20000030 	.word	0x20000030
 800136c:	fffffc18 	.word	0xfffffc18
 8001370:	20000038 	.word	0x20000038
 8001374:	20000034 	.word	0x20000034
 8001378:	2000002c 	.word	0x2000002c
 800137c:	20000020 	.word	0x20000020
 8001380:	20000024 	.word	0x20000024
 8001384:	20000028 	.word	0x20000028
 8001388:	20000044 	.word	0x20000044
 800138c:	42c80000 	.word	0x42c80000

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <NMI_Handler+0x4>

08001398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <MemManage_Handler+0x4>

080013a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e0:	f000 f82e 	bl	8001440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f4:	f7ff fff8 	bl	80013e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	480b      	ldr	r0, [pc, #44]	@ (8001428 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013fa:	490c      	ldr	r1, [pc, #48]	@ (800142c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001430 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a09      	ldr	r2, [pc, #36]	@ (8001434 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001410:	4c09      	ldr	r4, [pc, #36]	@ (8001438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141e:	f000 f821 	bl	8001464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001422:	f7ff fbb9 	bl	8000b98 <main>
  bx lr
 8001426:	4770      	bx	lr
  ldr r0, =_sdata
 8001428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800142c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001430:	080014cc 	.word	0x080014cc
  ldr r2, =_sbss
 8001434:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001438:	2000004c 	.word	0x2000004c

0800143c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800143c:	e7fe      	b.n	800143c <ADC1_2_IRQHandler>
	...

08001440 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001444:	4b05      	ldr	r3, [pc, #20]	@ (800145c <HAL_IncTick+0x1c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <HAL_IncTick+0x20>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a03      	ldr	r2, [pc, #12]	@ (8001460 <HAL_IncTick+0x20>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	20000001 	.word	0x20000001
 8001460:	20000048 	.word	0x20000048

08001464 <__libc_init_array>:
 8001464:	b570      	push	{r4, r5, r6, lr}
 8001466:	2600      	movs	r6, #0
 8001468:	4d0c      	ldr	r5, [pc, #48]	@ (800149c <__libc_init_array+0x38>)
 800146a:	4c0d      	ldr	r4, [pc, #52]	@ (80014a0 <__libc_init_array+0x3c>)
 800146c:	1b64      	subs	r4, r4, r5
 800146e:	10a4      	asrs	r4, r4, #2
 8001470:	42a6      	cmp	r6, r4
 8001472:	d109      	bne.n	8001488 <__libc_init_array+0x24>
 8001474:	f000 f81a 	bl	80014ac <_init>
 8001478:	2600      	movs	r6, #0
 800147a:	4d0a      	ldr	r5, [pc, #40]	@ (80014a4 <__libc_init_array+0x40>)
 800147c:	4c0a      	ldr	r4, [pc, #40]	@ (80014a8 <__libc_init_array+0x44>)
 800147e:	1b64      	subs	r4, r4, r5
 8001480:	10a4      	asrs	r4, r4, #2
 8001482:	42a6      	cmp	r6, r4
 8001484:	d105      	bne.n	8001492 <__libc_init_array+0x2e>
 8001486:	bd70      	pop	{r4, r5, r6, pc}
 8001488:	f855 3b04 	ldr.w	r3, [r5], #4
 800148c:	4798      	blx	r3
 800148e:	3601      	adds	r6, #1
 8001490:	e7ee      	b.n	8001470 <__libc_init_array+0xc>
 8001492:	f855 3b04 	ldr.w	r3, [r5], #4
 8001496:	4798      	blx	r3
 8001498:	3601      	adds	r6, #1
 800149a:	e7f2      	b.n	8001482 <__libc_init_array+0x1e>
 800149c:	080014c4 	.word	0x080014c4
 80014a0:	080014c4 	.word	0x080014c4
 80014a4:	080014c4 	.word	0x080014c4
 80014a8:	080014c8 	.word	0x080014c8

080014ac <_init>:
 80014ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ae:	bf00      	nop
 80014b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014b2:	bc08      	pop	{r3}
 80014b4:	469e      	mov	lr, r3
 80014b6:	4770      	bx	lr

080014b8 <_fini>:
 80014b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ba:	bf00      	nop
 80014bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014be:	bc08      	pop	{r3}
 80014c0:	469e      	mov	lr, r3
 80014c2:	4770      	bx	lr
