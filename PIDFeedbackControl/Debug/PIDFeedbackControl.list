
PIDFeedbackControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000524  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000630  08000630  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000630  08000630  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000630  08000630  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000630  08000630  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000630  08000630  00001630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000634  08000634  00001634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000638  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800063c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800063c  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000106a  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005d6  00000000  00000000  00003097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000228  00000000  00000000  00003670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000018b  00000000  00000000  00003898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000152bb  00000000  00000000  00003a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020c8  00000000  00000000  00018cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b3ab  00000000  00000000  0001ada6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00096151  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000714  00000000  00000000  00096194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000968a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000618 	.word	0x08000618

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000618 	.word	0x08000618

0800014c <main>:
void initPWM();
void writePWM (float dutyCycle);
void controlMotor(uint8_t motorIndex, uint8_t dirBit);


int main(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	enableClk();
 8000150:	f000 f840 	bl	80001d4 <enableClk>
	configureIO();
 8000154:	f000 f824 	bl	80001a0 <configureIO>


	initADC1();
 8000158:	f000 f85c 	bl	8000214 <initADC1>
	initADC2();
 800015c:	f000 f8ac 	bl	80002b8 <initADC2>
	initPWM();
 8000160:	f000 f980 	bl	8000464 <initPWM>
			delay(50);
			if (GPIOB->IDR & (1 << 14)) controlMotor(1, 14); // CW
		}
		*/

		if (getADCVal(0) > 2000){
 8000164:	2000      	movs	r0, #0
 8000166:	f000 f93d 	bl	80003e4 <getADCVal>
 800016a:	4603      	mov	r3, r0
 800016c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000170:	d903      	bls.n	800017a <main+0x2e>
			turnON(0);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 f8f2 	bl	800035c <turnON>
 8000178:	e002      	b.n	8000180 <main+0x34>
		}else {
			turnOFF(0);
 800017a:	2000      	movs	r0, #0
 800017c:	f000 f910 	bl	80003a0 <turnOFF>
		}



		if (getADCVal(1) > 2000){
 8000180:	2001      	movs	r0, #1
 8000182:	f000 f92f 	bl	80003e4 <getADCVal>
 8000186:	4603      	mov	r3, r0
 8000188:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800018c:	d903      	bls.n	8000196 <main+0x4a>
					turnON(1);
 800018e:	2001      	movs	r0, #1
 8000190:	f000 f8e4 	bl	800035c <turnON>
 8000194:	e7e6      	b.n	8000164 <main+0x18>
		}else {
					turnOFF(1);
 8000196:	2001      	movs	r0, #1
 8000198:	f000 f902 	bl	80003a0 <turnOFF>
		if (getADCVal(0) > 2000){
 800019c:	e7e2      	b.n	8000164 <main+0x18>
	...

080001a0 <configureIO>:

}



void configureIO(){
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
	 * HBridge IN4 => B8
	 * HBridge ENB => B9
	 *
	 * */

	GPIOA -> CRL = 0x244440A0;
 80001a4:	4b06      	ldr	r3, [pc, #24]	@ (80001c0 <configureIO+0x20>)
 80001a6:	4a07      	ldr	r2, [pc, #28]	@ (80001c4 <configureIO+0x24>)
 80001a8:	601a      	str	r2, [r3, #0]
	GPIOB -> CRL = 0x24444444;
 80001aa:	4b07      	ldr	r3, [pc, #28]	@ (80001c8 <configureIO+0x28>)
 80001ac:	4a07      	ldr	r2, [pc, #28]	@ (80001cc <configureIO+0x2c>)
 80001ae:	601a      	str	r2, [r3, #0]
	GPIOB -> CRH = 0x48844222;
 80001b0:	4b05      	ldr	r3, [pc, #20]	@ (80001c8 <configureIO+0x28>)
 80001b2:	4a07      	ldr	r2, [pc, #28]	@ (80001d0 <configureIO+0x30>)
 80001b4:	605a      	str	r2, [r3, #4]


}
 80001b6:	bf00      	nop
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	40010800 	.word	0x40010800
 80001c4:	244440a0 	.word	0x244440a0
 80001c8:	40010c00 	.word	0x40010c00
 80001cc:	24444444 	.word	0x24444444
 80001d0:	48844222 	.word	0x48844222

080001d4 <enableClk>:

void enableClk(){
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= RCC_APB2ENR_IOPAEN;
 80001d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000210 <enableClk+0x3c>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000210 <enableClk+0x3c>)
 80001de:	f043 0304 	orr.w	r3, r3, #4
 80001e2:	6193      	str	r3, [r2, #24]
	RCC -> APB2ENR |= RCC_APB2ENR_IOPBEN;
 80001e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000210 <enableClk+0x3c>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a09      	ldr	r2, [pc, #36]	@ (8000210 <enableClk+0x3c>)
 80001ea:	f043 0308 	orr.w	r3, r3, #8
 80001ee:	6193      	str	r3, [r2, #24]
	RCC -> APB1ENR |= 0b11; //enable TIM2 & TIM3
 80001f0:	4b07      	ldr	r3, [pc, #28]	@ (8000210 <enableClk+0x3c>)
 80001f2:	69db      	ldr	r3, [r3, #28]
 80001f4:	4a06      	ldr	r2, [pc, #24]	@ (8000210 <enableClk+0x3c>)
 80001f6:	f043 0303 	orr.w	r3, r3, #3
 80001fa:	61d3      	str	r3, [r2, #28]
	RCC -> APB2ENR |= (1 << 9) | (1 << 10); // enable CLK for ADC1
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <enableClk+0x3c>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	4a03      	ldr	r2, [pc, #12]	@ (8000210 <enableClk+0x3c>)
 8000202:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8000206:	6193      	str	r3, [r2, #24]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	40021000 	.word	0x40021000

08000214 <initADC1>:


void initADC1(){
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0

		ADC1->SQR1 = 0x00000000;  // Reset SQR1 (sequence length = 1 by default)
 800021a:	4b26      	ldr	r3, [pc, #152]	@ (80002b4 <initADC1+0xa0>)
 800021c:	2200      	movs	r2, #0
 800021e:	62da      	str	r2, [r3, #44]	@ 0x2c
		ADC1->SQR3 = 0; // Channel 0 first in the sequence
 8000220:	4b24      	ldr	r3, [pc, #144]	@ (80002b4 <initADC1+0xa0>)
 8000222:	2200      	movs	r2, #0
 8000224:	635a      	str	r2, [r3, #52]	@ 0x34
		ADC1 -> SMPR2 &= 0; // reseting the sample time
 8000226:	4b23      	ldr	r3, [pc, #140]	@ (80002b4 <initADC1+0xa0>)
 8000228:	691b      	ldr	r3, [r3, #16]
 800022a:	4b22      	ldr	r3, [pc, #136]	@ (80002b4 <initADC1+0xa0>)
 800022c:	2200      	movs	r2, #0
 800022e:	611a      	str	r2, [r3, #16]

		ADC1->CR2 |= ADC_CR2_ADON; // ADC on
 8000230:	4b20      	ldr	r3, [pc, #128]	@ (80002b4 <initADC1+0xa0>)
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	4a1f      	ldr	r2, [pc, #124]	@ (80002b4 <initADC1+0xa0>)
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6093      	str	r3, [r2, #8]
		for (volatile int i = 0; i < 10000; i++);  // Short delay
 800023c:	2300      	movs	r3, #0
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	e002      	b.n	8000248 <initADC1+0x34>
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	3301      	adds	r3, #1
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800024e:	4293      	cmp	r3, r2
 8000250:	ddf7      	ble.n	8000242 <initADC1+0x2e>

		ADC1->CR2 |= ADC_CR2_CAL;          // Start calibration
 8000252:	4b18      	ldr	r3, [pc, #96]	@ (80002b4 <initADC1+0xa0>)
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	4a17      	ldr	r2, [pc, #92]	@ (80002b4 <initADC1+0xa0>)
 8000258:	f043 0304 	orr.w	r3, r3, #4
 800025c:	6093      	str	r3, [r2, #8]
		while (ADC1->CR2 & ADC_CR2_CAL);   // Wait for calibration to finish
 800025e:	bf00      	nop
 8000260:	4b14      	ldr	r3, [pc, #80]	@ (80002b4 <initADC1+0xa0>)
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	f003 0304 	and.w	r3, r3, #4
 8000268:	2b00      	cmp	r3, #0
 800026a:	d1f9      	bne.n	8000260 <initADC1+0x4c>

		ADC1->CR2 |= ADC_CR2_EXTTRIG;  // Enable external trigger
 800026c:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <initADC1+0xa0>)
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	4a10      	ldr	r2, [pc, #64]	@ (80002b4 <initADC1+0xa0>)
 8000272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000276:	6093      	str	r3, [r2, #8]

		ADC1->CR2 &= ~ADC_CR2_EXTSEL;       // Clear EXTSEL bits
 8000278:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <initADC1+0xa0>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	4a0d      	ldr	r2, [pc, #52]	@ (80002b4 <initADC1+0xa0>)
 800027e:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8000282:	6093      	str	r3, [r2, #8]
		ADC1->CR2 |= (0b111 << 17);         // Set EXTSEL = 111 for SWSTART
 8000284:	4b0b      	ldr	r3, [pc, #44]	@ (80002b4 <initADC1+0xa0>)
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	4a0a      	ldr	r2, [pc, #40]	@ (80002b4 <initADC1+0xa0>)
 800028a:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 800028e:	6093      	str	r3, [r2, #8]

		ADC1->CR2 &= ~ADC_CR2_CONT;  // Clear CONT bit for single conversion mode
 8000290:	4b08      	ldr	r3, [pc, #32]	@ (80002b4 <initADC1+0xa0>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	4a07      	ldr	r2, [pc, #28]	@ (80002b4 <initADC1+0xa0>)
 8000296:	f023 0302 	bic.w	r3, r3, #2
 800029a:	6093      	str	r3, [r2, #8]

		ADC1->CR2 &= ~ADC_CR2_ALIGN;  // 0 = Right alignment (default)
 800029c:	4b05      	ldr	r3, [pc, #20]	@ (80002b4 <initADC1+0xa0>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	4a04      	ldr	r2, [pc, #16]	@ (80002b4 <initADC1+0xa0>)
 80002a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002a6:	6093      	str	r3, [r2, #8]

}
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40012400 	.word	0x40012400

080002b8 <initADC2>:


void initADC2(){
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0

		ADC2->SQR1 = 0x00000000;  // Reset SQR1 (sequence length = 1 by default)
 80002be:	4b26      	ldr	r3, [pc, #152]	@ (8000358 <initADC2+0xa0>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	62da      	str	r2, [r3, #44]	@ 0x2c
		ADC2->SQR3 = 2; // Channel 2
 80002c4:	4b24      	ldr	r3, [pc, #144]	@ (8000358 <initADC2+0xa0>)
 80002c6:	2202      	movs	r2, #2
 80002c8:	635a      	str	r2, [r3, #52]	@ 0x34
		ADC2 -> SMPR2 &= 0; // reseting the sample time
 80002ca:	4b23      	ldr	r3, [pc, #140]	@ (8000358 <initADC2+0xa0>)
 80002cc:	691b      	ldr	r3, [r3, #16]
 80002ce:	4b22      	ldr	r3, [pc, #136]	@ (8000358 <initADC2+0xa0>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]

		ADC2->CR2 |= ADC_CR2_ADON; // ADC on
 80002d4:	4b20      	ldr	r3, [pc, #128]	@ (8000358 <initADC2+0xa0>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000358 <initADC2+0xa0>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6093      	str	r3, [r2, #8]
		for (volatile int i = 0; i < 10000; i++);  // Short delay
 80002e0:	2300      	movs	r3, #0
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	e002      	b.n	80002ec <initADC2+0x34>
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	3301      	adds	r3, #1
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f242 720f 	movw	r2, #9999	@ 0x270f
 80002f2:	4293      	cmp	r3, r2
 80002f4:	ddf7      	ble.n	80002e6 <initADC2+0x2e>

		ADC2->CR2 |= ADC_CR2_CAL;          // Start calibration
 80002f6:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <initADC2+0xa0>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	4a17      	ldr	r2, [pc, #92]	@ (8000358 <initADC2+0xa0>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	6093      	str	r3, [r2, #8]
		while (ADC2->CR2 & ADC_CR2_CAL);   // Wait for calibration to finish
 8000302:	bf00      	nop
 8000304:	4b14      	ldr	r3, [pc, #80]	@ (8000358 <initADC2+0xa0>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	f003 0304 	and.w	r3, r3, #4
 800030c:	2b00      	cmp	r3, #0
 800030e:	d1f9      	bne.n	8000304 <initADC2+0x4c>

		ADC2->CR2 |= ADC_CR2_EXTTRIG;  // Enable external trigger
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <initADC2+0xa0>)
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	4a10      	ldr	r2, [pc, #64]	@ (8000358 <initADC2+0xa0>)
 8000316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800031a:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_EXTSEL;       // Clear EXTSEL bits
 800031c:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <initADC2+0xa0>)
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	4a0d      	ldr	r2, [pc, #52]	@ (8000358 <initADC2+0xa0>)
 8000322:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8000326:	6093      	str	r3, [r2, #8]
		ADC2->CR2 |= (0b111 << 17);         // Set EXTSEL = 111 for SWSTART
 8000328:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <initADC2+0xa0>)
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <initADC2+0xa0>)
 800032e:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 8000332:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_CONT;  // Clear CONT bit for single conversion mode
 8000334:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <initADC2+0xa0>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4a07      	ldr	r2, [pc, #28]	@ (8000358 <initADC2+0xa0>)
 800033a:	f023 0302 	bic.w	r3, r3, #2
 800033e:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_ALIGN;  // 0 = Right alignment (default)
 8000340:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <initADC2+0xa0>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	4a04      	ldr	r2, [pc, #16]	@ (8000358 <initADC2+0xa0>)
 8000346:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800034a:	6093      	str	r3, [r2, #8]

}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40012800 	.word	0x40012800

0800035c <turnON>:

void turnON(uint8_t i){
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]


	switch (i){
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d002      	beq.n	8000372 <turnON+0x16>
 800036c:	2b01      	cmp	r3, #1
 800036e:	d007      	beq.n	8000380 <turnON+0x24>

		case 0: GPIOA ->ODR |= (1 << 7); return;
		case 1: GPIOB ->ODR |= (1 << 10); return;

		default: break;
 8000370:	e00d      	b.n	800038e <turnON+0x32>
		case 0: GPIOA ->ODR |= (1 << 7); return;
 8000372:	4b09      	ldr	r3, [pc, #36]	@ (8000398 <turnON+0x3c>)
 8000374:	68db      	ldr	r3, [r3, #12]
 8000376:	4a08      	ldr	r2, [pc, #32]	@ (8000398 <turnON+0x3c>)
 8000378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800037c:	60d3      	str	r3, [r2, #12]
 800037e:	e006      	b.n	800038e <turnON+0x32>
		case 1: GPIOB ->ODR |= (1 << 10); return;
 8000380:	4b06      	ldr	r3, [pc, #24]	@ (800039c <turnON+0x40>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	4a05      	ldr	r2, [pc, #20]	@ (800039c <turnON+0x40>)
 8000386:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800038a:	60d3      	str	r3, [r2, #12]
 800038c:	bf00      	nop
	}
}
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40010800 	.word	0x40010800
 800039c:	40010c00 	.word	0x40010c00

080003a0 <turnOFF>:

void turnOFF(uint8_t i){
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]


	switch (i){
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d002      	beq.n	80003b6 <turnOFF+0x16>
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d007      	beq.n	80003c4 <turnOFF+0x24>

		case 0: GPIOA ->ODR &= ~(1 << 7); return;
		case 1: GPIOB ->ODR &= ~(1 << 10); return;

		default: break;
 80003b4:	e00d      	b.n	80003d2 <turnOFF+0x32>
		case 0: GPIOA ->ODR &= ~(1 << 7); return;
 80003b6:	4b09      	ldr	r3, [pc, #36]	@ (80003dc <turnOFF+0x3c>)
 80003b8:	68db      	ldr	r3, [r3, #12]
 80003ba:	4a08      	ldr	r2, [pc, #32]	@ (80003dc <turnOFF+0x3c>)
 80003bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003c0:	60d3      	str	r3, [r2, #12]
 80003c2:	e006      	b.n	80003d2 <turnOFF+0x32>
		case 1: GPIOB ->ODR &= ~(1 << 10); return;
 80003c4:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <turnOFF+0x40>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	4a05      	ldr	r2, [pc, #20]	@ (80003e0 <turnOFF+0x40>)
 80003ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80003ce:	60d3      	str	r3, [r2, #12]
 80003d0:	bf00      	nop
	}
}
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40010800 	.word	0x40010800
 80003e0:	40010c00 	.word	0x40010c00

080003e4 <getADCVal>:
	while(!(TIM3->SR & TIM_SR_UIF));
	TIM3->SR &= ~TIM_SR_UIF;
	TIM3 ->CR1 &= ~(TIM_CR1_CEN);
}

uint16_t getADCVal(uint8_t i){
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
	if (i ==0){
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d117      	bne.n	8000424 <getADCVal+0x40>
		ADC1->CR2 |= ADC_CR2_SWSTART; // start conversion
 80003f4:	4b19      	ldr	r3, [pc, #100]	@ (800045c <getADCVal+0x78>)
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	4a18      	ldr	r2, [pc, #96]	@ (800045c <getADCVal+0x78>)
 80003fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003fe:	6093      	str	r3, [r2, #8]
			while (!(ADC1->SR & ADC_SR_EOC));     // Wait for conversion complete
 8000400:	bf00      	nop
 8000402:	4b16      	ldr	r3, [pc, #88]	@ (800045c <getADCVal+0x78>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f003 0302 	and.w	r3, r3, #2
 800040a:	2b00      	cmp	r3, #0
 800040c:	d0f9      	beq.n	8000402 <getADCVal+0x1e>
			ADC1->SR &= ~(ADC_SR_EOC);
 800040e:	4b13      	ldr	r3, [pc, #76]	@ (800045c <getADCVal+0x78>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a12      	ldr	r2, [pc, #72]	@ (800045c <getADCVal+0x78>)
 8000414:	f023 0302 	bic.w	r3, r3, #2
 8000418:	6013      	str	r3, [r2, #0]
			uint16_t ADCVal = ADC1->DR;  // Read result (10-bit mask)
 800041a:	4b10      	ldr	r3, [pc, #64]	@ (800045c <getADCVal+0x78>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041e:	81bb      	strh	r3, [r7, #12]
			return ADCVal;
 8000420:	89bb      	ldrh	r3, [r7, #12]
 8000422:	e016      	b.n	8000452 <getADCVal+0x6e>
	}
	else {
		ADC2->CR2 |= ADC_CR2_SWSTART; // start conversion
 8000424:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <getADCVal+0x7c>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	4a0d      	ldr	r2, [pc, #52]	@ (8000460 <getADCVal+0x7c>)
 800042a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800042e:	6093      	str	r3, [r2, #8]
		while (!(ADC2->SR & ADC_SR_EOC));     // Wait for conversion complete
 8000430:	bf00      	nop
 8000432:	4b0b      	ldr	r3, [pc, #44]	@ (8000460 <getADCVal+0x7c>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f003 0302 	and.w	r3, r3, #2
 800043a:	2b00      	cmp	r3, #0
 800043c:	d0f9      	beq.n	8000432 <getADCVal+0x4e>
		ADC2->SR &= ~(ADC_SR_EOC);
 800043e:	4b08      	ldr	r3, [pc, #32]	@ (8000460 <getADCVal+0x7c>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a07      	ldr	r2, [pc, #28]	@ (8000460 <getADCVal+0x7c>)
 8000444:	f023 0302 	bic.w	r3, r3, #2
 8000448:	6013      	str	r3, [r2, #0]
		uint16_t ADCVal = ADC2->DR;  // Read result (10-bit mask)
 800044a:	4b05      	ldr	r3, [pc, #20]	@ (8000460 <getADCVal+0x7c>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044e:	81fb      	strh	r3, [r7, #14]
		return ADCVal;
 8000450:	89fb      	ldrh	r3, [r7, #14]
	}


}
 8000452:	4618      	mov	r0, r3
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	40012400 	.word	0x40012400
 8000460:	40012800 	.word	0x40012800

08000464 <initPWM>:

void freeMotor(){
	GPIOB->ODR &= ~((1 << 7) | (1 << 8));
}

void initPWM(){
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
	RCC ->APB1ENR |= RCC_APB1ENR_TIM2EN; //enable Timer
 8000468:	4b23      	ldr	r3, [pc, #140]	@ (80004f8 <initPWM+0x94>)
 800046a:	69db      	ldr	r3, [r3, #28]
 800046c:	4a22      	ldr	r2, [pc, #136]	@ (80004f8 <initPWM+0x94>)
 800046e:	f043 0301 	orr.w	r3, r3, #1
 8000472:	61d3      	str	r3, [r2, #28]

	TIM2 -> PSC = 8 - 1;
 8000474:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000478:	2207      	movs	r2, #7
 800047a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2 -> ARR = 1000 - 1;
 800047c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000480:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000484:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CCMR1 |= (6 << 12); // mode 1 for ch2
 8000486:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000490:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000494:	6193      	str	r3, [r2, #24]

	TIM2 -> CCR2 = 0; //duty Cycle =0
 8000496:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800049a:	2200      	movs	r2, #0
 800049c:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM2->CCMR1 |= TIM_CCMR1_OC1PE; // Enable preload
 800049e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004a8:	f043 0308 	orr.w	r3, r3, #8
 80004ac:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= TIM_CCER_CC2E;    // Enable output for CH1
 80004ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004b2:	6a1b      	ldr	r3, [r3, #32]
 80004b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004b8:	f043 0310 	orr.w	r3, r3, #16
 80004bc:	6213      	str	r3, [r2, #32]

	TIM2->CR1 |= TIM_CR1_ARPE;   // Enable auto-reload Preload
 80004be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004cc:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= TIM_EGR_UG;     // Force update to load registers
 80004ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6153      	str	r3, [r2, #20]

	TIM2->CR1 |= TIM_CR1_CEN;    // Enable timer
 80004de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6013      	str	r3, [r2, #0]

}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <NMI_Handler+0x4>

08000504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <HardFault_Handler+0x4>

0800050c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <MemManage_Handler+0x4>

08000514 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <BusFault_Handler+0x4>

0800051c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <UsageFault_Handler+0x4>

08000524 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr

08000548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054c:	f000 f82e 	bl	80005ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}

08000554 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000560:	f7ff fff8 	bl	8000554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000564:	480b      	ldr	r0, [pc, #44]	@ (8000594 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000566:	490c      	ldr	r1, [pc, #48]	@ (8000598 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000568:	4a0c      	ldr	r2, [pc, #48]	@ (800059c <LoopFillZerobss+0x16>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800056c:	e002      	b.n	8000574 <LoopCopyDataInit>

0800056e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000572:	3304      	adds	r3, #4

08000574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000578:	d3f9      	bcc.n	800056e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057a:	4a09      	ldr	r2, [pc, #36]	@ (80005a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800057c:	4c09      	ldr	r4, [pc, #36]	@ (80005a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000580:	e001      	b.n	8000586 <LoopFillZerobss>

08000582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000584:	3204      	adds	r2, #4

08000586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000588:	d3fb      	bcc.n	8000582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800058a:	f000 f821 	bl	80005d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058e:	f7ff fddd 	bl	800014c <main>
  bx lr
 8000592:	4770      	bx	lr
  ldr r0, =_sdata
 8000594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000598:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800059c:	08000638 	.word	0x08000638
  ldr r2, =_sbss
 80005a0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005a4:	20000024 	.word	0x20000024

080005a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC1_2_IRQHandler>
	...

080005ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b0:	4b05      	ldr	r3, [pc, #20]	@ (80005c8 <HAL_IncTick+0x1c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <HAL_IncTick+0x20>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4413      	add	r3, r2
 80005bc:	4a03      	ldr	r2, [pc, #12]	@ (80005cc <HAL_IncTick+0x20>)
 80005be:	6013      	str	r3, [r2, #0]
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	20000000 	.word	0x20000000
 80005cc:	20000020 	.word	0x20000020

080005d0 <__libc_init_array>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	2600      	movs	r6, #0
 80005d4:	4d0c      	ldr	r5, [pc, #48]	@ (8000608 <__libc_init_array+0x38>)
 80005d6:	4c0d      	ldr	r4, [pc, #52]	@ (800060c <__libc_init_array+0x3c>)
 80005d8:	1b64      	subs	r4, r4, r5
 80005da:	10a4      	asrs	r4, r4, #2
 80005dc:	42a6      	cmp	r6, r4
 80005de:	d109      	bne.n	80005f4 <__libc_init_array+0x24>
 80005e0:	f000 f81a 	bl	8000618 <_init>
 80005e4:	2600      	movs	r6, #0
 80005e6:	4d0a      	ldr	r5, [pc, #40]	@ (8000610 <__libc_init_array+0x40>)
 80005e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000614 <__libc_init_array+0x44>)
 80005ea:	1b64      	subs	r4, r4, r5
 80005ec:	10a4      	asrs	r4, r4, #2
 80005ee:	42a6      	cmp	r6, r4
 80005f0:	d105      	bne.n	80005fe <__libc_init_array+0x2e>
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f8:	4798      	blx	r3
 80005fa:	3601      	adds	r6, #1
 80005fc:	e7ee      	b.n	80005dc <__libc_init_array+0xc>
 80005fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000602:	4798      	blx	r3
 8000604:	3601      	adds	r6, #1
 8000606:	e7f2      	b.n	80005ee <__libc_init_array+0x1e>
 8000608:	08000630 	.word	0x08000630
 800060c:	08000630 	.word	0x08000630
 8000610:	08000630 	.word	0x08000630
 8000614:	08000634 	.word	0x08000634

08000618 <_init>:
 8000618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800061a:	bf00      	nop
 800061c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800061e:	bc08      	pop	{r3}
 8000620:	469e      	mov	lr, r3
 8000622:	4770      	bx	lr

08000624 <_fini>:
 8000624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000626:	bf00      	nop
 8000628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800062a:	bc08      	pop	{r3}
 800062c:	469e      	mov	lr, r3
 800062e:	4770      	bx	lr
