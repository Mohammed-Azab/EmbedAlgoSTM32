
PIDFeedbackControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cf0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000dfc  08000dfc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000dfc  08000dfc  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000dfc  08000dfc  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000dfc  08000dfc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dfc  08000dfc  00001dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e00  08000e00  00001e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000e04  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000e08  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000e08  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001064  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000598  00000000  00000000  00003091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000228  00000000  00000000  00003630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000018c  00000000  00000000  00003858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000152bb  00000000  00000000  000039e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000210a  00000000  00000000  00018c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b3ab  00000000  00000000  0001ada9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00096154  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000884  00000000  00000000  00096198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00096a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000de4 	.word	0x08000de4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000de4 	.word	0x08000de4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <main>:
void initPWM();
void writePWM (float dutyCycle);
void controlMotor(uint8_t motorIndex, uint8_t dirBit);


int main(void){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	enableClk();
 8000738:	f000 f85c 	bl	80007f4 <enableClk>
	configureIO();
 800073c:	f000 f840 	bl	80007c0 <configureIO>


	initADC1();
 8000740:	f000 f878 	bl	8000834 <initADC1>
	initADC2();
 8000744:	f000 f8c8 	bl	80008d8 <initADC2>
	initPWM();
 8000748:	f000 fa06 	bl	8000b58 <initPWM>


	while (1) {

		freeMotor();
 800074c:	f000 f9f6 	bl	8000b3c <freeMotor>



		if (GPIOB -> IDR & (1 << 13) && GPIOB -> IDR & (1 << 14)){ // break
 8000750:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <main+0x88>)
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000758:	2b00      	cmp	r3, #0
 800075a:	d008      	beq.n	800076e <main+0x3a>
 800075c:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <main+0x88>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d002      	beq.n	800076e <main+0x3a>
			pressBreak();
 8000768:	f000 f9da 	bl	8000b20 <pressBreak>
			continue;
 800076c:	e025      	b.n	80007ba <main+0x86>

		}


		if (GPIOB->IDR & (1 << 13)){
 800076e:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <main+0x88>)
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d00c      	beq.n	8000794 <main+0x60>
			delay(50);
 800077a:	2032      	movs	r0, #50	@ 0x32
 800077c:	f000 f942 	bl	8000a04 <delay>
			if (GPIOB->IDR & (1 << 13)) controlMotor(0, 13); // CCW
 8000780:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <main+0x88>)
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000788:	2b00      	cmp	r3, #0
 800078a:	d003      	beq.n	8000794 <main+0x60>
 800078c:	210d      	movs	r1, #13
 800078e:	2000      	movs	r0, #0
 8000790:	f000 fa5a 	bl	8000c48 <controlMotor>
		}
		if (GPIOB->IDR & (1 << 14)){
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <main+0x88>)
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800079c:	2b00      	cmp	r3, #0
 800079e:	d0d5      	beq.n	800074c <main+0x18>
			delay(50);
 80007a0:	2032      	movs	r0, #50	@ 0x32
 80007a2:	f000 f92f 	bl	8000a04 <delay>
			if (GPIOB->IDR & (1 << 14)) controlMotor(1, 14); // CW
 80007a6:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <main+0x88>)
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d0cc      	beq.n	800074c <main+0x18>
 80007b2:	210e      	movs	r1, #14
 80007b4:	2001      	movs	r0, #1
 80007b6:	f000 fa47 	bl	8000c48 <controlMotor>
		freeMotor();
 80007ba:	e7c7      	b.n	800074c <main+0x18>
 80007bc:	40010c00 	.word	0x40010c00

080007c0 <configureIO>:

}



void configureIO(){
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
	 * HBridge IN4 => B8
	 * HBridge ENB => B9
	 *
	 * */

	GPIOA -> CRL = 0x244444A0;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <configureIO+0x20>)
 80007c6:	4a07      	ldr	r2, [pc, #28]	@ (80007e4 <configureIO+0x24>)
 80007c8:	601a      	str	r2, [r3, #0]
	GPIOB -> CRL = 0x24444444;
 80007ca:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <configureIO+0x28>)
 80007cc:	4a07      	ldr	r2, [pc, #28]	@ (80007ec <configureIO+0x2c>)
 80007ce:	601a      	str	r2, [r3, #0]
	GPIOB -> CRH = 0x48844222;
 80007d0:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <configureIO+0x28>)
 80007d2:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <configureIO+0x30>)
 80007d4:	605a      	str	r2, [r3, #4]


}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40010800 	.word	0x40010800
 80007e4:	244444a0 	.word	0x244444a0
 80007e8:	40010c00 	.word	0x40010c00
 80007ec:	24444444 	.word	0x24444444
 80007f0:	48844222 	.word	0x48844222

080007f4 <enableClk>:

void enableClk(){
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= RCC_APB2ENR_IOPAEN;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <enableClk+0x3c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000830 <enableClk+0x3c>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6193      	str	r3, [r2, #24]
	RCC -> APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000804:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <enableClk+0x3c>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a09      	ldr	r2, [pc, #36]	@ (8000830 <enableClk+0x3c>)
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	6193      	str	r3, [r2, #24]
	RCC -> APB1ENR |= 0b11; //enable TIM2 & TIM3
 8000810:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <enableClk+0x3c>)
 8000812:	69db      	ldr	r3, [r3, #28]
 8000814:	4a06      	ldr	r2, [pc, #24]	@ (8000830 <enableClk+0x3c>)
 8000816:	f043 0303 	orr.w	r3, r3, #3
 800081a:	61d3      	str	r3, [r2, #28]
	RCC -> APB2ENR |= (1 << 9) | (1 << 10); // enable CLK for ADC1
 800081c:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <enableClk+0x3c>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a03      	ldr	r2, [pc, #12]	@ (8000830 <enableClk+0x3c>)
 8000822:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8000826:	6193      	str	r3, [r2, #24]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	40021000 	.word	0x40021000

08000834 <initADC1>:


void initADC1(){
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0

		ADC1->SQR1 = 0x00000000;  // Reset SQR1 (sequence length = 1 by default)
 800083a:	4b26      	ldr	r3, [pc, #152]	@ (80008d4 <initADC1+0xa0>)
 800083c:	2200      	movs	r2, #0
 800083e:	62da      	str	r2, [r3, #44]	@ 0x2c
		ADC1->SQR3 = 0; // Channel 0 first in the sequence
 8000840:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <initADC1+0xa0>)
 8000842:	2200      	movs	r2, #0
 8000844:	635a      	str	r2, [r3, #52]	@ 0x34
		ADC1 -> SMPR2 &= 0; // reseting the sample time
 8000846:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <initADC1+0xa0>)
 8000848:	691b      	ldr	r3, [r3, #16]
 800084a:	4b22      	ldr	r3, [pc, #136]	@ (80008d4 <initADC1+0xa0>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]

		ADC1->CR2 |= ADC_CR2_ADON; // ADC on
 8000850:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <initADC1+0xa0>)
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	4a1f      	ldr	r2, [pc, #124]	@ (80008d4 <initADC1+0xa0>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	6093      	str	r3, [r2, #8]
		for (volatile int i = 0; i < 10000; i++);  // Short delay
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	e002      	b.n	8000868 <initADC1+0x34>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3301      	adds	r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800086e:	4293      	cmp	r3, r2
 8000870:	ddf7      	ble.n	8000862 <initADC1+0x2e>

		ADC1->CR2 |= ADC_CR2_CAL;          // Start calibration
 8000872:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <initADC1+0xa0>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	4a17      	ldr	r2, [pc, #92]	@ (80008d4 <initADC1+0xa0>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	6093      	str	r3, [r2, #8]
		while (ADC1->CR2 & ADC_CR2_CAL);   // Wait for calibration to finish
 800087e:	bf00      	nop
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <initADC1+0xa0>)
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1f9      	bne.n	8000880 <initADC1+0x4c>

		ADC1->CR2 |= ADC_CR2_EXTTRIG;  // Enable external trigger
 800088c:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <initADC1+0xa0>)
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	4a10      	ldr	r2, [pc, #64]	@ (80008d4 <initADC1+0xa0>)
 8000892:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000896:	6093      	str	r3, [r2, #8]

		ADC1->CR2 &= ~ADC_CR2_EXTSEL;       // Clear EXTSEL bits
 8000898:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <initADC1+0xa0>)
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	4a0d      	ldr	r2, [pc, #52]	@ (80008d4 <initADC1+0xa0>)
 800089e:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 80008a2:	6093      	str	r3, [r2, #8]
		ADC1->CR2 |= (0b111 << 17);         // Set EXTSEL = 111 for SWSTART
 80008a4:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <initADC1+0xa0>)
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	4a0a      	ldr	r2, [pc, #40]	@ (80008d4 <initADC1+0xa0>)
 80008aa:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 80008ae:	6093      	str	r3, [r2, #8]

		ADC1->CR2 &= ~ADC_CR2_CONT;  // Clear CONT bit for single conversion mode
 80008b0:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <initADC1+0xa0>)
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	4a07      	ldr	r2, [pc, #28]	@ (80008d4 <initADC1+0xa0>)
 80008b6:	f023 0302 	bic.w	r3, r3, #2
 80008ba:	6093      	str	r3, [r2, #8]

		ADC1->CR2 &= ~ADC_CR2_ALIGN;  // 0 = Right alignment (default)
 80008bc:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <initADC1+0xa0>)
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <initADC1+0xa0>)
 80008c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80008c6:	6093      	str	r3, [r2, #8]

}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40012400 	.word	0x40012400

080008d8 <initADC2>:


void initADC2(){
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0

		ADC2->SQR1 = 0x00000000;  // Reset SQR1 (sequence length = 1 by default)
 80008de:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <initADC2+0xa0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	62da      	str	r2, [r3, #44]	@ 0x2c
		ADC2->SQR3 = 0; // Channel 0 first in the sequence
 80008e4:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <initADC2+0xa0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	635a      	str	r2, [r3, #52]	@ 0x34
		ADC2 -> SMPR2 &= 0; // reseting the sample time
 80008ea:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <initADC2+0xa0>)
 80008ec:	691b      	ldr	r3, [r3, #16]
 80008ee:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <initADC2+0xa0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]

		ADC2->CR2 |= ADC_CR2_ADON; // ADC on
 80008f4:	4b20      	ldr	r3, [pc, #128]	@ (8000978 <initADC2+0xa0>)
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	4a1f      	ldr	r2, [pc, #124]	@ (8000978 <initADC2+0xa0>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6093      	str	r3, [r2, #8]
		for (volatile int i = 0; i < 10000; i++);  // Short delay
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	e002      	b.n	800090c <initADC2+0x34>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3301      	adds	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000912:	4293      	cmp	r3, r2
 8000914:	ddf7      	ble.n	8000906 <initADC2+0x2e>

		ADC2->CR2 |= ADC_CR2_CAL;          // Start calibration
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <initADC2+0xa0>)
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <initADC2+0xa0>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6093      	str	r3, [r2, #8]
		while (ADC2->CR2 & ADC_CR2_CAL);   // Wait for calibration to finish
 8000922:	bf00      	nop
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <initADC2+0xa0>)
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	2b00      	cmp	r3, #0
 800092e:	d1f9      	bne.n	8000924 <initADC2+0x4c>

		ADC2->CR2 |= ADC_CR2_EXTTRIG;  // Enable external trigger
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <initADC2+0xa0>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	4a10      	ldr	r2, [pc, #64]	@ (8000978 <initADC2+0xa0>)
 8000936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800093a:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_EXTSEL;       // Clear EXTSEL bits
 800093c:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <initADC2+0xa0>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <initADC2+0xa0>)
 8000942:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8000946:	6093      	str	r3, [r2, #8]
		ADC2->CR2 |= (0b111 << 17);         // Set EXTSEL = 111 for SWSTART
 8000948:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <initADC2+0xa0>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <initADC2+0xa0>)
 800094e:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 8000952:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_CONT;  // Clear CONT bit for single conversion mode
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <initADC2+0xa0>)
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	4a07      	ldr	r2, [pc, #28]	@ (8000978 <initADC2+0xa0>)
 800095a:	f023 0302 	bic.w	r3, r3, #2
 800095e:	6093      	str	r3, [r2, #8]

		ADC2->CR2 &= ~ADC_CR2_ALIGN;  // 0 = Right alignment (default)
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <initADC2+0xa0>)
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <initADC2+0xa0>)
 8000966:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800096a:	6093      	str	r3, [r2, #8]

}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40012800 	.word	0x40012800

0800097c <turnON>:

void turnON(uint8_t i){
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]


	switch (i){
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d002      	beq.n	8000992 <turnON+0x16>
 800098c:	2b01      	cmp	r3, #1
 800098e:	d007      	beq.n	80009a0 <turnON+0x24>

		case 0: GPIOA ->ODR |= (1 << 7); return;
		case 1: GPIOB ->ODR |= (1 << 10); return;

		default: break;
 8000990:	e00d      	b.n	80009ae <turnON+0x32>
		case 0: GPIOA ->ODR |= (1 << 7); return;
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <turnON+0x3c>)
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	4a08      	ldr	r2, [pc, #32]	@ (80009b8 <turnON+0x3c>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800099c:	60d3      	str	r3, [r2, #12]
 800099e:	e006      	b.n	80009ae <turnON+0x32>
		case 1: GPIOB ->ODR |= (1 << 10); return;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <turnON+0x40>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	4a05      	ldr	r2, [pc, #20]	@ (80009bc <turnON+0x40>)
 80009a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009aa:	60d3      	str	r3, [r2, #12]
 80009ac:	bf00      	nop
	}
}
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40010800 	.word	0x40010800
 80009bc:	40010c00 	.word	0x40010c00

080009c0 <turnOFF>:

void turnOFF(uint8_t i){
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]


	switch (i){
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d002      	beq.n	80009d6 <turnOFF+0x16>
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d007      	beq.n	80009e4 <turnOFF+0x24>

		case 0: GPIOA ->ODR &= ~(1 << 7); return;
		case 1: GPIOB ->ODR &= ~(1 << 10); return;

		default: break;
 80009d4:	e00d      	b.n	80009f2 <turnOFF+0x32>
		case 0: GPIOA ->ODR &= ~(1 << 7); return;
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <turnOFF+0x3c>)
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	4a08      	ldr	r2, [pc, #32]	@ (80009fc <turnOFF+0x3c>)
 80009dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80009e0:	60d3      	str	r3, [r2, #12]
 80009e2:	e006      	b.n	80009f2 <turnOFF+0x32>
		case 1: GPIOB ->ODR &= ~(1 << 10); return;
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <turnOFF+0x40>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	4a05      	ldr	r2, [pc, #20]	@ (8000a00 <turnOFF+0x40>)
 80009ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80009ee:	60d3      	str	r3, [r2, #12]
 80009f0:	bf00      	nop
	}
}
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40010800 	.word	0x40010800
 8000a00:	40010c00 	.word	0x40010c00

08000a04 <delay>:



void delay(uint16_t t){
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]
	TIM3 ->PSC = 8000-1;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <delay+0x58>)
 8000a10:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000a14:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3 ->ARR = t-1;
 8000a16:	88fb      	ldrh	r3, [r7, #6]
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <delay+0x58>)
 8000a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3 ->CR1 |= TIM_CR1_CEN;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <delay+0x58>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a0e      	ldr	r2, [pc, #56]	@ (8000a5c <delay+0x58>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6013      	str	r3, [r2, #0]
	while(!(TIM3->SR & TIM_SR_UIF));
 8000a2a:	bf00      	nop
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <delay+0x58>)
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d0f9      	beq.n	8000a2c <delay+0x28>
	TIM3->SR &= ~TIM_SR_UIF;
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <delay+0x58>)
 8000a3a:	691b      	ldr	r3, [r3, #16]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <delay+0x58>)
 8000a3e:	f023 0301 	bic.w	r3, r3, #1
 8000a42:	6113      	str	r3, [r2, #16]
	TIM3 ->CR1 &= ~(TIM_CR1_CEN);
 8000a44:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <delay+0x58>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a04      	ldr	r2, [pc, #16]	@ (8000a5c <delay+0x58>)
 8000a4a:	f023 0301 	bic.w	r3, r3, #1
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40000400 	.word	0x40000400

08000a60 <getADCVal>:

uint16_t getADCVal(uint8_t i){
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
	if (i ==0){
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d117      	bne.n	8000aa0 <getADCVal+0x40>
		ADC1->CR2 |= ADC_CR2_SWSTART; // start conversion
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <getADCVal+0x78>)
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	4a18      	ldr	r2, [pc, #96]	@ (8000ad8 <getADCVal+0x78>)
 8000a76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a7a:	6093      	str	r3, [r2, #8]
			while (!(ADC1->SR & ADC_SR_EOC));     // Wait for conversion complete
 8000a7c:	bf00      	nop
 8000a7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <getADCVal+0x78>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0f9      	beq.n	8000a7e <getADCVal+0x1e>
			ADC1->SR &= ~(ADC_SR_EOC);
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <getADCVal+0x78>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ad8 <getADCVal+0x78>)
 8000a90:	f023 0302 	bic.w	r3, r3, #2
 8000a94:	6013      	str	r3, [r2, #0]
			uint16_t ADCVal = ADC1->DR;  // Read result (10-bit mask)
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <getADCVal+0x78>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9a:	81bb      	strh	r3, [r7, #12]
			return ADCVal;
 8000a9c:	89bb      	ldrh	r3, [r7, #12]
 8000a9e:	e016      	b.n	8000ace <getADCVal+0x6e>
	}
	else {
		ADC2->CR2 |= ADC_CR2_SWSTART; // start conversion
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <getADCVal+0x7c>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <getADCVal+0x7c>)
 8000aa6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000aaa:	6093      	str	r3, [r2, #8]
		while (!(ADC2->SR & ADC_SR_EOC));     // Wait for conversion complete
 8000aac:	bf00      	nop
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <getADCVal+0x7c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d0f9      	beq.n	8000aae <getADCVal+0x4e>
		ADC2->SR &= ~(ADC_SR_EOC);
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <getADCVal+0x7c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a07      	ldr	r2, [pc, #28]	@ (8000adc <getADCVal+0x7c>)
 8000ac0:	f023 0302 	bic.w	r3, r3, #2
 8000ac4:	6013      	str	r3, [r2, #0]
		uint16_t ADCVal = ADC2->DR;  // Read result (10-bit mask)
 8000ac6:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <getADCVal+0x7c>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	81fb      	strh	r3, [r7, #14]
		return ADCVal;
 8000acc:	89fb      	ldrh	r3, [r7, #14]
	}


}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	40012400 	.word	0x40012400
 8000adc:	40012800 	.word	0x40012800

08000ae0 <setRotationDir>:

void setRotationDir(uint8_t i){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	switch(i){
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d002      	beq.n	8000af6 <setRotationDir+0x16>
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d007      	beq.n	8000b04 <setRotationDir+0x24>
		case 0 : GPIOB -> ODR |= (1 << 7) ;break; // Counter CLockwise
		case 1 : GPIOB -> ODR |= (1 << 8) ;break; // CLockwise
		default: break;
 8000af4:	e00d      	b.n	8000b12 <setRotationDir+0x32>
		case 0 : GPIOB -> ODR |= (1 << 7) ;break; // Counter CLockwise
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <setRotationDir+0x3c>)
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <setRotationDir+0x3c>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b00:	60d3      	str	r3, [r2, #12]
 8000b02:	e006      	b.n	8000b12 <setRotationDir+0x32>
		case 1 : GPIOB -> ODR |= (1 << 8) ;break; // CLockwise
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <setRotationDir+0x3c>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <setRotationDir+0x3c>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b0e:	60d3      	str	r3, [r2, #12]
 8000b10:	bf00      	nop
	}
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	40010c00 	.word	0x40010c00

08000b20 <pressBreak>:


void pressBreak(){
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
	GPIOB->ODR |= (1 << 7) | (1 << 8);
 8000b24:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <pressBreak+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	4a03      	ldr	r2, [pc, #12]	@ (8000b38 <pressBreak+0x18>)
 8000b2a:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8000b2e:	60d3      	str	r3, [r2, #12]

}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	40010c00 	.word	0x40010c00

08000b3c <freeMotor>:
void rotateMax(uint16_t pwm){

	GPIOB -> ODR |= (1 << 9) ;
}

void freeMotor(){
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
	GPIOB->ODR &= ~((1 << 7) | (1 << 8));
 8000b40:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <freeMotor+0x18>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	4a03      	ldr	r2, [pc, #12]	@ (8000b54 <freeMotor+0x18>)
 8000b46:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	40010c00 	.word	0x40010c00

08000b58 <initPWM>:

void initPWM(){
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	RCC ->APB1ENR |= RCC_APB1ENR_TIM2EN; //enable Timer
 8000b5c:	4b23      	ldr	r3, [pc, #140]	@ (8000bec <initPWM+0x94>)
 8000b5e:	69db      	ldr	r3, [r3, #28]
 8000b60:	4a22      	ldr	r2, [pc, #136]	@ (8000bec <initPWM+0x94>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	61d3      	str	r3, [r2, #28]

	TIM2 -> PSC = 8 - 1;
 8000b68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2 -> ARR = 1000 - 1;
 8000b70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b74:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b78:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CCMR1 |= (6 << 12); // mode 1 for ch2
 8000b7a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b84:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000b88:	6193      	str	r3, [r2, #24]

	TIM2 -> CCR2 = 0; //duty Cycle =0
 8000b8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b8e:	2200      	movs	r2, #0
 8000b90:	639a      	str	r2, [r3, #56]	@ 0x38

	TIM2->CCMR1 |= TIM_CCMR1_OC1PE; // Enable preload
 8000b92:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= TIM_CCER_CC2E;    // Enable output for CH1
 8000ba2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ba6:	6a1b      	ldr	r3, [r3, #32]
 8000ba8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bac:	f043 0310 	orr.w	r3, r3, #16
 8000bb0:	6213      	str	r3, [r2, #32]

	TIM2->CR1 |= TIM_CR1_ARPE;   // Enable auto-reload Preload
 8000bb2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc0:	6013      	str	r3, [r2, #0]

	TIM2->EGR |= TIM_EGR_UG;     // Force update to load registers
 8000bc2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6153      	str	r3, [r2, #20]

	TIM2->CR1 |= TIM_CR1_CEN;    // Enable timer
 8000bd2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6013      	str	r3, [r2, #0]

}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000

08000bf0 <writePWM>:

void writePWM (float dutyCycle){
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	if (dutyCycle > 100){
 8000bf8:	4912      	ldr	r1, [pc, #72]	@ (8000c44 <writePWM+0x54>)
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff fd70 	bl	80006e0 <__aeabi_fcmpgt>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <writePWM+0x1a>
		dutyCycle = 100;
 8000c06:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <writePWM+0x54>)
 8000c08:	607b      	str	r3, [r7, #4]
	}

	TIM2 -> CCR2 = (TIM2->ARR + 1) * dutyCycle / 100;
 8000c0a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c10:	3301      	adds	r3, #1
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fb50 	bl	80002b8 <__aeabi_ui2f>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fba3 	bl	8000368 <__aeabi_fmul>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4907      	ldr	r1, [pc, #28]	@ (8000c44 <writePWM+0x54>)
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fc52 	bl	80004d0 <__aeabi_fdiv>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fd5e 	bl	80006f4 <__aeabi_f2uiz>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	63a3      	str	r3, [r4, #56]	@ 0x38

}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	42c80000 	.word	0x42c80000

08000c48 <controlMotor>:

void controlMotor(uint8_t motorIndex, uint8_t dirBit){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	while (GPIOB -> IDR & (1 << dirBit)){
 8000c58:	e01f      	b.n	8000c9a <controlMotor+0x52>
		turnON(motorIndex);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fe8d 	bl	800097c <turnON>
		setRotationDir(motorIndex);
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff3b 	bl	8000ae0 <setRotationDir>
		uint16_t ADCVal = getADCVal(0);
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff fef8 	bl	8000a60 <getADCVal>
 8000c70:	4603      	mov	r3, r0
 8000c72:	81fb      	strh	r3, [r7, #14]
		float dutyCycle = ((float)ADCVal * 100.0f) / 4095.0f;
 8000c74:	89fb      	ldrh	r3, [r7, #14]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fb1e 	bl	80002b8 <__aeabi_ui2f>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	490f      	ldr	r1, [pc, #60]	@ (8000cbc <controlMotor+0x74>)
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fb71 	bl	8000368 <__aeabi_fmul>
 8000c86:	4603      	mov	r3, r0
 8000c88:	490d      	ldr	r1, [pc, #52]	@ (8000cc0 <controlMotor+0x78>)
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fc20 	bl	80004d0 <__aeabi_fdiv>
 8000c90:	4603      	mov	r3, r0
 8000c92:	60bb      	str	r3, [r7, #8]
		writePWM(dutyCycle);
 8000c94:	68b8      	ldr	r0, [r7, #8]
 8000c96:	f7ff ffab 	bl	8000bf0 <writePWM>
	while (GPIOB -> IDR & (1 << dirBit)){
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <controlMotor+0x7c>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	79ba      	ldrb	r2, [r7, #6]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1d6      	bne.n	8000c5a <controlMotor+0x12>
	}
	turnOFF(motorIndex);
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fe86 	bl	80009c0 <turnOFF>
}
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	42c80000 	.word	0x42c80000
 8000cc0:	457ff000 	.word	0x457ff000
 8000cc4:	40010c00 	.word	0x40010c00

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <NMI_Handler+0x4>

08000cd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <MemManage_Handler+0x4>

08000ce0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <UsageFault_Handler+0x4>

08000cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d18:	f000 f82e 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d2c:	f7ff fff8 	bl	8000d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d30:	480b      	ldr	r0, [pc, #44]	@ (8000d60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d32:	490c      	ldr	r1, [pc, #48]	@ (8000d64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d34:	4a0c      	ldr	r2, [pc, #48]	@ (8000d68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a09      	ldr	r2, [pc, #36]	@ (8000d6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d48:	4c09      	ldr	r4, [pc, #36]	@ (8000d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d56:	f000 f821 	bl	8000d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d5a:	f7ff fceb 	bl	8000734 <main>
  bx lr
 8000d5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000d68:	08000e04 	.word	0x08000e04
  ldr r2, =_sbss
 8000d6c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000d70:	20000024 	.word	0x20000024

08000d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC1_2_IRQHandler>
	...

08000d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <HAL_IncTick+0x1c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <HAL_IncTick+0x20>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a03      	ldr	r2, [pc, #12]	@ (8000d98 <HAL_IncTick+0x20>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000020 	.word	0x20000020

08000d9c <__libc_init_array>:
 8000d9c:	b570      	push	{r4, r5, r6, lr}
 8000d9e:	2600      	movs	r6, #0
 8000da0:	4d0c      	ldr	r5, [pc, #48]	@ (8000dd4 <__libc_init_array+0x38>)
 8000da2:	4c0d      	ldr	r4, [pc, #52]	@ (8000dd8 <__libc_init_array+0x3c>)
 8000da4:	1b64      	subs	r4, r4, r5
 8000da6:	10a4      	asrs	r4, r4, #2
 8000da8:	42a6      	cmp	r6, r4
 8000daa:	d109      	bne.n	8000dc0 <__libc_init_array+0x24>
 8000dac:	f000 f81a 	bl	8000de4 <_init>
 8000db0:	2600      	movs	r6, #0
 8000db2:	4d0a      	ldr	r5, [pc, #40]	@ (8000ddc <__libc_init_array+0x40>)
 8000db4:	4c0a      	ldr	r4, [pc, #40]	@ (8000de0 <__libc_init_array+0x44>)
 8000db6:	1b64      	subs	r4, r4, r5
 8000db8:	10a4      	asrs	r4, r4, #2
 8000dba:	42a6      	cmp	r6, r4
 8000dbc:	d105      	bne.n	8000dca <__libc_init_array+0x2e>
 8000dbe:	bd70      	pop	{r4, r5, r6, pc}
 8000dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dc4:	4798      	blx	r3
 8000dc6:	3601      	adds	r6, #1
 8000dc8:	e7ee      	b.n	8000da8 <__libc_init_array+0xc>
 8000dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dce:	4798      	blx	r3
 8000dd0:	3601      	adds	r6, #1
 8000dd2:	e7f2      	b.n	8000dba <__libc_init_array+0x1e>
 8000dd4:	08000dfc 	.word	0x08000dfc
 8000dd8:	08000dfc 	.word	0x08000dfc
 8000ddc:	08000dfc 	.word	0x08000dfc
 8000de0:	08000e00 	.word	0x08000e00

08000de4 <_init>:
 8000de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de6:	bf00      	nop
 8000de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dea:	bc08      	pop	{r3}
 8000dec:	469e      	mov	lr, r3
 8000dee:	4770      	bx	lr

08000df0 <_fini>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	bf00      	nop
 8000df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000df6:	bc08      	pop	{r3}
 8000df8:	469e      	mov	lr, r3
 8000dfa:	4770      	bx	lr
